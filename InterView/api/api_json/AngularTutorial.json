{"accessibility":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Accessibility</h1>\n<hr/>\n<p><b>Accessibility</b> support is one of the important feature of every UI based application. Accessibility is a way of designing the application so that, it is accessible for those having certain disabilities as well. Let us learn the support provided by Angular to develop application with good accessibility.</p>\n<ul class=\"list\">\n<li><p>While using attribute binding, use <b>attr.</b> prefix for ARIA attributes.</p></li>\n<li><p>Use Angular material component for Accessibility. Some of the useful components are <b>LiveAnnouncer</b> and <b>cdkTrapFocu.</b></p></li>\n<li><p>Use native HTML elements wherever possible because native HTML element provides maximum accessibility features. When creating a component, select native html element matching your use case instead of redeveloping the native functionality.</p></li>\n<li><p>Use <b>NavigationEnd</b> to track and control the focus of the application as it greatly helps in accessibility.</p></li>\n</ul>\n\t\t</div>\n\t","angular_components_and_templates":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Angular Components and Templates</h1>\r\n<hr/>\r\n<p>As we learned earlier, <b>Components</b> are building block of Angular application. The main job of Angular Component is to generate a section of web page called <b>view</b>. Every component will have an associated template and it will be used to generate views.</p>\r\n<p>Let us learn the basic concept of component and template in this chapter.</p>\r\n<h2>Add a component</h2>\r\n<p>Let us create a new component in our <b>ExpenseManager</b> application.</p>\r\n<p>Open command prompt and go to <b>ExpenseManager</b> application.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Create a new component using <b>ng generate component</b> command as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component expense-entry\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry/expense-entry.component.html (28 bytes) \r\nCREATE src/app/expense-entry/expense-entry.component.spec.ts (671 bytes) \r\nCREATE src/app/expense-entry/expense-entry.component.ts (296 bytes) \r\nCREATE src/app/expense-entry/expense-entry.component.css (0 bytes) \r\nUPDATE src/app/app.module.ts (431 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><b>ExpenseEntryComponent</b> is created under src/app/expense-entry folder.</li>\r\n<li>Component class, Template and stylesheet are created.</li>\r\n<li>AppModule is updated with new component.</li>\r\n</ul>\r\n<p>Add title property to <b>ExpenseEntryComponent</b> (src/app/expense-entry/expense-entry.component.ts) component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-expense-entry', \r\n   templateUrl: './expense-entry.component.html', styleUrls: ['./expense-entry.component.css'] \r\n}) \r\nexport class ExpenseEntryComponent implements OnInit {\r\n   title: string;\r\n   constructor() { } \r\n   ngOnInit() { \r\n      this.title = \"Expense Entry\" \r\n   } \r\n}\r\n</pre>\r\n<p>Update template, <b>src/app/expense-entry/expense-entry.component.html</b>with below content.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p&gt;{{ title }}&lt;/p&gt;\r\n</pre>\r\n<p>Open <b>src/app/app.component.html</b> and include newly created component.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;app-expense-entry&gt;&lt;/app-expense-entry&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>app-expense-entry</b> is the selector value and it can be used as regular HTML Tag.</p>\r\n<p>Finally, the output of the application is as shown below &minus;</p>\r\n<p>We will update the content of the component during the course of learning more about templates.</p>\r\n<h2>Templates</h2>\r\n<p>The integral part of Angular component is <b>Template</b>. It is used to generate the HTML content. <b>Templates</b> are plain HTML with additional functionality.</p>\r\n<h3>Attach a template</h3>\r\n<p><b>Template</b> can be attached to Angular component using <b>@component</b> decorator’s meta data. Angular provides two meta data to attach template to components.</p>\r\n<p><b>templateUrl</b></p>\r\n<p>We already know how to use templateUrl. It expects the relative path of the template file. For example, AppComponent set its template as app.component.html.</p>\r\n<pre class=\"result notranslate\">\r\ntemplateUrl: './app.component.html',\r\n</pre>\r\n<p><b>template</b></p>\r\n<p><b>template</b> enables to place the HTML string inside the component itself. If the template content is minimal, then it will be easy to have it <b>Component</b> class itself for easy tracking and maintenance purpose.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@Component({ \r\n   selector: 'app-root', \r\n   templateUrl: `&lt;h1&gt;{{ title }}&lt;/h1&gt;`, \r\n   styleUrls: ['./app.component.css'] \r\n}) \r\nexport class AppComponent implements OnInit { \r\n   title = 'Expense Manager'; \r\n   constructor(private debugService : DebugService) {} ngOnInit() { \r\n      this.debugService.info(\"Angular Application starts\"); \r\n   } \r\n}\r\n</pre>\r\n<h3>Attach Stylesheet</h3>\r\n<p>Angular Templates can use CSS styles similar to HTML. Template gets its style information from two sources, a) from its component b) from application configuration.</p>\r\n<p><b>Component configuration</b></p>\r\n<p><b>Component</b> decorator provides two option, <b>styles</b> and <b>styleUrls</b> to provide CSS style information to its template.</p>\r\n<ul class=\"list\">\r\n<li>Styles &minus; <b>styles</b> option is used to place the CSS inside the component itself.</li>\r\n</ul>\r\n<pre class=\"result notranslate\">\r\nstyles: ['h1 { color: '#ff0000'; }']\r\n</pre>\r\n<ul class=\"list\">\r\n<li>styleUrls &minus; <b>styleUrls</b> is used to refer external CSS stylesheet. We can use multiple stylesheet as well.</li>\r\n</ul>\r\n<pre class=\"result notranslate\">\r\nstyleUrls: ['./app.component.css', './custom_style.css']\r\n</pre>\r\n<h3>Application configuration</h3>\r\n<p>Angular provides an option in project configuration <b>(angular.json)</b> to specify the CSS stylesheets. The styles specified in <b>angular.json</b> will be applicable for all templates. Let us check our <b>angular.json</b> as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{\r\n\"projects\": { \r\n   \"expense-manager\": { \r\n      \"architect\": { \r\n         \"build\": { \r\n            \"builder\": \"@angular-devkit/build-angular:browser\", \"options\": { \r\n               \"outputPath\": \"dist/expense-manager\", \r\n               \"index\": \"src/index.html\", \r\n               \"main\": \"src/main.ts\", \r\n               \"polyfills\": \"src/polyfills.ts\", \r\n               \"tsConfig\": \"tsconfig.app.json\", \r\n               \"aot\": false, \r\n               \"assets\": [ \r\n                  \"src/favicon.ico\", \r\n                  \"src/assets\" \r\n               ], \r\n               \"styles\": [ \r\n                  \"src/styles.css\" \r\n               ], \r\n               \"scripts\": [] \r\n            }, \r\n         }, \r\n      } \r\n   }}, \r\n   \"defaultProject\": \"expense-manager\" \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>styles</b> option sets<b>src/styles.css</b> as global CSS stylesheet. We can include any number of CSS stylesheets as it supports multiple values.</p>\r\n<h2>Include bootstrap</h2>\r\n<p>Let us include bootstrap into our <b>ExpenseManager</b> application using <b>styles</b> option and change the default template to use bootstrap components.</p>\r\n<p>Open command prompt and go to ExpenseManager application.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Install <b>bootstrap</b> and <b>JQuery</b> library using below commands</p>\r\n<pre class=\"result notranslate\">\r\nnpm install --save bootstrap@4.5.0 jquery@3.5.1\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have installed JQuery, because, bootstrap uses jquery extensively for advanced components.</p>\r\n<p>Option <b>angular.json</b> and set bootstrap and jquery library path.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{ \r\n   \"projects\": { \r\n      \"expense-manager\": { \r\n         \"architect\": { \r\n            \"build\": {\r\n               \"builder\":\"@angular-devkit/build-angular:browser\", \"options\": { \r\n                  \"outputPath\": \"dist/expense-manager\", \r\n                  \"index\": \"src/index.html\", \r\n                  \"main\": \"src/main.ts\", \r\n                  \"polyfills\": \"src/polyfills.ts\", \r\n                  \"tsConfig\": \"tsconfig.app.json\", \r\n                  \"aot\": false, \r\n                  \"assets\": [ \r\n                     \"src/favicon.ico\", \r\n                     \"src/assets\" \r\n                  ], \r\n                  \"styles\": [ \r\n                     \"./node_modules/bootstrap/dist/css/bootstrap.css\", \"src/styles.css\" \r\n                  ], \r\n                  \"scripts\": [ \r\n                     \"./node_modules/jquery/dist/jquery.js\", \"./node_modules/bootstrap/dist/js/bootstrap.js\" \r\n                  ] \r\n               }, \r\n            }, \r\n         } \r\n   }}, \r\n   \"defaultProject\": \"expense-manager\" \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>scripts</b> option is used to include JavaScript library. <b>JavaScript</b> registered through <b>scripts</b> will be available to all Angular components in the application.</p>\r\n<p>Open <b>app.component.html</b> and change the content as specified below</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt; \r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt; \r\n   &lt;div class=\"container\"&gt; \r\n      &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; \r\n         &lt;span class=\"navbar-toggler-icon\"&gt;\r\n         &lt;/span&gt; \r\n      &lt;/button&gt; \r\n      &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt; \r\n         &lt;ul class=\"navbar-nav ml-auto\"&gt; \r\n            &lt;li class=\"nav-item active\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n               &lt;span class=\"sr-only\"&gt;(current)\r\n               &lt;/span&gt;\r\n            &lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Report&lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt; \r\n            &lt;/li&gt; \r\n         &lt;/ul&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/nav&gt; \r\n&lt;app-expense-entry&gt;&lt;/app-expense-entry&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Used bootstrap navigation and containers.</p>\r\n<p>Open <b>src/app/expense-entry/expense-entry.component.html</b> and place below content.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt; \r\n&lt;div class=\"container\"&gt; \r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt; \r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n            &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; {{ title }} \r\n            &lt;/div&gt; \r\n            &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n               &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n            &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;  \r\n            &lt;strong&gt;&lt;em&gt;Item:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Pizza \r\n         &lt;/div&gt;\r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n            &lt;strong&gt;&lt;em&gt;Amount:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            20 \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Category:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Food \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Location:&lt;/em&gt;&lt;/strong&gt;\r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Zomato \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Spend On:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            June 20, 2020 \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Restart the application.</p>\r\n<p>The output of the application is as follows &minus;</p>\r\n<p>We will improve the application to handle dynamic expense entry in next chapter.</p>\r\n</div>\r\n\t\r\n","angular_material":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Angular Material</h1>\n<hr/>\n<p>Angular Material provides a huge collection of high-quality and ready-made Angular component based on Material design. Let us learn how to include Angular material in Angular application and use its component.</p>\n<h2>Configure Angular Material</h2>\n<p>Let us see how to configure Angular Material in Angular application.</p>\n<p>Open command prompt and go to project root folder.</p>\n<pre class=\"result notranslate\">\ncd /go/to/expense-manager\n</pre>\n<p>Add Angular material package using below command &minus;</p>\n<pre class=\"result notranslate\">\nng add @angular/material\n</pre>\n<p>Angular CLI will ask certain question regarding theme, gesture recognition and browser animations. Select your any theme of your choice and then answer positively for gesture recognition and browser animation.</p>\n<pre class=\"result notranslate\">\nInstalling packages for tooling via npm.\nInstalled packages for tooling via npm.\nChoose a prebuilt theme name, or \"custom\" for a custom theme: Indigo/Pink        [ Preview: https://material.angular.i\no?theme=indigo-pink ]\nSet up HammerJS for gesture recognition? Yes\nSet up browser animations for Angular Material? Yes\n</pre>\n<p>Angular material packages each UI component in a separate module. Import all the necessary module into the application through root module <b>(src/app/app.module.ts)</b></p>\n<pre class=\"result notranslate\">\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule\n  ]\n})\n</pre>\n<p>Change the edit button using ExpenseEntryListComponent template (src/app/expense-entry-list/expense-entry-list.component.html) as specified below &minus;</p>\n<pre class=\"result notranslate\">\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt;\n    &lt;!-- &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; --&gt;\n    &lt;button mat-raised-button color=\"primary\">Edit&lt;/button&gt; \n&lt;/div&gt;\n</pre>\n<p>Run the application and test the page.</p>\n<pre class=\"result notranslate\">\nng serve\n</pre>\n<p>The output of the application is as follows &minus;</p>\n<p>Here, the application clearly shows the Angular Material button.</p>\n<h3>Working example</h3>\n<p>Some of the important UI elements provided by Angular Material package.</p>\n<ul class=\"list\">\n<li>Form field</li>\n<li>Input</li>\n<li>Checkbox</li>\n<li>Radio button</li>\n<li>Select</li>\n<li>Button</li>\n<li>DatePicker</li>\n<li>List</li>\n<li>Card</li>\n<li>Grid list</li>\n<li>Table</li>\n<li>Paginator</li>\n<li>Tabs</li>\n<li>Toolbar</li>\n<li>Menu</li>\n<li>Dialog</li>\n<li>Snackbar</li>\n<li>Progress bar</li>\n<li>Icon</li>\n<li>Divider</li>\n</ul>\n<p>Using material component is quite easy and we will learn one of the frequently used material component, <b>Material Table</b> by working on a sample project.</p>\n<p>Open command prompt and go to project root folder.</p>\n<pre class=\"result notranslate\">\nng add @angular/material\n</pre>\n<p>Let us change our <b>ExpenseEntryListComponent</b>(src/app/expense-entry-list/expense-entry-list.component.ts) and use Material Table component.</p>\n<p>Declare a variable, displayedColumns and assign the list of column to be displayed.</p>\n<pre class=\"result notranslate\">\ndisplayedColumns: string[] = ['item', 'amount', 'category', 'location', 'spendOn' ];\n</pre>\n<p>Add material table as specified below in the <b>ExpenseEntryListComponent</b> template <b>(src/app/expense-entry-list/expense-entry-list.component.html)</b> and remove our existing list.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;div class=\"mat-elevation-z8\"&gt;\n   &lt;table mat-table [dataSource]=\"expenseEntries\"&gt; \n      &lt;ng-container matColumnDef=\"item\"&gt;\n         &lt;th mat-header-cell *matHeaderCellDef&gt; Item &lt;/th&gt;\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align: left\"&gt; {{element.item}} &lt;/td&gt;\n      &lt;/ng-container&gt;\n\n      &lt;ng-container matColumnDef=\"amount\"&gt;\n         &lt;th mat-header-cell *matHeaderCellDef &gt; Amount &lt;/th&gt;\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align: left\"&gt; {{element.amount}} &lt;/td&gt;\n      &lt;/ng-container&gt;\n\n      &lt;ng-container matColumnDef=\"category\"&gt;\n         &lt;th mat-header-cell *matHeaderCellDef&gt; Category &lt;/th&gt;\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align: left\"&gt; {{element.category}} &lt;/td&gt;\n      &lt;/ng-container&gt;\n\n      &lt;ng-container matColumnDef=\"location\"&gt;\n         &lt;th mat-header-cell *matHeaderCellDef&gt; Location &lt;/th&gt;\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align:left\"&gt; {{element.location}} &lt;/td&gt;\n      &lt;/ng-container&gt;\n\n      &lt;ng-container matColumnDef=\"spendOn\"&gt;\n         &lt;th mat-header-cell *matHeaderCellDef&gt; Spend On &lt;/th&gt;\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align: left\"&gt; {{element.spendOn}} &lt;/td&gt;\n      &lt;/ng-container&gt;\n\n      &lt;tr mat-header-row *matHeaderRowDef=\"displayedColumns\"&gt;&lt;/tr&gt;\n      &lt;tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"&gt;&lt;/tr&gt;\n   &lt;/table&gt;\n&lt;/div&gt;\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><p><b>mat-table</b> property is used to convert the normal table in to material table.</p></li>\n<li><p><b>[dataSource]</b> property is used to specify the data source of the table.</p></li>\n<li><p>Material table is template based and each column can be designed using separate template. <b>ng-container</b> is used to create template.</p></li>\n<li><p><b>matColumnDef</b> is used to specify the column of the data source applied to the particular ng-container.</p></li>\n<li><p><b>mat-header-cell</b> is used to specify the header text for each column.</p></li>\n<li><p><b>mat-cell</b> is used to specify the content of each column.</p></li>\n<li><p><b>mat-header-row and mat-row</b> is used to specify the order of the column in row.</p></li>\n<li><p>We have used only the basic features of the Material table. Material table has many more features such as sorting, pagination, etc.</p></li>\n</ul>\n<p>Run the application.</p>\n<pre class=\"result notranslate\">\nng serve\n</pre>\n<p>The output of the application is as follows &minus;</p>\n\t\t</div>","animations":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Animations</h1>\r\n<hr/>\r\n<p>Animation gives the web application a refreshing look and rich user interaction. In HTML, animation is basically the transformation of HTML element from one CSS style to another over a specific period of time. For example, an image element can be enlarged by changing its width and height.</p>\r\n<p>If the width and height of the image is changed from initial value to final value in steps over a period of time, say 10 seconds, then we get an animation effect. So, the scope of the animation depends on the feature / property provided by the CSS to style a HTML element.</p>\r\n<p>Angular provides a separate module <b>BrowserAnimationModule</b> to do the animation. <b>BrowserAnimationModule</b> provides an easy and clear approach to do animation.</p>\r\n<h2>Configuring animation module</h2>\r\n<p>Let us learn how to configure animation module in this chapter.</p>\r\n<p>Follow below mentioned steps to configure animation module, <b>BrowserAnimationModule</b> in an application.</p>\r\n<p>Import <b>BrowserAnimationModule</b> in AppModule.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'; \r\n@NgModule({ \r\n   imports: [ \r\n      BrowserModule, \r\n      BrowserAnimationsModule \r\n   ], \r\n   declarations: [ ], \r\n   bootstrap: [ ] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p>Import animation function in the relevant components.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { state, style, transition, animate, trigger } from '@angular/animations'\r\n</pre>\r\n<p>Add <b>animations</b> metadata property in the relevant component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@Component({ \r\n   animations: [ \r\n      // animation functionality goes here \r\n   ] \r\n}) \r\nexport class MyAnimationComponent\r\n</pre>\r\n<h2>Concepts</h2>\r\n<p>In angular, we need to understand the five core concept and its relationship to do animation.</p>\r\n<p>State</p>\r\n<p>State refers the specific state of the component. A component can have multiple defined state. The state is created using state() method. state() method has two arguments.</p>\r\n<ul class=\"list\">\r\n<li><p><b>name</b> &minus; Unique name of the state.</p></li>\r\n<li><p><b>style</b> &minus; Style of the state defined using style() method.</p></li>\r\n</ul>\r\n<pre class=\"prettyprint notranslate\">\r\nanimations: [ \r\n   ... \r\n   state('start', style( { width: 200px; } )) \r\n   ... \r\n]\r\n</pre>\r\n<p>Here, <b>start</b> is the name of the state.</p>\r\n<p>Style</p>\r\n<p><b>Style</b> refers the CSS style applied in a particular state. style() method is used to style the particular state of a component. It uses the CSS property and can have multiple items.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nanimations: [ \r\n   ... \r\n   state('start', style( { width: 200px; opacity: 1 } )) \r\n   ... \r\n]\r\n</pre>\r\n<p>Here, <b>start</b> state defines two CSS property, <b>width</b> with value 200px and opacity with value 1.</p>\r\n<h3>Transition</h3>\r\n<p><b>Transition</b> refers the transition from one state to another. Animation can have multiple transition. Each transition is defined using transition() function. transition() takes two argument.</p>\r\n<ul class=\"list\">\r\n<li><p>Specifies the direction between two transition state. For example, <b>start =&gt; end </b>refers that the initial state is <b>start</b> and the final state is <b>end</b>. Actually, it is an expression with rich functionality.</p></li>\r\n<li><p>Specifies the animation details using <b>animate()</b> function.</p></li>\r\n</ul>\r\n<pre class=\"prettyprint notranslate\">\r\nanimations: [ \r\n   ... \r\n   transition('start =&gt; end', [ \r\n      animate('1s') \r\n   ])\r\n   ... \r\n]\r\n</pre>\r\n<p>Here, <b>transition()</b> function defines the transition from start state to end state with animation defined in <b>animate()</b> method.</p>\r\n<h3>Animation</h3>\r\n<p>Animation defines the way the transition from one state to another take place. <b>animation()</b> function is used to set the animation details. <b>animate()</b> takes a single argument in the form of below expression &minus;</p>\r\n<pre class=\"result notranslate\">\r\nduration delay easing\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p><b>duration</b> &minus; refers the duration of the transition. It is expressed as 1s, 100ms, etc.,</p></li>\r\n<li><p><b>delay</b> &minus; refers the delay time to start the transition. It is expressed similar to <i>duration</i></p></li>\r\n<li><p><b>easing</b> &minus; refers how do to accelerates / decelerates the transition in the given time duration.</p></li>\r\n</ul>\r\n<h3>Trigger</h3>\r\n<p>Every animation needs a trigger to start the animation. trigger() method is used to set all the animation information such as state, style, transition and animation in one place and give it a unique name. The unique name is used further to trigger the animation.</p>\r\n<pre class=\"result notranslate\">\r\nanimations: [ \r\n   trigger('enlarge', [ \r\n      state('start', style({ \r\n         height: '200px', \r\n      })), \r\n      state('end', style({ \r\n         height: '500px', \r\n      })), \r\n      transition('start =&gt; end', [ \r\n         animate('1s') \r\n      ]), \r\n      transition('end =&gt; start', [ \r\n         animate('0.5s') \r\n   ]) ]), \r\n]\r\n</pre>\r\n<p>Here, <b>enlarge</b> is the unique name given to the particular animation. It has two state and related styles. It has two transition one from start to end and another from end to start. End to start state do the reverse of the animation.</p>\r\n<p><b>Trigger</b> can be attached to an element as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div [@triggerName]=\"expression\"&gt;...&lt;/div&gt;;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;img [@enlarge]=\"isEnlarge ? 'end' : 'start'\"&gt;...&lt;/img&gt;;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>@enlarge</b> &minus; trigger is set to image tag and attrached to an expression.</p></li>\r\n<li><p>If <b>isEnlarge</b> value is changed to true, then <b>end</b> state will be set and it triggers <b>start =&gt;</b> end transition.</p></li>\r\n<li><p>If <b>isEnlarge</b> value is changed to false, then <b>start</b> state will be set and it triggers <b>end =&gt; start transition</b>.</p></li>\r\n</ul>\r\n<h3>Simple Animation Example</h3>\r\n<p>Let us write a new angular application to better understand the animation concept by enlarging an image with animation effect.</p>\r\n<p>Open command prompt and create new angular application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/workspace \r\nng new animation-app \r\ncd animation-app\r\n</pre>\r\n<p>Configure <b>BrowserAnimationModule</b> in the <b>AppModule</b> (src/app/app.module.ts)</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserModule } from '@angular/platform-browser'; \r\nimport { NgModule } from '@angular/core' \r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'; \r\nimport { AppComponent } from './app.component'; @NgModule({ \r\n   declarations: [ \r\n      AppComponent \r\n   ], \r\n   imports: [ \r\n      BrowserModule, \r\n      BrowserAnimationsModule \r\n   ], \r\n   providers: [], \r\n   bootstrap: [AppComponent] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p>Open <b>AppComponent (src/app/app.component.ts)</b> and import necessary animation functions.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { state, style, transition, animate, trigger } from '@angular/animations';\r\n</pre>\r\n<p>Add animation functionality, which will animate the image during the enlarging / shrinking of the image.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css'],\r\n   animations: [\r\n      trigger('enlarge', [\r\n         state('start', style({\r\n            height: '150px'\r\n         })),\r\n         state('end', style({\r\n            height: '250px'\r\n         })),\r\n         transition('start => end', [\r\n            animate('1s 2s')\r\n         ]),\r\n         transition('end => start', [\r\n            animate('1s 2s')\r\n         ])\r\n      ])\r\n   ]\r\n})\r\n</pre>\r\n<p>Open <b>AppComponent</b> template, <b>src/app/app.component.html</b> and remove sample code. Then, include a header with application title, image and a button to enlarge / shrink the image.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt; \r\n&lt;img src=\"assets/puppy.jpeg\" style=\"height: 200px\" /&gt; &lt;br /&gt; \r\n&lt;button&gt;{{ this.buttonText }}&lt;/button&gt;\r\n</pre>\r\n<p>Write a function to change the animation expression.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class AppComponent { \r\n   title = 'Animation Application'; \r\n   isEnlarge: boolean = false; \r\n   buttonText: string = \"Enlarge\"; \r\n   triggerAnimation() { \r\n      this.isEnlarge = !this.isEnlarge; \r\n      if(this.isEnlarge) \r\n         this.buttonText = \"Shrink\"; \r\n      else \r\n         this.buttonText = \"Enlarge\"; \r\n   } \r\n}\r\n</pre>\r\n<p>Attach the animation in the image tag. Also, attach the click event for the button.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;img [@enlarge]=\"isEnlarge ? 'end' : 'start'\" src=\"assets/puppy.jpeg\" style=\"height: 200px\" /&gt;\r\n&lt;br /&gt;\r\n&lt;button (click)='triggerAnimation()'&gt;{{ this.buttonText }}&lt;/button&gt;\r\n</pre>\r\n<p>The complete <b>AppComponent</b> code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component } from '@angular/core';\r\nimport { state, style, transition, animate, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css'],\r\n   animations: [\r\n      trigger('enlarge', [\r\n         state('start', style({\r\n            height: '150px'\r\n         })),\r\n         state('end', style({\r\n            height: '250px'\r\n         })),\r\n         transition('start =&gt; end', [\r\n            animate('1s 2s')\r\n         ]),\r\n         transition('end =&gt; start', [\r\n            animate('1s 2s')\r\n         ])\r\n      ])\r\n   ]\r\n})\r\nexport class AppComponent {\r\n   title = 'Animation Application';\r\n   isEnlarge: boolean = false;\r\n   buttonText: string = \"Enlarge\";\r\n\r\n\r\n   triggerAnimation() {\r\n      this.isEnlarge = !this.isEnlarge;\r\n\r\n      if(this.isEnlarge) \r\n         this.buttonText = \"Shrink\";\r\n      else\r\n         this.buttonText = \"Enlarge\";\r\n   }\r\n}\r\n</pre>\r\n<p>The complete AppComponent template code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;img [@enlarge]=\"isEnlarge ? 'end' : 'start'\" src=\"assets/puppy.jpeg\" style=\"height: 200px\" /&gt;\r\n&lt;br /&gt;\r\n&lt;button (click)='triggerAnimation()'&gt;{{ this.buttonText }}&lt;/button&gt;\r\n</pre>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Click the enlarge button, it will enlarge the image with animation. The result will be as shown below &minus;</p>\r\n<p>Click the button again to shrink it. The result will be as shown below &minus;</p>\r\n\t\t</div>\r\n\t","architecture":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Architecture</h1>\n<hr/>\n\n<div id=\"google-top-ads\">\n<div class=\"top-ad-heading\">Advertisements</div>\n<div style=\"text-align:center\" class=\"google-top-ads\">\n<div id=\"adp_top_ads\" style=\"text-align:center!important;min-height:90px!important\"></div>\n<script>\n     var adPos = document.getElementById('adp_top_ads');\n     var ad_id_720 = \"8014640d-fd34-4b2e-9b1b-cc67234a2325\";\n     var ad_id_650 = \"2d1bb2c4-eb72-471d-9c80-1bf5514728c1\";\n     var ad_id_300 = \"75e8929b-e21c-41ad-bca5-5cb2601dc07b\";\n     var width = window.innerWidth;\n     var ad_id = ad_id_720;\n     if( width <= 768 ){\n        ad_id =  ad_id_300;\n     }else if( width <= 1435 ){\n        ad_id =  ad_id_650;\n     }\n     adPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n     var adpushup = adpushup || {};\n     adpushup.que = adpushup.que || [];\n     adpushup.que.push(function() {\n     adpushup.triggerAd(ad_id);\n     });\n</script>\n</div>\n</div>\n<br>\n<div class=\"mui-container-fluid button-borders\">\n<div class=\"pre-btn\">\n<a href=\"angular8_creating_first_application.html\"><i class=\"fal fa-chevron-circle-left\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"angular8_angular_components_and_templates.html\">Next Page <i class=\"fal fa-chevron-circle-right\"></i>&nbsp;</a>\n</div>\n</div>\n<div id=\"load\">\n\t<div class=\"\">\n\t\t<div id=\"ebooks_grid\">\n\t\t\t\t\t\t<div class=\"videos\">\n\t\t\t                <br/>\n            \t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"1906\" />\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" class=\"\" data-title=\"angular_2_online_training\" > \n            <span class=\"play-button-trigger\"></span>\n    </a>\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"course-card-body\">\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" title=\"Angular 2 Online Training\" class=\"\" data-title=\"angular_2_online_training\" >Angular 2 Online Training</a></h4>\n\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\n    28 Lectures \n    <span><i class=\"fa fa-clock\"></i> 2.5 hours </span>\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/Anadi-Sharma\" >Anadi Sharma</a></p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"v-courses-price\">\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \n   <a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" target=\"_blank\">\n   <div class=\"btn-success rounded\">More Detail</div>\n   </a>\n</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"clear\"></div>\n\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"2872\" />\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" class=\"\" data-title=\"angular_the_complete_course\" > \n            <span class=\"play-button-trigger\"></span>\n    </a>\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"course-card-body\">\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" title=\"Angular - The Complete Course\" class=\"\" data-title=\"angular_the_complete_course\" >Angular - The Complete Course</a></h4>\n\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\n    13 Lectures \n    <span><i class=\"fa fa-clock\"></i> 48 mins</span>\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/ganesh_kavhar\" >Ganesh Kavhar</a></p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"v-courses-price\">\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \n   <a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" target=\"_blank\">\n   <div class=\"btn-success rounded\">More Detail</div>\n   </a>\n</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"clear\"></div>\n\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"2884\" />\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" class=\"\" data-title=\"angular_interview_q_and_a_series\" > \n            <span class=\"play-button-trigger\"></span>\n    </a>\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"course-card-body\">\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" title=\"Angular Interview Q & A series\" class=\"\" data-title=\"angular_interview_q_and_a_series\" >Angular Interview Q & A series</a></h4>\n\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\n    5 Lectures \n    <span><i class=\"fa fa-clock\"></i> 1.5 hours </span>\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/shivprasad_koirala\" >SHIVPRASAD KOIRALA</a></p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"v-courses-price\">\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \n   <a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" target=\"_blank\">\n   <div class=\"btn-success rounded\">More Detail</div>\n   </a>\n</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"clear\"></div>\n\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div class=\"clear\"></div>\n\t\t\t\n\t\t</div>\n\t\t<div class=\"clear\"></div>\n\t</div>\n</div>\n<div class=\"clear\"></div>\n<div class=\"clear\"></div>\n<p>Let us see the architecture of the Angular framework in this chapter.</p>\n<p>Angular framework is based on four core concepts and they are as follows &minus;</p>\n<ul class=\"list\">\n<li>Components.</li>\n<li>Templates with <b>Data binding</b> and <b>Directives</b>.</li>\n<li>Modules.</li>\n<li>Services and dependency injection.</li>\n</ul>\n<h2>Component</h2>\n<p>The core of the Angular framework architecture is <b>Angular Component</b>. Angular Component is the building block of every Angular application. Every angular application is made up of one more <b>Angular Component</b>. It is basically a plain JavaScript / Typescript class along with a HTML template and an associated name.</p>\n<p>The HTML template can access the data from its corresponding JavaScript / Typescript class. Component’s HTML template may include other component using its selector’s value (name). The Angular Component may have an optional CSS Styles associated it and the HTML template may access the CSS Styles as well.</p>\n<p>Let us analyse the <b>AppComponent</b> component in our <b>ExpenseManager</b> application. The <b>AppComponent</b> code is as follows &minus;</p>\n<pre class=\"prettyprint notranslate\">\n// src/app/app.component.ts \nimport { Component } from '@angular/core'; @Component({ \n   selector: 'app-root', \n   templateUrl: './app.component.html', \n   styleUrls: ['./app.component.css'] \n}) \nexport class AppComponent { \n   title = 'Expense Manager'; \n}\n</pre>\n<p><b>@Component</b> is a decorator and it is used to convert a normal Typescript class to <b>Angular Component</b>.</p>\n<p><b>app-root</b> is the selector / name of the component and it is specified using <b>selector</b> meta data of the component’s decorator. <b>app-root</b> can be used by application root document, <b>src/index.html</b> as specified below</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!doctype html&gt; \n&lt;html lang=\"en\"&gt; \n   &lt;head&gt; \n      &lt;meta charset=\"utf-8\"&gt; \n      &lt;title&gt;ExpenseManager&lt;/title&gt; \n      &lt;base href=\"/\"&gt; \n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; \n      &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt; \n   &lt;/head&gt; \n   &lt;body&gt; \n      &lt;app-root&gt;&lt;/app-root&gt; \n   &lt;/body&gt; \n&lt;/html&gt;\n</pre>\n<p><b>app.component.html</b> is the HTML template document associated with the component. The component template is specified using <b>templateUrl</b> meta data of the <b>@Component</b> decorator.</p>\n<p><b>app.component.css</b> is the CSS style document associated with the component. The component style is specified using <b>styleUrls</b> meta data of the <b>@Component</b> decorator.</p>\n<p><b>AppComponent</b> property (title) can be used in the HTML template as mentioned below &minus;</p>\n<pre class=\"result notranslate\">\n{{ title }}\n</pre>\n<h2>Template</h2>\n<p>Template is basically a super set of HTML. Template includes all the features of HTML and provides additional functionality to bind the component data into the HTML and to dynamically generate HTML DOM elements.</p>\n<p>The core concept of the template can be categorised into two items and they are as follows &minus;</p>\n<h3>Data binding</h3>\n<p>Used to bind the data from the component to the template.</p>\n<pre class=\"result notranslate\">\n{{ title }}\n</pre>\n<p>Here, <b>title</b> is a property in <b>AppComponent</b> and it is bind to template using <b>Interpolation</b>.</p>\n<h3>Directives</h3>\n<p>Used to include logic as well as enable creation of complex HTML DOM elements.</p>\n<pre class=\"result notranslate\">\n&lt;p *ngIf=\"canShow\"&gt;\n   This sectiom will be shown only when the *canShow* propery's value in the corresponding component is *true* &lt;/p&gt; \n&lt;p [showToolTip]='tips' /&gt;\n</pre>\n<p>Here, <b>ngIf</b> and <b>showToolTip</b> (just an example) are directives. <b>ngIf</b> create the paragraph DOM element only when <b>canShow</b> is true. Similarly, <b>showToolTip</b> is <b>Attribute Directives</b>, which adds the tooltip functionality to the paragraph element.</p>\n<p>When user mouse over the paragraph, a tooltip with be shown. The content of the tooltip comes from tips property of its corresponding component.</p>\n<h2>Modules</h2>\n<p><b>Angular Module</b> is basically a collection of related features / functionality. <b>Angular Module</b> groups multiple components and services under a single context.</p>\n<p>For example, animations related functionality can be grouped into single module and Angular already provides a module for the animation related functionality, <b>BrowserAnimationModule</b> module.</p>\n<p>An Angular application can have any number of modules but only one module can be set as root module, which will bootstrap the application and then call other modules as and when necessary. A module can be configured to access functionality from other module as well. In short, components from any modules can access component and services from any other modules.</p>\n<p>Following diagram depicts the interaction between modules and its components.</p>\n<p>Let us check the root module of our <b>Expense Manager</b> application.</p>\n<pre class=\"prettyprint notranslate\">\nimport { BrowserModule } from '@angular/platform-browser'; \nimport { NgModule } from '@angular/core'; \nimport { AppComponent } from './app.component'; @NgModule({ \n   declarations: [ \n      AppComponent \n   ], \n   imports: [ \n      BrowserModule \n   ], \n   providers: [], \n   bootstrap: [AppComponent] \n}) \nexport class AppModule { }\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><p><b>NgModule</b> decorator is used to convert a plain Typescript / JavaScript class into <b>Angular module</b>.</p></li>\n<li><p><b>declarations</b> option is used to include components into the <b>AppModule</b>module.</p></li>\n<li><p><b>bootstrap</b> option is used to set the root component of the <b>AppModule</b>module.</p></li>\n<li><p><b>providers</b> option is used to include the services for the <b>AppModule</b>module.</p></li>\n<li><p><b>imports</b> option is used to import other modules into the <b>AppModule</b>module.</p></li>\n</ul>\n<p>The following diagram depicts the relationship between Module, Component and Services</p>\n<h2>Services</h2>\n<p><b>Services</b> are plain Typescript / JavaScript class providing a very specific functionality. <b>Services</b> will do a single task and do it best. The main purpose of the service is reusability. Instead of writing a functionality inside a component, separating it into a service will make it useable in other component as well.</p>\n<p>Also, <b>Services</b> enables the developer to organise the business logic of the application. Basically, component uses services to do its own job. <b>Dependency Injection</b> is used to properly initialise the service in the component so that the component can access the services as and when necessary without any setup.</p>\n<h2>Workflow of Angular application</h2>\n<p>We have learned the core concepts of Angular application. Let us see the complete flow of a typical Angular application.</p>\n<p><b>src/main.ts</b> is the entry point of Angular application.</p>\n<p>src/main.ts bootstraps the AppModule (src/app.module.ts), which is the root module for every Angular application.</p>\n<pre class=\"result notranslate\">\nplatformBrowserDynamic().bootstrapModule(AppModule) .catch(err =&gt; console.error(err));\n</pre>\n<p><b>AppModule</b> bootstraps the <b>AppComponent</b> (src/app.component.ts), which is the root component of every Angular application.</p>\n<pre class=\"prettyprint notranslate\">\n@NgModule({ \n   declarations: [ \n      AppComponent \n   ], \n      imports: [ \n   BrowserModule \n   ], \n   providers: [], \n   bootstrap: [AppComponent] \n}) \nexport class AppModule { }\n</pre>\n<p>Here,</p>\n<p><b>AppModule</b> loads modules through <b>imports</b> option.</p>\n<p><b>AppModule</b> also loads all the registered service using <b>Dependency Injection (DI)</b> framework.</p>\n<p><b>AppComponent</b> renders its template <b>(src/app.component.html)</b> and uses the corresponding styles <b>(src/app.component.css). AppComponent</b> name, <b>app-root</b> is used to place it inside the <b>src/index.html</b>.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!doctype html&gt; \n&lt;html lang=\"en\"&gt; \n   &lt;head&gt; \n      &lt;meta charset=\"utf-8\"&gt; \n      &lt;title&gt;ExpenseManager&lt;/title&gt; \n      &lt;base href=\"/\"&gt; \n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; \n      &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt; \n   &lt;/head&gt; \n   &lt;body&gt; \n      &lt;app-root&gt;&lt;/app-root&gt; \n   &lt;/body&gt; \n&lt;/html&gt;\n</pre>\n<p><b>AppComponent</b> can use any other components registered in the application.</p>\n<pre class=\"prettyprint notranslate\">\n@NgModule({ \n   declarations: [ \n      AppComponent \n      AnyOtherComponent\n   ], \n   imports: [ \n      BrowserModule \n   ], \n   providers: [], \n   bootstrap: [AppComponent] \n}) \nexport class AppModule { }\n</pre>\n<p>Component use other component through directive in its template using target component’s selector name.</p>\n<pre class=\"result notranslate\">\n&lt;component-selector-name&gt;&lt;/component-selector-name&gt;\n</pre>\n<p>Also, all registered services are accessible to all Angular components through <b>Dependency Injection (DI)</b> framework.</p>\n\t\t</div>\n\t\n","authentication_and_authorization":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Authentication and Authorization</h1>\r\n<hr/>\r\n<p><b>Authentication</b> is the process matching the visitor of a web application with the pre-defined set of user identity in the system. In other word, it is the process of recognizing the user’s identity. Authentication is very important process in the system with respect to security.</p>\r\n<p><b>Authorization</b> is the process of giving permission to the user to access certain resource in the system. Only the authenticated user can be authorised to access a resource.</p>\r\n<p>Let us learn how to do Authentication and Authorization in Angular application in this chapter.</p>\r\n<h2>Guards in Routing</h2>\r\n<p>In a web application, a resource is referred by url. Every user in the system will be allowed access a set of urls. For example, an administrator may be assigned all the url coming under administration section.</p>\r\n<p>As we know already, URLs are handled by <b>Routing</b>. Angular routing enables the urls to be guarded and restricted based on programming logic. So, a url may be denied for a normal user and allowed for an administrator.</p>\r\n<p>Angular provides a concept called <b>Router Guards</b> which can be used to prevent unauthorised access to certain part of the application through routing. Angular provides multiple guards and they are as follows:</p>\r\n<ul class=\"list\">\r\n<li><p><b>CanActivate</b> &minus; Used to stop the access to a route.</p></li>\r\n<li><p><b>CanActivateChild</b> &minus; Used to stop the access to a child route.</p></li>\r\n<li><p><b>CanDeactivate</b> &minus; Used to stop ongoing process getting feedback from user. For example, delete process can be stop if the user replies in negative.</p></li>\r\n<li><p><b>Resolve</b> &minus; Used to pre-fetch the data before navigating to the route.</p></li>\r\n<li><p><b>CanLoad</b> &minus; Used to load assets.</p></li>\r\n</ul>\r\n<h3>Working example</h3>\r\n<p>Let us try to add login functionality to our application and secure it using CanActivate guard.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Create a new service, AuthService to authenticate the user.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate service auth\r\nCREATE src/app/auth.service.spec.ts (323 bytes)\r\nCREATE src/app/auth.service.ts (133 bytes)\r\n</pre>\r\n<p>Open <b>AuthService</b> and include below code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, delay } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n   isUserLoggedIn: boolean = false;\r\n\r\n   login(userName: string, password: string): Observable<boolean> {\r\n      console.log(userName);\r\n      console.log(password);\r\n      this.isUserLoggedIn = userName == 'admin' && password == 'admin';\r\n      localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \r\n\r\n   return of(this.isUserLoggedIn).pipe(\r\n      delay(1000),\r\n      tap(val => { \r\n         console.log(\"Is User Authentication is successful: \" + val); \r\n      })\r\n   );\r\n   }\r\n\r\n   logout(): void {\r\n   this.isUserLoggedIn = false;\r\n      localStorage.removeItem('isUserLoggedIn'); \r\n   }\r\n\r\n   constructor() { }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>We have written two methods, <b>login</b> and <b>logout</b>.</p></li>\r\n<li><p>The purpose of the <b>login</b> method is to validate the user and if the user successfully validated, it stores the information in <b>localStorage</b> and then returns true.</p></li>\r\n<li><p>Authentication validation is that the user name and password should be <b>admin.</b></p></li>\r\n<li><p>We have not used any backend. Instead, we have simulated a delay of 1s using Observables.</p></li>\r\n<li><p>The purpose of the <b>logout</b> method is to invalidate the user and removes the information stored in <b>localStorage.</b></p></li>\r\n</ul>\r\n<p>Create a <b>login</b> component using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component login\r\nCREATE src/app/login/login.component.html (20 bytes)\r\nCREATE src/app/login/login.component.spec.ts (621 bytes)\r\nCREATE src/app/login/login.component.ts (265 bytes)\r\nCREATE src/app/login/login.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1207 bytes)\r\n</pre>\r\n<p>Open <b>LoginComponent</b> and include below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n   selector: 'app-login',\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n   userName: string;\r\n   password: string;\r\n   formData: FormGroup;\r\n\r\n   constructor(private authService : AuthService, private router : Router) { }\r\n\r\n   ngOnInit() {\r\n      this.formData = new FormGroup({\r\n         userName: new FormControl(\"admin\"),\r\n         password: new FormControl(\"admin\"),\r\n      });\r\n   }\r\n\r\n   onClickSubmit(data: any) {\r\n      this.userName = data.userName;\r\n      this.password = data.password;\r\n\r\n      console.log(\"Login page: \" + this.userName);\r\n      console.log(\"Login page: \" + this.password);\r\n\r\n      this.authService.login(this.userName, this.password)\r\n         .subscribe( data =&gt; { \r\n            console.log(\"Is Login Success: \" + data); \r\n      \r\n           if(data) this.router.navigate(['/expenses']); \r\n      });\r\n   }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Used reactive forms.</p></li>\r\n<li><p>Imported AuthService and Router and configured it in constructor.</p></li>\r\n<li><p>Created an instance of FormGroup and included two instance of FormControl, one for user name and another for password.</p></li>\r\n<li><p>Created a onClickSubmit to validate the user using authService and if successful, navigate to expense list.</p></li>\r\n</ul>\r\n<p>Open <b>LoginComponent</b> template and include below template code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container box\" style=\"margin-top: 10px; padding-left: 0px; padding-right: 0px;\"&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-12\" style=\"text-align: center;\"&gt;\r\n                                    &lt;form [formGroup]=\"formData\" (ngSubmit)=\"onClickSubmit(formData.value)\" \r\n                                          class=\"form-signin\"&gt;\r\n                                    &lt;h2 class=\"form-signin-heading\"&gt;Please sign in&lt;/h2&gt;\r\n                                    &lt;label for=\"inputEmail\" class=\"sr-only\"&gt;Email address&lt;/label&gt;\r\n                                    &lt;input type=\"text\" id=\"username\" class=\"form-control\" \r\n                                          formControlName=\"userName\" placeholder=\"Username\" required autofocus&gt;\r\n                                    &lt;label for=\"inputPassword\" class=\"sr-only\"&gt;Password&lt;/label&gt;\r\n                                    &lt;input type=\"password\" id=\"inputPassword\" class=\"form-control\" \r\n                                          formControlName=\"password\" placeholder=\"Password\" required&gt;\r\n                                    &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt;\r\n                                    &lt;/form&gt;\r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Created a reactive form and designed a login form.</p>\r\n<p>Attached the <b>onClickSubmit</b> method to the form submit action.</p>\r\n<p>Open <b>LoginComponent</b> style and include below CSS Code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n.form-signin {\r\n   max-width: 330px;\r\n\r\n   padding: 15px;\r\n   margin: 0 auto;\r\n}\r\n\r\ninput {\r\n   margin-bottom: 20px;\r\n}\r\n</pre>\r\n<p>Here, some styles are added to design the login form.</p>\r\n<p>Create a logout component using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component logout\r\nCREATE src/app/logout/logout.component.html (21 bytes)\r\nCREATE src/app/logout/logout.component.spec.ts (628 bytes)\r\nCREATE src/app/logout/logout.component.ts (269 bytes)\r\nCREATE src/app/logout/logout.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1368 bytes)\r\n</pre>\r\n<p>Open <b>LogoutComponent</b> and include below code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n   selector: 'app-logout',\r\n   templateUrl: './logout.component.html',\r\n   styleUrls: ['./logout.component.css']\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n\r\n   constructor(private authService : AuthService, private router: Router) { }\r\n\r\n   ngOnInit() {\r\n      this.authService.logout();\r\n      this.router.navigate(['/']);\r\n   }\r\n\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Used logout method of AuthService.</li>\r\n<li>Once the user is logged out, the page will redirect to home page (/).</li>\r\n</ul>\r\n<p>Create a guard using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate guard expense\r\nCREATE src/app/expense.guard.spec.ts (364 bytes)\r\nCREATE src/app/expense.guard.ts (459 bytes)\r\n</pre>\r\n<p>Open ExpenseGuard and include below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseGuard implements CanActivate {\r\n\r\n   constructor(private authService: AuthService, private router: Router) {}\r\n\r\n   canActivate(\r\n   next: ActivatedRouteSnapshot,\r\n   state: RouterStateSnapshot): boolean | UrlTree {\r\n      let url: string = state.url;\r\n\r\n          return this.checkLogin(url);\r\n      }\r\n\r\n      checkLogin(url: string): true | UrlTree {\r\n         console.log(\"Url: \" + url)\r\n         let val: string = localStorage.getItem('isUserLoggedIn');\r\n\r\n         if(val != null && val == \"true\"){\r\n            if(url == \"/login\")\r\n               this.router.parseUrl('/expenses');\r\n            else \r\n               return true;\r\n         } else {\r\n            return this.router.parseUrl('/login');\r\n         }\r\n      }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>checkLogin will check whether the localStorage has the user information and if it is available, then it returns true.</li>\r\n<li>If the user is logged in and goes to login page, it will redirect the user to expenses page</li>\r\n<li>If the user is not logged in, then the user will be redirected to login page.</li>\r\n</ul>\r\n<p>Open <b>AppRoutingModule (src/app/app-routing.module.ts)</b> and update below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ExpenseEntryComponent } from './expense-entry/expense-entry.component';\r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\n\r\nimport { ExpenseGuard } from './expense.guard';\r\n\r\nconst routes: Routes = [\r\n   { path: 'login', component: LoginComponent },\r\n   { path: 'logout', component: LogoutComponent },\r\n   { path: 'expenses', component: ExpenseEntryListComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Imported LoginComponent and LogoutComponent.</li>\r\n<li>Imported ExpenseGuard.</li>\r\n<li>Created two new routes, login and logout to access LoginComponent and LogoutComponent respectively.</li>\r\n<li>Add new option canActivate for ExpenseEntryComponent and ExpenseEntryListComponent.</li>\r\n</ul>\r\n<p>Open <b>AppComponent </b>template and add two login and logout link.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt;\r\n   &lt;ul class=\"navbar-nav ml-auto\"&gt;\r\n      &lt;li class=\"nav-item active\"&gt;\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n            &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt;\r\n\r\n         &lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n         &lt;a class=\"nav-link\" routerLink=\"/expenses\"&gt;Report&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n                  &lt;div *ngIf=\"isUserLoggedIn; else isLogOut\"&gt;\r\n                        &lt;a class=\"nav-link\" routerLink=\"/logout\"&gt;Logout&lt;/a&gt;\r\n                  &lt;/div&gt;\r\n\r\n                  &lt;ng-template #isLogOut&gt;\r\n                              &lt;a class=\"nav-link\" routerLink=\"/login\"&gt;Login&lt;/a&gt;\r\n                  &lt;/ng-template&gt;\r\n      &lt;/li&gt;\r\n   &lt;/ul&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Open <b>AppComponent</b> and update below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component } from '@angular/core';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n   title = 'Expense Manager';\r\n   isUserLoggedIn = false;\r\n\r\n   constructor(private authService: AuthService) {}\r\n\r\n   ngOnInit() {\r\n      let storeData = localStorage.getItem(\"isUserLoggedIn\");\r\n      console.log(\"StoreData: \" + storeData);\r\n\r\n      if( storeData != null && storeData == \"true\")\r\n         this.isUserLoggedIn = true;\r\n      else\r\n\r\n\r\n         this.isUserLoggedIn = false;\r\n   }\r\n}\r\n</pre>\r\n<p>Here, we have added the logic to identify the user status so that we can show login / logout functionality.</p>\r\n<p>Open <b>AppModule (src/app/app.module.ts)</b> and configure <b>ReactiveFormsModule</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { ReactiveFormsModule } from '@angular/forms'; \r\nimports: [ \r\n   ReactiveFormsModule \r\n]\r\n</pre>\r\n<p>Now, run the application and the application opens the login page.</p>\r\n<p>Enter admin and admin as username and password and then, click submit. The application process the login and redirects the user to expense list page as shown below &minus;</p>\r\n<p>Finally, your can click logout and exit the application.</p>\r\n\t\t</div>\r\n","backward_compatibility":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Backward Compatibility</h1>\n<hr/>\n<p>Angular framework provides maximum compatibility with previous versions. If Angular Team deprecate a feature in a release, it will wait for 3 more release to completely remove the feature. Angular Team release a major version for every six months. Every version will have active maintenance period of six months and then Long Term Support (LTS) period for another one year. Angular does not introduce breaking changes during these 18 months. If Angular version deprecate a feature in version 5, then it will probably remove it in version 8 or in next releases.</p>\n<p>Angular maintains documentation and guides of all version. For example, Angular documentation for version 7 can be checked @ https://v7.angular.io. Angular also provides a detailed upgrade path through https://update.angular.io/ site.</p>\n<p>To update Angular application written from previous version, use below command inside the project directory:</p>\n<pre class=\"result notranslate\">\nng update @angular/cli@8 @angular/core@8\n</pre>\n<p>Let us see some of the important changes introduced in Angular 8.</p>\n<ul class=\"list\">\n<li><p><b>HttpModule</b> module and its associated <b>Http</b> service is removed. Use <b>HttpClient</b> service from <b>HttpClientModule</b> module.</p></li>\n<li><p><b>/deep/, >>></b> and <b>:ng-deep</b> component selectors are removed.</p></li>\n<li><p>Angular default version of TypeScript is 3.4.</p></li>\n<li><p>Node version supported by Angular is v10 and later.</p></li>\n<li><p><b>@ViewChild()</b> and <b>ContentChild()</b> decorator behaviour is changed from dynaic to static.</p></li>\n</ul>\n<p>Lazy loading string syntax in router module is removed and only function based is supported.</p>\n<pre class=\"result notranslate\">\nloadChildren: './lazy/lazy.module#LazyModule' \nloadChildren: () => import('./lazy/lazy.module' \n</pre>\n\t\t</div>\n\t","building_with_bazel":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Building with Bazel</h1>\n<hr/>\n<p><b>Bazel</b> is an advanced build and test tool. It supports lot of features suitable for large projects.</p>\n<p>Some of the features of <b>Bazel</b> are as follows:</p>\n<ul class=\"list\">\n<li>Support multiple languages.</li>\n<li>Support multiple platforms.</li>\n<li>Support multiple repository.</li>\n<li>Support high-level build language.</li>\n<li>Fast and reliable.</li>\n</ul>\n<p>Angular supports building the application using bazel. Let us see how to use bazel to compile Angular application. </p>\n<p>First, install <b>@angular/bazel</b> package. </p>\n<pre class=\"result notranslate\">\nnpm install -g @angular/bazel \n</pre>\n<p>For existing application, Add <b>@angular/bazel</b> as mentioned below:</p>\n<pre class=\"result notranslate\">\nng add @angular/bazel\n</pre>\n<p>For new application, use below mentioned command:</p>\n<pre class=\"result notranslate\">\nng new --collection=@angular/bazel \n</pre>\n<p>To build an application using bazel, use below command:</p>\n<pre class=\"result notranslate\">\nng build --leaveBazelFilesOnDisk\n</pre>\n<p>Here,</p>\n<p><b>leaveBazelFilesOnDisk</b> option will leave the bazel files created during build process, which we can use to build the application directly using bazel.</p>\n<p>To build application using bazel directly, install <b>@bazel/bazelisk</b> and then, use <b>bazelisk</b> build command.</p>\n<pre class=\"result notranslate\">\nnpm install -g @bazel/bazelisk \nbazelisk build\n</pre>\n\t\t</div>","cli_commands":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - CLI Commands</h1>\n<hr/>\n<p>Angular CLI helps developers to create projects easily and quickly. As we know already, Angular CLI tool is used for development and built on top of Node.js, installed from NPM.This chapter explains about Angular 8 CLI commands in detail.</p>\n<h2>Verify CLI</h2>\n<p>Before moving to Angular CLI commands, we have to ensure that Angular CLI is installed on your machine. If it is installed, you can verify it by using the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng version\n</pre>\n<p>You could see the below response &minus;</p>\n<p>If CLI is not installed, then use the below command to install it.</p>\n<pre class=\"prettyprint notranslate\">\nnpm install -g @angular/cli@^8.0.0\n</pre>\n<p>Let’s understand the commands one by one in brief.</p>\n<h3>New command</h3>\n<p>To create an application in Angular, use the below syntax &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng new &lt;project-name&gt;\n</pre>\n<h3>Example</h3>\n<p>If you want to create CustomerApp then, use the below code &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng new CustomerApp\n</pre>\n<h3>Generate Command</h3>\n<p>It is used to generate or modify files based on a schematic. Type the below command inside your angular project &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng generate\n</pre>\n<p>Or, you can simply type generate as g. You can also use the below syntax &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g\n</pre>\n<p>It will list out the available schematics &minus;</p>\n<p>Let’s understand some of the repeatedly used ng generate schematics in next section.</p>\n<h3>Create a component</h3>\n<p>Components are building block of Angular. To create a component in angular use the below syntax &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g c &lt;component-name&gt;\n</pre>\n<p>For example, if user wants to create a <b>Details</b> component then use the below code &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g c Details\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/details/details.component.scss (0 bytes)\nCREATE src/app/details/details.component.html (22 bytes)\nCREATE src/app/details/details.component.spec.ts (635 bytes)\nCREATE src/app/details/details.component.ts (274 bytes)\nUPDATE src/app/app.module.ts (1201 bytes)\n</pre>\n<h3>Create a class</h3>\n<p>It is used to create a new class in Angular. It is defined below&minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g class &lt;class-name&gt;\n</pre>\n<p>If you want to create a customer class, then type the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g class Customer\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/customer.spec.ts (162 bytes)\nCREATE src/app/customer.ts (26 bytes)\n</pre>\n<h3>Create a pipe</h3>\n<p>Pipes are used for filtering the data. It is used to create a custom pipe in Angular. It is defined below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g pipe &lt;pipe-name&gt;\n</pre>\n<p>If you want to create a custom digit counts in a pipe, then type the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g pipe DigitCount\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/digit-count.pipe.spec.ts (204 bytes)\nCREATE src/app/digit-count.pipe.ts (213 bytes)\nUPDATE src/app/app.module.ts (1274 bytes)\n</pre>\n<h3>Create a directive</h3>\n<p>It is used to create a new directive in Angular. It is defined below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g directive &lt;directive-name&gt;\n</pre>\n<p>If you want to create a UnderlineText directive, then type the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g directive UnderlineText\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/underline-text.directive.spec.ts (253 bytes)\nCREATE src/app/underline-text.directive.ts (155 bytes)\nUPDATE src/app/app.module.ts (1371 bytes)\n</pre>\n<h3>Create a module</h3>\n<p>It is used to create a new module in Angular. It is defined below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g module &lt;module-name&gt;\n</pre>\n<p>If you want to create a user information module, then type the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g module Userinfo\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/userinfo/userinfo.module.ts (194 bytes)\n</pre>\n<h3>Create an interface</h3>\n<p>It is used to create an interface in Angular. It is given below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g interface &lt;interface-name&gt;\n</pre>\n<p>If you want to create a customer class, then type the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g interface CustomerData\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/customer-data.ts (34 bytes)\n</pre>\n<h3>Create a web worker</h3>\n<p>It is used to create a new web worker in Angular. It is stated below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g webWorker &lt;webWorker-name&gt;\n</pre>\n<p>If you want to create a customer class, then type the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g webWorker CustomerWebWorker\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE tsconfig.worker.json (212 bytes)\nCREATE src/app/customer-web-worker.worker.ts (157 bytes)\nUPDATE tsconfig.app.json (296 bytes)\nUPDATE angular.json (3863 bytes)\n</pre>\n<h3>Create a service</h3>\n<p>It is used to create a service in Angular. It is given below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g service &lt;service-name&gt;\n</pre>\n<p>If you want to create a customer class, then type the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g service CustomerService\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/customer-service.service.spec.ts (379 bytes)\nCREATE src/app/customer-service.service.ts (144 bytes)\n</pre>\n<h3>Create an enum</h3>\n<p>It is used to create an enum in Angular. It is given below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g enum &lt;enum-name&gt;\n</pre>\n<p>If you want to create a customer class, then type the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng g enum CustomerRecords\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/customer-records.enum.ts (32 bytes)\n</pre>\n<h3>Add command</h3>\n<p>It is used to add support for an external library to your project. It is specified by the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng add [name]\n</pre>\n<h3>Build command</h3>\n<p>It is used to compile or build your angular app. It is defined below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng build\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\nGenerating ES5 bundles for differential loading...\nES5 bundle generation complete.\n</pre>\n<h3>Config command</h3>\n<p>It is used to retrieve or set Angular configuration values in the angular.json file for the workspace. It is defined below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng config\n</pre>\n<p>After using this command, you could see the below response &minus;</p>\n<pre class=\"prettyprint notranslate\">\n{\n   \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n   \"version\": 1,\n   \"newProjectRoot\": \"projects\",\n   \"projects\": {\n      \"MyApp\": {\n         \"projectType\": \"application\",\n         \"schematics\": {\n            \"@schematics/angular:component\": {\n               \"style\": \"scss\"\n            }\n         },\n .............................\n .............................\n</pre>\n<h3>Doc command</h3>\n<p>It is used to open the official Angular documentation (angular.io) in a browser, and searches for a given keyword.</p>\n<pre class=\"prettyprint notranslate\">\nng doc &lt;keyword&gt;\n</pre>\n<p>For example, if you search with component as ng g component then, it will open the documentation.</p>\n<h3>e2e command</h3>\n<p>It is used to build and serves an Angular app, then runs end-to-end tests using Protractor. It is stated below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng e2e &lt;project&gt; [options]\n</pre>\n<h3>Help command</h3>\n<p>It lists out available commands and their short descriptions. It is stated below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng help\n</pre>\n<h3>Serve command</h3>\n<p>It is used to build and serves your app, rebuilding on file changes. It is given below: &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng serve\n</pre>\n<h3>Test command</h3>\n<p>Runs unit tests in a project. It is mentioned below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng test\n</pre>\n<h3>Update command</h3>\n<p>Updates your application and its dependencies. It is given below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng update\n</pre>\n<h3>Version command</h3>\n<p>Shows Angular CLI version. It is stated below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng version\n</pre>\n\t\t</div>\n\n","creating_first_application":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Creating First Application</h1>\n<hr/>\n<p>Let us create a simple angular application and analyse the structure of the basic angular application.</p>\n<p>Let us check whether the Angular Framework is installed in our system and the version of the installed Angular version using below command &minus;</p>\n<pre class=\"result notranslate\">\nng --version\n</pre>\n<p>Here,</p>\n<p><b>ng</b> is the CLI application used to create, manage and run Angular Application. It written in JavaScript and runs in NodeJS environment.</p>\n<p>The result will show the details of the Angular version as specified below &minus;</p>\n<pre class=\"result notranslate\">\nAngular CLI: 8.3.26 \nNode: 14.2.0 \nOS: win32 x64 \nAngular: ... \nPackage                    Version \n------------------------------------------------------\n@angular-devkit/architect  0.803.26 \n@angular-devkit/core       8.3.26 \n@angular-devkit/schematics 8.3.26 \n@schematics/angular        8.3.26 \n@schematics/update         0.803.26 \nrxjs                       6.4.0\n</pre>\n<p>So, Angular is installed in our system and the version is <b>8.3.26</b>.</p>\n<p>Let us create an Angular application to check our day to day expenses. Let us give <b>ExpenseManager</b>as our choice for our new application. Use below command to create the new application.</p>\n<pre class=\"result notranslate\">\ncd /path/to/workspace \nng new expense-manager\n</pre>\n<p>Here,</p>\n<p><b>new</b> is one of the command of the <b>ng</b> CLI application. It will be used to create new application. It will ask some basic question in order to create new application. It is enough to let the application choose the default choices. Regarding routing question as mentioned below, specify <b>No</b>. We will see how to create routing later in the <b>Routing</b> chapter.</p>\n<pre class=\"result notranslate\">\nWould you like to add Angular routing? No\n</pre>\n<p>Once the basic questions are answered, the <b>ng </b>CLI application create a new Angular application under <b>expense-manager</b> folder.</p>\n<p>Let us move into the our newly created application folder.</p>\n<pre class=\"result notranslate\">\ncd expense-manager\n</pre>\n<p>Let us check the partial structure of the application. The structure of the application is as follows &minus;</p>\n<pre class=\"result notranslate\">\n| favicon.ico \n| index.html \n| main.ts \n| polyfills.ts \n| styles.css \n| \n+---app \n|  app.component.css \n|  app.component.html \n|  app.component.spec.ts \n|  app.component.ts \n|  app.module.ts \n| \n+---assets \n|  .gitkeep \n| \n+---environments \n   environment.prod.ts \n   environment.ts\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><p>We have shown, only the most important file and folder of the application.</p></li>\n<li><p><b>favicon.ico</b> and <b>assets</b> are application’s icon and application’s root asset folder.</p></li>\n<li><p><b>polyfills.ts</b> contains standard code useful for browser compatibility.</p></li>\n<li><p><b>environments</b> folder will have the application’s setting. It includes production and development setup.</p></li>\n<li><p><b>main.ts</b> file contains the startup code.</p></li>\n<li><p><b>index.html</b> is the application base HTML code.</p></li>\n<li><p><b>styles.css</b> is the base CSS code.</p></li>\n<li><p><b>app folder</b> contains the Angular application code, which will be learn elaborately in the upcoming chapters.</p></li>\n</ul>\n<p>Let us start the application using below command &minus;</p>\n<pre class=\"result notranslate\">\nng serve\n10% building 3/3 modules 0 activei wds: Project is running at http://localhost:4200/webpack-dev-server/\ni wds: webpack output is served from /\n\ni wds: 404s will fallback to //index.html \nchunk {main} main.js, main.js.map (main) 49.2 kB [initial] [rendered] \nchunk {polyfills} polyfills.js, polyfills.js.map (polyfills) 269 kB [initial] [rendered] \nchunk {runtime} runtime.js, runtime.js.map (runtime) 6.15 kB [entry] [rendered] \nchunk {styles} styles.js, styles.js.map (styles) 9.75 kB [initial] [rendered] \nchunk {vendor} vendor.js, vendor.js.map (vendor) 3.81 MB [initial] [rendered] \nDate: 2020-05-26T05:02:14.134Z - Hash: 0dec2ff62a4247d58fe2 - Time: 12330ms \n** Angular Live Development Server is listening on localhost:4200, open your \nbrowser on http://localhost:4200/ ** \ni wdm: Compiled successfully.\n</pre>\n<p>Here, <b>serve</b> is the sub command used to compile and run the Angular application using a local development web server. <b>ng server</b> will start a development web server and serves the application under port, 4200.</p>\n<p>Let us fire up a browser and opens http://localhost:4200. The browser will show the application as shown below &minus;</p>\n<p>Let us change the title of the application to better reflect our application. Open <b>src/app/app.component.ts</b> and change the code as specified below &minus;</p>\n<pre class=\"result notranslate\">\nexport class AppComponent { \n   title = 'Expense Manager'; \n}\n</pre>\n<p>Our final application will be rendered in the browser as shown below &minus;</p>\n\n<p>We will change the application and learn how to code an Angular application in the upcoming chapters.</p>\n</div>\n\n","data_binding":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Data Binding</h1>\r\n<hr/>\r\n\r\n<div id=\"google-top-ads\">\r\n<div class=\"top-ad-heading\">Advertisements</div>\r\n<div style=\"text-align:center\" class=\"google-top-ads\">\r\n<div id=\"adp_top_ads\" style=\"text-align:center!important;min-height:90px!important\"></div>\r\n<script>\r\n     var adPos = document.getElementById('adp_top_ads');\r\n     var ad_id_720 = \"8014640d-fd34-4b2e-9b1b-cc67234a2325\";\r\n     var ad_id_650 = \"2d1bb2c4-eb72-471d-9c80-1bf5514728c1\";\r\n     var ad_id_300 = \"75e8929b-e21c-41ad-bca5-5cb2601dc07b\";\r\n     var width = window.innerWidth;\r\n     var ad_id = ad_id_720;\r\n     if( width <= 768 ){\r\n        ad_id =  ad_id_300;\r\n     }else if( width <= 1435 ){\r\n        ad_id =  ad_id_650;\r\n     }\r\n     adPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\r\n     var adpushup = adpushup || {};\r\n     adpushup.que = adpushup.que || [];\r\n     adpushup.que.push(function() {\r\n     adpushup.triggerAd(ad_id);\r\n     });\r\n</script>\r\n</div>\r\n</div>\r\n<br>\r\n<div class=\"mui-container-fluid button-borders\">\r\n<div class=\"pre-btn\">\r\n<a href=\"angular8_angular_components_and_templates.html\"><i class=\"fal fa-chevron-circle-left\"></i> Previous Page</a>\r\n</div>\r\n<div class=\"nxt-btn\">\r\n<a href=\"angular8_directives.html\">Next Page <i class=\"fal fa-chevron-circle-right\"></i>&nbsp;</a>\r\n</div>\r\n</div>\r\n<div id=\"load\">\r\n\t<div class=\"\">\r\n\t\t<div id=\"ebooks_grid\">\r\n\t\t\t\t\t\t<div class=\"videos\">\r\n\t\t\t                <br/>\r\n            \t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\r\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"1906\" />\r\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\r\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\r\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" class=\"\" data-title=\"angular_2_online_training\" > \r\n            <span class=\"play-button-trigger\"></span>\r\n    </a>\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div class=\"course-card-body\">\r\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" title=\"Angular 2 Online Training\" class=\"\" data-title=\"angular_2_online_training\" >Angular 2 Online Training</a></h4>\r\n\r\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\r\n    28 Lectures \r\n    <span><i class=\"fa fa-clock\"></i> 2.5 hours </span>\r\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/Anadi-Sharma\" >Anadi Sharma</a></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"v-courses-price\">\r\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \r\n   <a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" target=\"_blank\">\r\n   <div class=\"btn-success rounded\">More Detail</div>\r\n   </a>\r\n</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\r\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"2872\" />\r\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\r\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\r\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" class=\"\" data-title=\"angular_the_complete_course\" > \r\n            <span class=\"play-button-trigger\"></span>\r\n    </a>\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div class=\"course-card-body\">\r\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" title=\"Angular - The Complete Course\" class=\"\" data-title=\"angular_the_complete_course\" >Angular - The Complete Course</a></h4>\r\n\r\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\r\n    13 Lectures \r\n    <span><i class=\"fa fa-clock\"></i> 48 mins</span>\r\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/ganesh_kavhar\" >Ganesh Kavhar</a></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"v-courses-price\">\r\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \r\n   <a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" target=\"_blank\">\r\n   <div class=\"btn-success rounded\">More Detail</div>\r\n   </a>\r\n</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\r\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"2884\" />\r\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\r\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\r\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" class=\"\" data-title=\"angular_interview_q_and_a_series\" > \r\n            <span class=\"play-button-trigger\"></span>\r\n    </a>\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div class=\"course-card-body\">\r\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" title=\"Angular Interview Q & A series\" class=\"\" data-title=\"angular_interview_q_and_a_series\" >Angular Interview Q & A series</a></h4>\r\n\r\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\r\n    5 Lectures \r\n    <span><i class=\"fa fa-clock\"></i> 1.5 hours </span>\r\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/shivprasad_koirala\" >SHIVPRASAD KOIRALA</a></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"v-courses-price\">\r\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \r\n   <a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" target=\"_blank\">\r\n   <div class=\"btn-success rounded\">More Detail</div>\r\n   </a>\r\n</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t<div class=\"clear\"></div>\r\n\t</div>\r\n</div>\r\n<div class=\"clear\"></div>\r\n<div class=\"clear\"></div>\r\n<p>Data binding deals with how to bind your data from component to HTML DOM elements (Templates). We can easily interact with application without worrying about how to insert your data. We can make connections in two different ways one way and two-way binding.</p>\r\n<p>Before moving to this topic, let’s create a component in Angular 8.</p>\r\n<p>Open command prompt and create new Angular application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/workspace \r\nng new databind-app \r\ncd databind-app\r\n</pre>\r\n<p>Create a <b>test</b> component using Angular CLI as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component test\r\n</pre>\r\n<p>The above create a new component and the output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/test/test.component.scss (0 bytes) CREATE src/app/test/test.component.html (19 bytes) CREATE src/app/test/test.component.spec.ts (614 bytes) \r\nCREATE src/app/test/test.component.ts (262 bytes) UPDATE src/app/app.module.ts (545 bytes)\r\n</pre>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<h2>One-way data binding</h2>\r\n<p><b>One-way data binding</b> is a one-way interaction between component and its template. If you perform any changes in your component, then it will reflect the HTML elements. It supports the following types &minus;</p>\r\n<h3>String interpolation</h3>\r\n<p>In general, <b>String interpolation</b> is the process of formatting or manipulating strings. In Angular, <b>Interpolation</b> is used to display data from component to view (DOM). It is denoted by the expression of {{ }} and also known as mustache syntax.</p>\r\n<p>Let’s create a simple string property in component and bind the data to view.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent implements OnInit { \r\n   appName = \"My first app in Angular 8\"; \r\n}\r\n</pre>\r\n<p>Move to test.component.html file and add the below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h1&gt;{{appName}}&lt;/h1&gt;\r\n</pre>\r\n<p>Add the test component in your <b>app.component.html</b> file by replacing the existing content as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;app-test&gt;&lt;/app-test&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>You could see the following output on your screen &minus;</p>\r\n<h2>Event binding</h2>\r\n<p>Events are actions like mouse click, double click, hover or any keyboard and mouse actions. If a user interacts with an application and performs some actions, then event will be raised. It is denoted by either parenthesis <b>()</b> or <b>on-</b>. We have different ways to bind an event to DOM element. Let’s understand one by one in brief.</p>\r\n<h3>Component to view binding</h3>\r\n<p>Let’s understand how simple button click even handling works.</p>\r\n<p>Add the following code in <b>test.component.ts</b>file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class TestComponent { \r\n   showData($event: any){ \r\n      console.log(\"button is clicked!\"); if($event) { \r\n         console.log($event.target); \r\n         console.log($event.target.value); \r\n      } \r\n   } \r\n}\r\n</pre>\r\n<p>$event\\ast\\:refersthefiredevent\\cdot\\:Inthisscenario\\:,\\ast\\:click \\ast\\:istheevent\\cdot\\ast$event has all the information about event and the target element. Here, the target is button. $event.target property will have the target information.</p>\r\n<p>We have two approaches to call the component method to view <b>(test.component.html)</b>. First one is defined below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h2&gt;Event Binding&lt;/h2&gt; \r\n&lt;button (click)=\"showData($event)\"&gt;Click here&lt;/button&gt;\r\n</pre>\r\n<p>Alternatively, you can use <b>prefix - on</b> using canonical form as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;button on-click = \"showData()\"&gt;Click here&lt;/button&gt;\r\n</pre>\r\n<p>Here, we have not used <b>$event</b> as it is optional.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<p>Here, when the user clicks on the button, event binding understands to button click action and call component showData() method so we can conclude it is one-way binding.</p>\r\n<h2>Property binding</h2>\r\n<p><b>Property binding</b> is used to bind the data from property of a component to DOM elements. It is denoted by <b>[]</b>.</p>\r\n<p>Let’s understand with a simple example.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent { \r\n   userName:string = \"Peter\"; \r\n}\r\n</pre>\r\n<p>Add the below changes in view test.component.html,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;input type=\"text\" [value]=\"userName\"&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>userName</b> property is bind to an attribute of a DOM element <b>&lt;input&gt;</b> tag.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<h2>Attribute binding</h2>\r\n<p><b>Attribute binding</b> is used to bind the data from component to HTML attributes. The syntax is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [attr.ATTR]=\"Component data\"&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;td [attr.colspan]=\"columnSpan\"&gt; ... &lt;/td&gt;\r\n</pre>\r\n<p>Let’s understand with a simple example.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent { \r\n   userName:string = \"Peter\"; \r\n}\r\n</pre>\r\n<p>Add the below changes in view <b>test.component.html,</b></p>\r\n<pre class=\"result notranslate\">\r\n&lt;input type=\"text\" [value]=\"userName\"&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>userName property is bind to an attribute of a DOM element &lt;input&gt; tag.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<h2>Class binding</h2>\r\n<p><b>Class binding</b> is used to bind the data from component to HTML class property. The syntax is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [class]=\"component variable holding class name\"&gt;\r\n</pre>\r\n<p><b>Class Binding</b> provides additional functionality. If the component data is boolean, then the class will bind only when it is true. Multiple class can be provided by string (“foo bar”) as well as Array of string. Many more options are available.</p>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [class]=\"myClasses\"&gt;\r\n</pre>\r\n<p>Let’s understand with a simple example.</p>\r\n<p>Add the below code in test.component.ts file,</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent { \r\n   myCSSClass = \"red\"; \r\n   applyCSSClass = false; \r\n}\r\n</pre>\r\n<p>Add the below changes in view <b>test.component.html</b>.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [class]=\"myCSSClass\"&gt;This paragraph class comes from *myClass* property &lt;/p&gt; \r\n&lt;p [class.blue]=\"applyCSSClass\"&gt;This paragraph class does not apply&lt;/p&gt;\r\n</pre>\r\n<p>Add the below content in test.component.css.</p>\r\n<pre class=\"result notranslate\">\r\n.red { \r\n   color: red; \r\n} \r\n.blue { \r\n   color: blue; \r\n}\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>The final output will be as shown below &minus;</p>\r\n<h2>Style binding</h2>\r\n<p><b>Style binding</b> is used to bind the data from component into HTML style property. The syntax is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [style.STYLE]=\"component data\"&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [style.color]=\"myParaColor\"&gt; ... &lt;/p&gt;\r\n</pre>\r\n<p>Let’s understand with a simple example.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"result notranslate\">\r\nmyColor = 'brown';\r\n</pre>\r\n<p>Add the below changes in view <b>test.component.html</b>.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [style.color]=\"myColor\"&gt;Text color is styled using style binding&lt;/p&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>The final output will be as shown below &minus;</p>\r\n<h2>Two-way data binding</h2>\r\n<p><b>Two-way data binding</b> is a two-way interaction, data flows in both ways (from component to views and views to component). Simple example is <b>ngModel</b>. If you do any changes in your property (or model) then, it reflects in your view and vice versa. It is the combination of property and event binding.</p>\r\n<h3>NgModel</h3>\r\n<p><b>NgModel</b> is a standalone directive. <b>ngModel</b> directive binds form control to property and property to form control. The syntax of <b>ngModel</b> is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTML [(ngModel)]=\"model.name\" /&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;input type=\"text\" [(ngModel)]=\"model.name\" /&gt;\r\n</pre>\r\n<p>Let’s try to use <b>ngModel</b> in our test application.</p>\r\n<p>Configure <b>FormsModule</b> in <b>AppModule</b> (src/app/app.module.ts)</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { FormsModule } from '@angular/forms'; @NgModule({ \r\n   imports: [ \r\n      BrowserModule, \r\n      FormsModule\r\n   ] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p><b>FormModule</b> do the necessary setup to enable two-way data binding.</p>\r\n<p>Update <b>TestComponent</b> view <b>(test.component.html)</b> as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;input type=\"text\" [(ngModel)]=\"userName\" /&gt;\r\n&lt;p&gt;Two way binding! Hello {{ userName }}!&lt;/p&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Property is bind to form control <b>ngModel</b>directive and if you enter any text in the textbox, it will bind to the property. After running your application, you could see the below changes &minus;</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<p>Now, try to change the input value to <b>Jack</b>. As you type, the text below the input gets changed and the final output will be as shown below &minus;</p>\r\n<p>We will learn more about form controls in the upcoming chapters.</p>\r\n<h3>Working example</h3>\r\n<p>Let us implement all the concept learned in this chapter in our <b>ExpenseManager</b> application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Create ExpenseEntry interface (src/app/expense-entry.ts) and add id, amount, category, Location, spendOn and createdOn.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport interface ExpenseEntry { \r\n   id: number; \r\n   item: string; \r\n   amount: number; \r\n   category: string; \r\n   location: string; \r\n   spendOn: Date; \r\n   createdOn: Date; \r\n}\r\n</pre>\r\n<p>Import <b>ExpenseEntry</b> into <b>ExpenseEntryComponent</b>.</p>\r\n<pre class=\"result notranslate\">\r\nimport { ExpenseEntry } from '../expense-entry';\r\n</pre>\r\n<p>Create a <b>ExpenseEntry</b> object, <b>expenseEntry</b> as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class ExpenseEntryComponent implements OnInit { \r\n   title: string; \r\n   expenseEntry: ExpenseEntry; \r\n   constructor() { } \r\n   ngOnInit() { \r\n      this.title = \"Expense Entry\"; \r\n      this.expenseEntry = { \r\n         id: 1, \r\n         item: \"Pizza\", \r\n         amount: 21, \r\n         category: \"Food\", \r\n         location: \"Zomato\", \r\n         spendOn: new Date(2020, 6, 1, 10, 10, 10), createdOn: new Date(2020, 6, 1, 10, 10, 10), \r\n      }; \r\n   } \r\n}\r\n</pre>\r\n<p>Update the component template using <b>expenseEntry</b> object, <b>src/app/expense-entry/expense-entry.component.html</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt; \r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt; \r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; \r\n                  {{ title }} \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n                  &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;  \r\n                  &lt;strong&gt;&lt;em&gt;Item:&lt;/em&gt;&lt;/strong&gt; \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n                  {{ expenseEntry.item }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n                  &lt;strong&gt;&lt;em&gt;Amount:&lt;/em&gt;&lt;/strong&gt; \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.amount }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n                  &lt;strong&gt;&lt;em&gt;Category:&lt;/em&gt;&lt;/strong&gt; \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n                  {{ expenseEntry.category }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n                  &lt;strong&gt;&lt;em&gt;Location:&lt;/em&gt;&lt;/strong&gt; \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n                  {{ expenseEntry.location }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Spend On:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n                  {{ expenseEntry.spendOn }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n</div>\r\n","directives":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Directives</h1>\r\n<hr/>\r\n\r\n<p>Angular 8 directives are DOM elements to interact with your application. Generally, directive is a <b>TypeScript</b> function. When this function executes <b>Angular</b> compiler checked it inside DOM element. Angular directives begin with <b>ng-</b> where <b>ng</b> stands for Angular and extends HTML tags with <b>@directive</b> decorator.</p>\r\n<p>Directives enables logic to be included in the Angular templates. Angular directives can be classified into three categories and they are as follows &minus;</p>\r\n<h3>Attribute directives</h3>\r\n<p>Used to add new attributes for the existing HTML elements to change its look and behaviour.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [attrDirective]='value' /&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [showToolTip]='Tips' /&gt;\r\n</pre>\r\n<p>Here, <b>showToolTip</b> refers an example directive, which when used in a HTML element will show tips while user hovers the HTML element.</p>\r\n<h3>Structural directives</h3>\r\n<p>Used to add or remove DOM elements in the current HTML document.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [structuralDirective]='value' /&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div *ngIf=\"isNeeded\"&gt; \r\n   Only render if the *isNeeded* value has true value. \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here, <b>ngIf</b> is a built-in directive used to add or remove the HTML element in the current HTML document. Angular provides many built-in directive and we will learn in later chapters.</p>\r\n<h3>Component based directives</h3>\r\n<p>Component can be used as directives. Every component has <b>Input</b> and <b>Output</b> option to pass between component and its parent HTML elements.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;component-selector-name [input-reference]=\"input-value\"&gt; ... &lt;/component-selector-name&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;list-item [items]=\"fruits\"&gt; ... &lt;/list-item&gt;\r\n</pre>\r\n<p>Here, <b>list-item</b> is a component and <b>items</b> is the input option. We will learn how to create component and advanced usages in the later chapters.</p>\r\n<p>Before moving to this topic, let’s create a sample application <b>(directive-app)</b> in Angular 8 to work out the learnings.</p>\r\n<p>Open command prompt and create new Angular application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/workspace \r\nng new directive-app \r\ncd directive-app\r\n</pre>\r\n<p>Create a <b>test</b> component using Angular CLI as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component test\r\n</pre>\r\n<p>The above create a new component and the output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/test/test.component.scss (0 bytes) CREATE src/app/test/test.component.html (19 bytes) CREATE src/app/test/test.component.spec.ts (614 bytes) \r\nCREATE src/app/test/test.component.ts (262 bytes) UPDATE src/app/app.module.ts (545 bytes)\r\n</pre>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<h2>DOM Overview</h2>\r\n<p>Let us have a look at DOM model in brief. DOM is used to define a standard for accessing documents. Generally, HTML DOM model is constructed as a tree of objects. It is a standard object model to access html elements.</p>\r\n<p>We can use DOM model in Angular 8 for the below reasons &minus;</p>\r\n<ul class=\"list\">\r\n<li>We can easily navigate document structures with DOM elements.</li>\r\n<li>We can easily add html elements.</li>\r\n<li>We can easily update elements and its contents.</li>\r\n</ul>\r\n<h2>Structural directives</h2>\r\n<p>Structural directives change the structure of <b>DOM</b> by adding or removing elements. It is denoted by * sign with three pre-defined directives <b>NgIf, NgFor</b> and <b>NgSwitch</b>. Let’s understand one by one in brief.</p>\r\n<h3>NgIf directive</h3>\r\n<p><b>NgIf</b> directive is used to display or hide data in your application based on the condition becomes true or false. We can add this to any tag in your template.</p>\r\n<p>Let us try <b>ngIf</b> directive in our <b>directive-app</b> application.</p>\r\n<p>Add the below tag in <b>test.component.html</b>.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p&gt;test works!&lt;/p&gt; \r\n&lt;div *ngIf=\"true\"&gt;Display data&lt;/div&gt;\r\n</pre>\r\n<p>Add the test component in your <b>app.component.html</b> file as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;app-test&gt;&lt;/app-test&gt;\r\n</pre>\r\n<p>Start your server (if not started already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<p>If you set the condition <b>ngIf=“false”</b> then, contents will be hidden.</p>\r\n<h3>ngIfElse directive</h3>\r\n<p><b>ngIfElse</b> is similar to <b>ngIf</b> except, it provides option to render content during failure scenario as well.</p>\r\n<p>Let’s understand how <b>ngIfElse</b> works by doing a sample.</p>\r\n<p>Add the following code in <b>test.component.ts </b>file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class TestComponent implements OnInit { \r\n   isLogIn : boolean = false;\r\n   isLogOut : boolean = true; \r\n}\r\n</pre>\r\n<p>Add the following code in <b>test.component.html</b> file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;p&gt;ngIfElse example!&lt;/p&gt; \r\n&lt;div *ngIf=\"isLogIn; else isLogOut\"&gt; \r\n   Hello you are logged in \r\n&lt;/div&gt;\r\n&lt;ng-template #isLogOut&gt; \r\n   You're logged out.. \r\n&lt;/ng-template&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<p>Here, <p>isLogOut</p> value is assigned as <b>true</b>, so it goes to <b>else</b> block and renders <b>ng-template</b>. We will learn <b>ng-template</b> later in this chapter.</p>\r\n<h3>ngFor directive</h3>\r\n<p>ngFor is used to repeat a portion of elements from the list of items.</p>\r\n<p>Let’s understand how ngFor works by doing a sample.</p>\r\n<p>Add the list in test.component.ts file as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nlist = [1,2,3,4,5];\r\n</pre>\r\n<p>Add <b>ngFor</b> directive in <b>test.component.html</b> as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h2&gt;ngFor directive&lt;/h2&gt; \r\n&lt;ul&gt; \r\n   &lt;li *ngFor=\"let l of list\"&gt;\r\n      {{l}} \r\n   &lt;/li&gt;\r\n&lt;/ul&gt;\r\n</pre>\r\n<p>Here, the let keyword creates a local variable and it can be referenced anywhere in your template. The let l creates a template local variable to get the list elements.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<h3>trackBy</h3>\r\n<p>Sometimes, <b>ngFor</b> performance is low with large lists. For example, when adding new item or remove any item in the list may trigger several DOM manipulations. To iterate over large objects collection, we use <b>trackBy</b>.</p>\r\n<p>It is used to track when elements are added or removed. It is performed by trackBy method. It has two arguments index and element. Index is used to identity each element uniquely. Simple example is defined below.</p>\r\n<p>Let’s understand how trackBy works along with <b>ngFor</b> by doing a sample.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class TestComponent { \r\n   studentArr: any[] = [ { \r\n      \"id\": 1, \r\n      \"name\": \"student1\" \r\n   }, \r\n   { \r\n      \"id\": 2,\r\n      \"name\": \"student2\" \r\n   }, \r\n   { \r\n      \"id\": 3, \"name\": \"student3\"\r\n   },\r\n   { \r\n      \"id\": 4, \r\n      \"name\": \"student4\" \r\n   } \r\n   ]; \r\n   trackByData(index:number, studentArr:any): number { \r\n      return studentArr.id; \r\n   }\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have created, <p>trackByData()</p> method to access each student element in a unique way based on the id.</p>\r\n<p>Add the below code in <b>test.component.html</b> file to define trackBy method inside ngFor.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;ul&gt; \r\n   &lt;li *ngFor=\"let std of studentArr; trackBy: trackByData\"&gt;\r\n      {{std.name}} \r\n   &lt;/li&gt;\r\n&lt;/ul&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<p>Here, the application will print the student names. Now, the application is tracking student objects using the student id instead of object references. So, DOM elements are not affected.</p>\r\n<h3>NgSwitch directive</h3>\r\n<p><b>NgSWitch</b> is used to check multiple conditions and keep the DOM structure as simple and easy to understand.</p>\r\n<p>Let us try <b>ngSwitch</b> directive in our <b>directive-app</b> application.</p>\r\n<p>Add the following code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent implements OnInit {  \r\n   logInName = 'admin'; \r\n}\r\n</pre>\r\n<p>Add the following code in test.component.html file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h2&gt;ngSwitch directive&lt;/h2&gt; \r\n&lt;ul [ngSwitch]=\"logInName\"&gt; \r\n   &lt;li *ngSwitchCase=\"'user'\"&gt; \r\n      &lt;p&gt;User is logged in..&lt;/p&gt; \r\n   &lt;/li&gt; \r\n   &lt;li *ngSwitchCase=\"'admin'\"&gt; \r\n      &lt;p&gt;admin is logged in&lt;/p&gt; \r\n   &lt;/li&gt; \r\n   &lt;li *ngSwitchDefault&gt; \r\n      &lt;p&gt;Please choose login name&lt;/p&gt; \r\n   &lt;/li&gt; \r\n&lt;/ul&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<p>Here, we have defined <b>logInName</b> as <b>admin.</b> So, it matches second SwitchCase and prints above admin related message.</p>\r\n<h2>Attribute directives</h2>\r\n<p>Attribute directives performs the appearance or behavior of DOM elements or components. Some of the examples are NgStyle, NgClass and NgModel. Whereas, NgModel is two-way attribute data binding explained in previous chapter.</p>\r\n<h3>ngStyle</h3>\r\n<p><b>ngStyle</b> directive is used to add dynamic styles. Below example is used to apply blue color to the paragraph.</p>\r\n<p>Let us try <b>ngStyle</b> directive in our <b>directive-app</b> application.</p>\r\n<p>Add below content in <b>test.component.html</b> file.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [ngStyle]=\"{'color': 'blue', 'font-size': '14px'}\"&gt; \r\n   paragraph style is applied using ngStyle \r\n&lt;/p&gt;\r\n</pre>\r\n<p>Start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<h3>ngClass</h3>\r\n<p><b>ngClass</b> is used to add or remove CSS classes in HTML elements.</p>\r\n<p>Let us try <b>ngClass</b> directive in our <b>directive-app</b> application.</p>\r\n<p>Create a class <b>User</b> using the below command</p>\r\n<pre class=\"result notranslate\">\r\nng g class User\r\n</pre>\r\n<p>You could see the following response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/user.spec.ts (146 bytes) \r\nCREATE src/app/user.ts (22 bytes)\r\n</pre>\r\n<p>Move to <b>src/app/user.ts</b> file and add the below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\nexport class User { \r\n   userId : number; userName : string; \r\n}\r\n</pre>\r\n<p>Here, we have created two property <b>userId</b> and <b>userName</b> in the <b>User</b> class.</p>\r\n<p>Open <b>test.component.ts</b> file and add the below changes &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { User } from '../user'; \r\nexport class TestComponent implements OnInit {  \r\n   users: User[] = [ \r\n      { \r\n         \"userId\": 1, \r\n         \"userName\": 'User1' \r\n      }, \r\n      { \r\n         \"userId\": 2, \r\n         \"userName\": 'User2' \r\n      }, \r\n   ]; \r\n}\r\n</pre>\r\n<p>Here, we have declared a local variable, users and initialise with 2 users object.</p>\r\n<p>Open <b>test.component.css</b> file and add below code</p>\r\n<pre class=\"result notranslate\">\r\n.highlight { \r\n   color: red; \r\n}\r\n</pre>\r\n<p>Open your <b>test.component.html</b> file and add the below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"container\"&gt; \r\n   &lt;br/&gt; \r\n   &lt;div *ngFor=\"let user of users\" [ngClass]=\"{ \r\n      'highlight':user.userName === 'User1' \r\n   }\"&gt; \r\n      {{ user.userName }} \r\n   &lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have applied, <b>ngClass</b> for <b>User1</b> so it will highlight the <b>User1</b>.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<h2>Custom directives</h2>\r\n<p>Angular provides option to extend the angular directive with user defined directives and it is called <b>Custom directives</b>. Let us learn how to create custom directive in this chapter.</p>\r\n<p>Let us try to create custom directive in our <b>directive-app</b> application.</p>\r\n<p>Angular CLI provides a below command to create custom directive.</p>\r\n<pre class=\"result notranslate\">\r\nng generate directive customstyle\r\n</pre>\r\n<p>After executing this command, you could see the below response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/customstyle.directive.spec.ts (244 bytes) \r\nCREATE src/app/customstyle.directive.ts (151 bytes) UPDATE src/app/app.module.ts (1115 bytes)\r\n</pre>\r\n<p>Open <b>app.module.ts.</b> The directive will be configured in the <b>AppModule</b> through <b>declarations</b> meta data.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { CustomstyleDirective } from './customstyle.directive'; \r\n@NgModule({ \r\n   declarations: [ \r\n      AppComponent, \r\n      TestComponent, \r\n      CustomstyleDirective \r\n   ] \r\n})\r\n</pre>\r\n<p>Open <b>customstyle.directive.ts</b> file and add the below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Directive, ElementRef } from '@angular/core'; \r\n@Directive({ \r\n   selector: '[appCustomstyle]' \r\n}) \r\nexport class CustomstyleDirective {\r\n   constructor(el: ElementRef) { \r\n      el.nativeElement.style.fontSize = '24px'; \r\n   } \r\n}\r\n</pre>\r\n<p>Here, <b>constructor</b> method gets the element using <b>CustomStyleDirective</b> as <b>el</b>. Then, it accesses el’s style and set its font size as <b>24px</b> using CSS property.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<h3>ng-template</h3>\r\n<p><b>ng-template</b> is used to create dynamic and reusable templates. It is a virtual element. If you compile your code with <b>ng-template</b> then is converted as comment in DOM.</p>\r\n<p>For example,</p>\r\n<p>Let’s add a below code in <b>test.component.html</b> page.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h3&gt;ng-template&lt;/h3&gt; \r\n&lt;ng-template&gt;ng-template tag is a virtual element&lt;/ng-template&gt;\r\n</pre>\r\n<p>If you run the application, then it will print only <b>h3</b> element. Check your page source, template is displayed in comment section because it is a virtual element so it does not render anything. We need to use <b>ng-template</b> along with Angular directives.</p>\r\n<p>Normally, directive emits the HTML tag it is associated. Sometimes, we don’t want the tag but only the content. For example, in the below example, li will be emitted.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;li *ngFor=\"let item in list\"&gt;{{ item }}&lt;/li&gt;\r\n</pre>\r\n<p>We can use <b>ng-template</b> to safely skip the <b>li</b> tag.</p>\r\n<h3>ng-template with structural directive</h3>\r\n<p><b>ng-template</b> should always be used inside <b>ngIf, ngFor</b> or <b>ngSwitch</b> directives to render the result.</p>\r\n<p>Let’s assume simple code.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;ng-template [ngIf]=true&gt; \r\n   &lt;div&gt;&lt;h2&gt;ng-template works!&lt;/h2&gt;&lt;/div&gt; \r\n&lt;/ng-template&gt;\r\n</pre>\r\n<p>Here, if <b>ngIf</b> condition becomes true, it will print the data inside div element. Similarly, you can use <b>ngFor</b> and <b>ngSwitch</b> directives as well.</p>\r\n<h3>NgForOf directive</h3>\r\n<p><b>ngForOf</b> is also a structural directive used to render an item in a collection. Below example is used to show <b>ngForOf</b> directive inside <b>ng-template</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; \r\n@Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div&gt; \r\n   &lt;ng-template ngFor let-item [ngForOf]=\"Fruits\" let-i=\"index\"&gt; \r\n   &lt;p&gt;{{i}}&lt;/p&gt; \r\n   &lt;/ng-template&gt; \r\n   &lt;/div&gt;` \r\n   , \r\n   styleUrls: ['./test.component.css'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   Fruits = [\"mango\",\"apple\",\"orange\",\"grapes\"]; \r\n   ngOnInit() \r\n   { \r\n   } \r\n}\r\n</pre>\r\n<p>If you run the application, it will show the index of each elements as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n0 \r\n1 \r\n2 \r\n3\r\n</pre>\r\n<h2>Component directives</h2>\r\n<p>Component directives are based on component. Actually, each component can be used as directive. Component provides @Input and @Output decorator to send and receive information between parent and child components.</p>\r\n<p>Let us try use component as directive in our <b>directive-app</b> application.</p>\r\n<p>Create a new <b>ChildComponent</b> using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component child\r\nCREATE src/app/child/child.component.html (20 bytes) CREATE src/app/child/child.component.spec.ts (621 bytes) \r\nCREATE src/app/child/child.component.ts (265 bytes) CREATE src/app/child/child.component.css (0 bytes) UPDATE src/app/app.module.ts (466 bytes)\r\n</pre>\r\n<p>Open <b>child.component.ts</b> and add below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n@Input() userName: string;\r\n</pre>\r\n<p>Here, we are setting a input property for <b>ChildComponent</b>.</p>\r\n<p>Open <b>child.component.html</b> and add below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p&gt;child works!&lt;/p&gt; \r\n&lt;p&gt;Hi {{ userName }}&lt;/p&gt;\r\n</pre>\r\n<p>Here, we are using the value userName to welcome the user.</p>\r\n<p>Open <b>test.component.ts</b> and add below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\nname: string = 'Peter';\r\n</pre>\r\n<p>Open <b>test.component.html</b> and add below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h1&gt;Test component&lt;/h1&gt; \r\n&lt;app-child [userName]=\"name\"&gt;&lt;app-child&gt;\r\n</pre>\r\n<p>Here, we are using <b>AppComponent</b> inside the <b>TestComponent</b> as a directive with input property.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<p>[](images/directive-app/component_as_directive.PNG\"</p>\r\n<h3>Working example</h3>\r\n<p>Let us add a new component in our <b>ExpenseManager</b> application to list the expense entries.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Create a new component, <b>ExpenseEntryListComponent</b> using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component ExpenseEntryList\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry-list/expense-entry-list.component.html (33 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.spec.ts (700 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.ts (315 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.css (0 bytes) \r\nUPDATE src/app/app.module.ts (548 bytes)\r\n</pre>\r\n<p>Here, the command creates the ExpenseEntryList Component and update the necessary code in <b>AppModule</b>.</p>\r\n<p>Import <b>ExpenseEntry</b> into <b>ExpenseEntryListComponent</b> component <b>(src/app/expense-entry-list/expense-entry-list.component)</b></p>\r\n<pre class=\"result notranslate\">\r\nimport { ExpenseEntry } from '../expense-entry';\r\n</pre>\r\n<p>Add a method, <b>getExpenseEntries()</b> to return list of expense entry (mock items) in <b>ExpenseEntryListComponent (src/app/expense-entry-list/expense-entry-list.component)</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\ngetExpenseEntries() : ExpenseEntry[] { \r\n   let mockExpenseEntries : ExpenseEntry[] = [ \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"Mcdonald\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1,\r\n         item: \"Pizza\",\r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"Mcdonald\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) \r\n      }, \r\n   ]; \r\n   return mockExpenseEntries; \r\n}\r\n</pre>\r\n<p>Declare a local variable, expenseEntries and load the mock list of expense entries as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ntitle: string; \r\nexpenseEntries: ExpenseEntry[]; \r\nconstructor() { } \r\nngOnInit() { \r\n   this.title = \"Expense Entry List\"; \r\n   this.expenseEntries = this.getExpenseEntries(); \r\n}\r\n</pre>\r\n<p>Open the template file <b>(src/app/expense-entry-list/expense-entry-list.component.html)</b> and show the mock entries in a table.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt; \r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; \r\n                  {{ title }} \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n                  &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n            &lt;table class=\"table table-striped\"&gt; \r\n               &lt;thead&gt; \r\n                  &lt;tr&gt; \r\n                     &lt;th&gt;Item&lt;/th&gt; \r\n                     &lt;th&gt;Amount&lt;/th&gt; \r\n                     &lt;th&gt;Category&lt;/th&gt; \r\n                     &lt;th&gt;Location&lt;/th&gt; \r\n                     &lt;th&gt;Spent On&lt;/th&gt; \r\n                  &lt;/tr&gt; \r\n               &lt;/thead&gt; \r\n               &lt;tbody&gt; \r\n                  &lt;tr *ngFor=\"let entry of expenseEntries\"&gt; \r\n                     &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt; \r\n                     &lt;th&gt;{{ entry.amount }}&lt;/th&gt; \r\n                     &lt;td&gt;{{ entry.category }}&lt;/td&gt; \r\n                     &lt;td&gt;{{ entry.location }}&lt;/td&gt; \r\n                     &lt;td&gt;{{ entry.spendOn | date: 'short' }}&lt;/td&gt; \r\n                  &lt;/tr&gt; \r\n               &lt;/tbody&gt; \r\n            &lt;/table&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Used bootstrap table. <b>table</b> and <b>table-striped</b> will style the table according to Boostrap style standard.</p></li>\r\n<li><p>Used <b>ngFor</b> to loop over the <b>expenseEntries</b> and generate table rows.</p></li>\r\n</ul>\r\n<p>Open <b>AppComponent</b> template, <b>src/app/app.component.html</b> and include <b>ExpenseEntryListComponent</b> and remove <b>ExpenseEntryComponent</b> as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n... \r\n&lt;app-expense-entry-list&gt;&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Finally, the output of the application is as shown below.</p>\r\n</div>\r\n","discussion":"<!-- Tutorial Content Starts Here -->\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Discuss Angular 8</h1>\n<hr/>\n<p><b>Angular 8</b> is an open source, TypeScript based frontend web application framework. Angular 8 has been released by <b>Google’s Angular</b> community. This tutorial starts with the architecture of Angular 8,setup simple project, data binding, then walks through forms, templates, routing and explains about Angular 8 new features. Finally, conclude with step by step working example.</p>\n<hr />\n</div>\n","form_validation":"<!-- Tutorial Content Starts Here -->\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Form Validation</h1>\n<hr/>\n<p>Form validation is an important part of web application. It is used to validate whether the user input is in correct format or not.</p>\n<h2>RequiredValidator</h2>\n<p>Let’s perform simple required field validation in angular.</p>\n<p>Open command prompt and go to <b>reactive-form-app</b>.</p>\n<pre class=\"prettyprint notranslate\">\ncd /go/to/reactive-form-app\n</pre>\n<p>Replace the below code in <b>test.component.ts </b>file.</p>\n<pre class=\"prettyprint notranslate\">\nimport { Component, OnInit } from '@angular/core';\n\n//import validator and FormBuilder\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\n\n@Component({\n   selector: 'app-test',\n   templateUrl: './test.component.html',\n   styleUrls: ['./test.component.css']\n})\n\nexport class TestComponent implements OnInit {\n   //Create FormGroup\n   requiredForm: FormGroup;\n   constructor(private fb: FormBuilder) {\n      this.myForm();\n   }\n\n   //Create required field validator for name\n   myForm() {\n      this.requiredForm = this.fb.group({\n      name: ['', Validators.required ]\n      });\n   }\n   ngOnInit()\n   {\n\n   }\n}\n</pre>\n<p>Here,</p>\n<p>We have used form builder to handle all the validation. Constructor is used to create a form with the validation rules.</p>\n<p>Add the below code inside <b>test.component.html</b> file.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;div&gt;\n   &lt;h2&gt;\n     Required Field validation\n   &lt;/h2&gt;\n   &lt;form [formGroup]=\"requiredForm\" novalidate&gt;\n         &lt;div class=\"form-group\"&gt;\n           &lt;label class=\"center-block\"&gt;Name:\n             &lt;input class=\"form-control\" formControlName=\"name\"&gt;\n           &lt;/label&gt;\n         &lt;/div&gt;\n         &lt;div *ngIf=\"requiredForm.controls['name'].invalid && requiredForm.controls['name'].touched\" class=\"alert alert-danger\"&gt;\n             &lt;div *ngIf=\"requiredForm.controls['name'].errors.required\"&gt;\n             Name is required.\n           &lt;/div&gt;\n         &lt;/div&gt;\n   &lt;/form&gt;\n &lt;p&gt;Form value: {{ requiredForm.value | json }}&lt;/p&gt;\n &lt;p&gt;Form status: {{ requiredForm.status | json }}&lt;/p&gt;\n &lt;/div&gt;\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><p><b>requiredForm</b> is called global form group object. It is a parent element. Form controls are childrens of requiredForm.</p></li>\n<li><p>Conditional statement is used to check, if a user has touched the input field but not enter the values then, it displays the error message.</p></li>\n</ul>\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng serve\n</pre>\n<p>Now run your application and put focus on text box. Then, it will use show Name is required as shown below &minus;</p>\n<p>If you enter text in the textbox, then it is validated and the output is shown below &minus;</p>\n<h2>PatternValidator</h2>\n<p><b>PatternValidator</b> is used to validate regex pattern. Let’s perform simple email validation.</p>\n<p>Open command prompt and to <b>reactive-form-app.</b></p>\n<pre class=\"prettyprint notranslate\">\ncd /go/to/reactive-form-app\n</pre>\n<p>Replace below code in test.component.ts file &minus;</p>\n<pre class=\"prettyprint notranslate\">\nimport { Component, OnInit } from '@angular/core';\n\nimport { FormGroup, FormControl, Validators, FormBuilder } from \n'@angular/forms';\n\n@Component({\n   selector: 'app-test',\n   templateUrl: './test.component.html',\n   styleUrls: ['./test.component.css']\n})\n\nexport class TestComponent implements OnInit {\n   requiredForm: FormGroup;\n   constructor(private fb: FormBuilder) {\n      this.myForm();\n   }\n\n   myForm() {\n      this.requiredForm = this.fb.group({\n      email: ['', [Validators.required, \n         Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")] ]\n      });\n   }\n\n   ngOnInit()\n   {\n\n   }\n}\n</pre>\n<p>Here,</p>\n<p>Added email pattern validator inside the Validator.</p>\n<p>Update below code in test.component.html file &minus;</p>\n<pre class=\"prettyprint notranslate\">\n&lt;div&gt;\n   &lt;h2&gt;\n   Pattern validation\n   &lt;/h2&gt;\n   &lt;form [formGroup]=\"requiredForm\" novalidate&gt;\n   &lt;div class=\"form-group\"&gt;\n      &lt;label class=\"center-block\"&gt;Email:\n      &lt;input class=\"form-control\" formControlName=\"email\"&gt;\n      &lt;/label&gt;\n   &lt;/div&gt;\n   &lt;div *ngIf=\"requiredForm.controls['email'].invalid && requiredForm.controls['email'].touched\" class=\"alert alert-danger\"&gt;\n       &lt;div *ngIf=\"requiredForm.controls['email'].errors.required\"&gt;\n      Email is required.\n      &lt;/div&gt;\n   &lt;/div&gt;\n   &lt;/form&gt;\n   &lt;p&gt;Form value: {{ requiredForm.value | json }}&lt;/p&gt;\n   &lt;p&gt;Form status: {{ requiredForm.status | json }}&lt;/p&gt;\n&lt;/div&gt;\n</pre>\n<p>Here, we have created the email control and called email validator.</p>\n<p>Run your application and you could see the below result &minus;</p>\n<p></p>\n<p>Similarly, you can try yourself to perform other types of validators.</p>\n\t\t</div>\n\t\n","forms":"<!-- Tutorial Content Starts Here -->\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Forms</h1>\n<hr/>\n<p>Forms are used to handle user input data. Angular 8 supports two types of forms. They are <b>Template driven forms</b> and <b>Reactive forms</b>. This section explains about Angular 8 forms in detail.</p>\n<h2>Template driven forms</h2>\n<p>Template driven forms is created using directives in the template. It is mainly used for creating a simple form application. Let’s understand how to create template driven forms in brief.</p>\n<h3>Configure Forms</h3>\n<p>Before understanding forms, let us learn how to configure forms in an application. To enable template driven forms, first we need to import <b>FormsModule</b> in <b>app.module.ts.</b> It is given below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n//import FormsModule here\nimport { FormsModule } from '@angular/forms'; \n\nimports: [\n   BrowserModule,\n   AppRoutingModule,\n   FormsModule   //Assign FormsModule\n],\n</pre>\n<p>Once, <b>FormsModule</b> is imported, the application will be ready for form programming.</p>\n<h3>Create simple form</h3>\n<p>Let us create a sample application <b>(template-form-app)</b> in Angular 8 to learn the template driven form.</p>\n<p>Open command prompt and create new Angular application using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\ncd /go/to/workspace \nng new template-form-app \ncd template-form-app\n</pre>\n<p>Configure <b>FormsModule</b> in <b>AppComponent</b> as shown below &minus;</p>\n<pre class=\"prettyprint notranslate\">\n...\n\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n   declarations: [\n      AppComponent,\n      TestComponent\n   ],\n   imports: [\n      BrowserModule,\n      FormsModule\n   ],\n   providers: [],\n   bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</pre>\n<p>Create a test component using Angular CLI as mentioned below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng generate component test\n</pre>\n<p>The above create a new component and the output is as follows &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/test/test.component.scss (0 bytes)\nCREATE src/app/test/test.component.html (19 bytes)\nCREATE src/app/test/test.component.spec.ts (614 bytes)\nCREATE src/app/test/test.component.ts (262 bytes)\nUPDATE src/app/app.module.ts (545 bytes)\n</pre>\n<p>Let’s create a simple form to display user entered text.</p>\n<p>Add the below code in <b>test.component.html</b> file as follows &minus;</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form #userName=\"ngForm\" (ngSubmit)=\"onClickSubmit(userName.value)\"&gt; \n   &lt;input type=\"text\" name=\"username\" placeholder=\"username\" ngModel&gt; \n   &lt;br/&gt; \n   &lt;br/&gt; \n   &lt;input type=\"submit\" value=\"submit\"&gt; \n&lt;/form&gt;\n</pre>\n<p>Here, we used <b>ngModel</b> attribute in <b>input</b> text field.</p>\n<p>Create <b>onClickSubmit()</b> method inside <b>test.component.ts</b> file as shown below</p>\n<pre class=\"prettyprint notranslate\">\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n   selector: 'app-test',\n   templateUrl: './test.component.html',\n   styleUrls: ['./test.component.scss']\n})\n\nexport class TestComponent implements OnInit {\n\n   ngOnInit() {\n   }\n   onClickSubmit(result) {\n      console.log(\"You have entered : \" + result.username); \n   }\n}\n</pre>\n<p>Open app.component.html and change the content as specified below &minus;</p>\n<pre class=\"prettyprint notranslate\">\n&lt;app-test&gt;&lt;/app-test&gt;\n</pre>\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng serve\n</pre>\n<p>Now, run your application and you could see the below response &minus;</p>\n<p>Enter <b>Peter</b> in input text field and enter submit. <b>onClickSubmit</b> function will be called and user entered text <b>Peter</b> will be send as an argument. <b>onClickSubmit</b> will print the user name in the console and the output is as follows &minus;</p>\n<h2>Reactive Forms</h2>\n<p><b>Reactive Forms</b> is created inside component class so it is also referred as model driven forms. Every form control will have an object in the component and this provides greater control and flexibility in the form programming. <b>Reactive Form</b> is based on structured data model. Let’s understand how to use Reactive forms in angular.</p>\n<h3>Configure Reactive forms</h3>\n<p>To enable reactive forms, first we need to import <b>ReactiveFormsModule</b> in <b>app.module.ts</b>. It is defined below</p>\n<pre class=\"prettyprint notranslate\">\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TestComponent } from './test/test.component';\nimport { FormsModule } from '@angular/forms';\n\n//import ReactiveFormsModule here\nimport { ReactiveFormsModule } from '@angular/forms';\n\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule, \n    ReactiveFormsModule   //Assign here\n  ]\n</pre>\n<h3>Create Reactive forms</h3>\n<p>Before moving to create Reactive forms, we need to understand about the following concepts,</p>\n<ul class=\"list\">\n<li><p><b>FormControl</b> &minus; Define basic functionality of individual form control</p></li>\n<li><p><b>FormGroup</b> &minus; Used to aggregate the values of collection form control</p></li>\n<li><p><b>FormArray</b> &minus; Used to aggregate the values of form control into an array</p></li>\n<li><p><b>ControlValueAccessor</b> &minus; Acts as an interface between Forms API to HTML DOM elements.</p></li>\n</ul>\n<p>Let us create a sample application <b>(reactive-form-app)</b> in Angular 8 to learn the template driven form.</p>\n<p>Open command prompt and create new Angular application using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\ncd /go/to/workspace\nng new reactive-form-app\ncd reactive-form-app\n</pre>\n<p>Configure <b>ReactiveFormsModule</b> in <b>AppComponent</b> as shown below &minus;</p>\n<pre class=\"prettyprint notranslate\">\n...\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n   declarations: [\n      AppComponent,\n      TestComponent\n   ],\n   imports: [\n      BrowserModule,\n      ReactiveFormsModule\n   ],\n   providers: [],\n   bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</pre>\n<p>Create a <b>test</b> component using Angular CLI as mentioned below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng generate component test\n</pre>\n<p>The above create a new component and the output is as follows &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE src/app/test/test.component.scss (0 bytes)\nCREATE src/app/test/test.component.html (19 bytes)\nCREATE src/app/test/test.component.spec.ts (614 bytes)\nCREATE src/app/test/test.component.ts (262 bytes)\nUPDATE src/app/app.module.ts (545 bytes)\n</pre>\n<p>Let’s create a simple form to display user entered text.</p>\n<p>We need to import <b>FormGroup, FormControl</b> classes in <b>TestComponent</b>.</p>\n<pre class=\"prettyprint notranslate\">\nimport { FormGroup, FormControl } from '@angular/forms';\n</pre>\n<p>Create <b>onClickSubmit()</b> method inside <b>test.component.ts</b> file as shown below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n   selector: 'app-test',\n   templateUrl: './test.component.html',\n   styleUrls: ['./test.component.css']\n})\nexport class TestComponent implements OnInit {\n   userName; \n   formdata;\n   ngOnInit() { \n      this.formdata = new FormGroup({ \n         userName: new FormControl(\"Tutorialspoint\")\n      }); \n   } \n   onClickSubmit(data) {this.userName = data.userName;}\n}\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><p>Created an instance of <b>formGroup</b> and set it to local variable, formdata.</p></li>\n<li><p>Crete an instance of <b>FormControl</b> and set it one of the entry in formdata.</p></li>\n<li><p>Created a <b>onClickSubmit()</b> method, which sets the local variable, <b>userName</b> with its argument.</p></li>\n</ul>\n<p>Add the below code in <b>test.component.html</b> file.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;div&gt; \n   &lt;form [formGroup]=\"formdata\" (ngSubmit)=\"onClickSubmit(formdata.value)\" &gt; \n      &lt;input type= text\"  name=\"userName\" placeholder=\"userName\" \n         formControlName = \"userName\"&gt; \n      &lt;br/&gt;\n      &lt;br/&gt;\n      &lt;input type=\"submit\"  value=\"Click here\"&gt; \n   &lt;/form&gt;\n&lt;/div&gt; \n&lt;p&gt; Textbox result is: {{userName}} &lt;/p&gt;\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><p>New form is created and set it’s <b>formGroup</b> property to formdata.</p></li>\n<li><p>New input text field is created and set is <b>formControlName to username.</b></p></li>\n<li><p><b>ngSubmit</b> event property is used in the form and set onClickSubmit() method as its value.</p></li>\n<li><p><b>onClickSubmit()</b> method gets formdata values as its arguments.</p></li>\n</ul>\n<p>Open <b>app.component.html</b> and change the content as specified below &minus;</p>\n<pre class=\"prettyprint notranslate\">\n&lt;app-test&gt;&lt;/app-test&gt;\n</pre>\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng serve\n</pre>\n<p>Now, run your application and you could see the below response &minus;</p>\n<p>Enter <b>Tutorialspoint</b> in input text field and enter submit. <b>onClickSubmit</b> function will be called and user entered text <b>Peter</b> will be send as an argument.</p>\n<p>We will perform Forms validation in next chapter.</p>\n\t\t</div>\n","http_client_programming":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Http Client Programming</h1>\r\n<hr/>\r\n<p>Http client programming is a must needed feature in every modern web application. Nowadays, lot of application exposes their functionality through REST API (functionality over HTTP protocol). With this in mind, Angular Team provides extensive support to access HTTP server. Angular provides a separate module, <b>HttpClientModule</b> and a service, <b>HttpClient</b> to do HTTP programming.</p>\r\n<p>Let us learn how to how to use <b>HttpClient</b> service in this chapter. Developer should have a basic knowledge in Http programming to understand this chapter.</p>\r\n<h2>Expense REST API</h2>\r\n<p>The prerequisite to do Http programming is the basic knowledge of Http protocol and REST API technique. Http programming involves two part, server and client. Angular provides support to create client side application. <b>Express</b> a popular web framework provides support to create server side application.</p>\r\n<p>Let us create an <b>Expense Rest API</b> using express framework and then access it from our <b>ExpenseManager</b> application using Angular HttpClient service.</p>\r\n<p>Open a command prompt and create a new folder, <b>express-rest-api</b>.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/workspace \r\nmkdir express-rest-api \r\ncd expense-rest-api\r\n</pre>\r\n<p>Initialise a new node application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnpm init\r\n</pre>\r\n<p><b>npm init</b> will ask some basic questions like project name (express-rest-api), entry point (server.js), etc., as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nThis utility will walk you through creating a package.json file. \r\nIt only covers the most common items, and tries to guess sensible defaults. \r\nSee `npm help json` for definitive documentation on these fields and exactly what they do. \r\nUse `npm install &lt;pkg&gt;` afterwards to install a package and save it as a dependency in the package.json file. \r\nPress ^C at any time to quit. \r\npackage name: (expense-rest-api) \r\nversion: (1.0.0) \r\ndescription: Rest api for Expense Application \r\nentry point: (index.js) server.js \r\ntest command:\r\ngit repository: \r\nkeywords: \r\nauthor: \r\nlicense: (ISC) \r\nAbout to write to \\path\\to\\workspace\\expense-rest-api\\package.json: { \r\n   \"name\": \"expense-rest-api\", \r\n   \"version\": \"1.0.0\", \r\n   \"description\": \"Rest api for Expense Application\", \r\n   \"main\": \"server.js\", \r\n   \"scripts\": { \r\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" \r\n   }, \r\n   \"author\": \"\", \r\n   \"license\": \"ISC\" \r\n} \r\nIs this OK? (yes) yes\r\n</pre>\r\n<p>Install <b>express, sqlite</b> and <b>cors</b> modules using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnpm install express sqlite3 cors\r\n</pre>\r\n<p>Create a new file <b>sqlitedb.js</b> and place below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nvar sqlite3 = require('sqlite3').verbose()\r\nconst DBSOURCE = \"expensedb.sqlite\"\r\n\r\nlet db = new sqlite3.Database(DBSOURCE, (err) =&gt; {\r\n   if (err) {\r\n      console.error(err.message)\r\n      throw err\r\n   }else{\r\n      console.log('Connected to the SQLite database.')\r\n      db.run(`CREATE TABLE expense (\r\n         id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n         item text, \r\n         amount real, \r\n         category text, \r\n         location text, \r\n         spendOn text, \r\n         createdOn text \r\n         )`,\r\n            (err) =&gt; {\r\n               if (err) {\r\n                  console.log(err);\r\n               }else{\r\n                  var insert = 'INSERT INTO expense (item, amount, category, location, spendOn, createdOn) VALUES (?,?,?,?,?,?)'\r\n\r\n                  db.run(insert, ['Pizza', 10, 'Food', 'KFC', '2020-05-26 10:10', '2020-05-26 10:10'])\r\n                  db.run(insert, ['Pizza', 9, 'Food', 'Mcdonald', '2020-05-28 11:10', '2020-05-28 11:10'])\r\n                  db.run(insert, ['Pizza', 12, 'Food', 'Mcdonald', '2020-05-29 09:22', '2020-05-29 09:22'])\r\n                  db.run(insert, ['Pizza', 15, 'Food', 'KFC', '2020-06-06 16:18', '2020-06-06 16:18'])\r\n                  db.run(insert, ['Pizza', 14, 'Food', 'Mcdonald', '2020-06-01 18:14', '2020-05-01 18:14'])\r\n               }\r\n            }\r\n      );  \r\n   }\r\n});\r\n\r\nmodule.exports = db\r\n</pre>\r\n<p>Here, we are creating a new sqlite database and load some sample data.</p>\r\n<p>Open server.js and place below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nvar express = require(\"express\")\r\nvar cors = require('cors')\r\nvar db = require(\"./sqlitedb.js\")\r\n\r\nvar app = express()\r\napp.use(cors());\r\n\r\nvar bodyParser = require(\"body-parser\");\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\n\r\nvar HTTP_PORT = 8000 \r\napp.listen(HTTP_PORT, () =&gt; {\r\n   console.log(\"Server running on port %PORT%\".replace(\"%PORT%\",HTTP_PORT))\r\n});\r\n\r\napp.get(\"/\", (req, res, next) =&gt; {\r\n    res.json({\"message\":\"Ok\"})\r\n});\r\n\r\napp.get(\"/api/expense\", (req, res, next) =&gt; {\r\n   var sql = \"select * from expense\"\r\n   var params = []\r\n   db.all(sql, params, (err, rows) =&gt; {\r\n      if (err) {\r\n        res.status(400).json({\"error\":err.message});\r\n        return;\r\n      }\r\n      res.json(rows)\r\n     });\r\n\r\n});\r\n\r\napp.get(\"/api/expense/:id\", (req, res, next) =&gt; {\r\n   var sql = \"select * from expense where id = ?\"\r\n   var params = [req.params.id]\r\n   db.get(sql, params, (err, row) =&gt; {\r\n      if (err) {\r\n         res.status(400).json({\"error\":err.message});\r\n         return;\r\n      }\r\n      res.json(row)\r\n   });\r\n});\r\n\r\napp.post(\"/api/expense/\", (req, res, next) =&gt; {\r\n   var errors=[]\r\n   if (!req.body.item){\r\n      errors.push(\"No item specified\");\r\n   }\r\n   var data = {\r\n      item : req.body.item,\r\n      amount: req.body.amount,\r\n      category: req.body.category,\r\n      location : req.body.location,\r\n      spendOn: req.body.spendOn,\r\n      createdOn: req.body.createdOn,\r\n   }\r\n   var sql = 'INSERT INTO expense (item, amount, category, location, spendOn, createdOn) VALUES (?,?,?,?,?,?)'\r\n   var params =[data.item, data.amount, data.category, data.location, data.spendOn, data.createdOn]\r\n   db.run(sql, params, function (err, result) {\r\n      if (err){\r\n         res.status(400).json({\"error\": err.message})\r\n         return;\r\n      }\r\n      data.id = this.lastID;\r\n      res.json(data);\r\n   });\r\n})\r\n\r\napp.put(\"/api/expense/:id\", (req, res, next) =&gt; {\r\n   var data = {\r\n      item : req.body.item,\r\n      amount: req.body.amount,\r\n      category: req.body.category,\r\n      location : req.body.location,\r\n      spendOn: req.body.spendOn\r\n   }\r\n   db.run(\r\n      `UPDATE expense SET\r\n         item = ?, \r\n\r\n         amount = ?,\r\n         category = ?, \r\n         location = ?, \r\n\r\n         spendOn = ? \r\n         WHERE id = ?`,\r\n            [data.item, data.amount, data.category, data.location,data.spendOn, req.params.id],\r\n      function (err, result) {\r\n         if (err){\r\n            console.log(err);\r\n            res.status(400).json({\"error\": res.message})\r\n            return;\r\n         }\r\n         res.json(data)\r\n   });\r\n})\r\n\r\napp.delete(\"/api/expense/:id\", (req, res, next) =&gt; {\r\n   db.run(\r\n      'DELETE FROM expense WHERE id = ?',\r\n      req.params.id,\r\n      function (err, result) {\r\n         if (err){\r\n            res.status(400).json({\"error\": res.message})\r\n            return;\r\n         }\r\n         res.json({\"message\":\"deleted\", changes: this.changes})\r\n   });\r\n})\r\n\r\napp.use(function(req, res){\r\n   res.status(404);\r\n});\r\n</pre>\r\n<p>Here, we create a basic CURD rest api to select, insert, update and delete expense entry.</p>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnpm run start\r\n</pre>\r\n<p>Open a browser, enter <b>http://localhost:8000/ </b>and press enter. You will see below response &minus;</p>\r\n<pre class=\"result notranslate\">\r\n{ \r\n   \"message\": \"Ok\" \r\n}\r\n</pre>\r\n<p>It confirms our application is working fine.</p>\r\n<p>Change the url to <b>http://localhost:8000/api/expense</b> and you will see all the expense entries in JSON format.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n[\r\n   {\r\n      \"id\": 1,\r\n\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 10,\r\n      \"category\": \"Food\",\r\n      \"location\": \"KFC\",\r\n      \"spendOn\": \"2020-05-26 10:10\",\r\n      \"createdOn\": \"2020-05-26 10:10\"\r\n   },\r\n   {\r\n      \"id\": 2,\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 14,\r\n      \"category\": \"Food\",\r\n      \"location\": \"Mcdonald\",\r\n      \"spendOn\": \"2020-06-01 18:14\",\r\n      \"createdOn\": \"2020-05-01 18:14\"\r\n   },\r\n   {\r\n      \"id\": 3,\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 15,\r\n      \"category\": \"Food\",\r\n      \"location\": \"KFC\",\r\n      \"spendOn\": \"2020-06-06 16:18\",\r\n      \"createdOn\": \"2020-06-06 16:18\"\r\n   },\r\n   {\r\n      \"id\": 4,\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 9,\r\n      \"category\": \"Food\",\r\n      \"location\": \"Mcdonald\",\r\n      \"spendOn\": \"2020-05-28 11:10\",\r\n      \"createdOn\": \"2020-05-28 11:10\"\r\n   },\r\n   {\r\n      \"id\": 5,\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 12,\r\n      \"category\": \"Food\",\r\n      \"location\": \"Mcdonald\",\r\n      \"spendOn\": \"2020-05-29 09:22\",\r\n      \"createdOn\": \"2020-05-29 09:22\"\r\n   }\r\n]\r\n</pre>\r\n<p>Finally, we created a simple CURD REST API for expense entry and we can access the REST API from our Angular application to learn HttpClient module.</p>\r\n<h2>Configure Http client</h2>\r\n<p>Let us learn how to configure <b>HttpClient</b> service in this chapter.</p>\r\n<p><b>HttpClient</b> service is available inside the <b>HttpClientModule</b> module, which is available inside the @angular/common/http package.</p>\r\n<p>To register <b>HttpClientModule</b> module &minus;</p>\r\n<p>Import the HttpClientModule in <b>AppComponent</b></p>\r\n<pre class=\"result notranslate\">\r\nimport { HttpClientModule } from '@angular/common/http';\r\n</pre>\r\n<p>Include HttpClientModule in imports meta data of AppComponent.</p>\r\n<pre class=\"result notranslate\">\r\n@NgModule({ \r\n   imports: [ \r\n      BrowserModule, \r\n      // import HttpClientModule after BrowserModule. \r\n      HttpClientModule, \r\n   ] \r\n}) \r\nexport class AppModule {}\r\n</pre>\r\n<h3>Create expense service</h3>\r\n<p>Let us create a new service <b>ExpenseEntryService</b> in our <b>ExpenseManager</b> application to interact with <b>Expense REST API</b>. ExpenseEntryService will get the latest expense entries, insert new expense entries, modify existing expense entries and delete the unwanted expense entries.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Run the below command to generate an Angular service, <b>ExpenseService</b>.</p>\r\n<pre class=\"result notranslate\">\r\nng generate service ExpenseEntry\r\n</pre>\r\n<p>This will create two Typescript files (expense entry service & its test) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry.service.spec.ts (364 bytes) \r\nCREATE src/app/expense-entry.service.ts (141 bytes)\r\n</pre>\r\n<p>Open <b>ExpenseEntryService</b> (src/app/expense-entry.service.ts) and import <b>ExpenseEntry, throwError</b> and <b>catchError</b> from rxjs library and import <b>HttpClient, HttpHeaders</b> and <b>HttpErrorResponse</b> from @angular/common/http package.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; \r\nimport { ExpenseEntry } from './expense-entry'; import { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators'; \r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from \r\n'@angular/common/http';\r\n</pre>\r\n<p>Inject the HttpClient service into our service.</p>\r\n<pre class=\"result notranslate\">\r\nconstructor(private httpClient : HttpClient) { }\r\n</pre>\r\n<p>Create a variable, <b>expenseRestUrl</b> to specify the <b>Expense Rest API</b> endpoints.</p>\r\n<pre class=\"result notranslate\">\r\nprivate expenseRestUrl = 'http://localhost:8000/api/expense';\r\n</pre>\r\n<p>Create a variable, <b>httpOptions</b> to set the Http Header option. This will be used during the Http Rest API call by Angular <b>HttpClient</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nprivate httpOptions = { \r\n   headers: new HttpHeaders( { 'Content-Type': 'application/json' }) \r\n};\r\n</pre>\r\n<p>The complete code is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { ExpenseEntry } from './expense-entry';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseEntryService {\r\n   private expenseRestUrl = 'api/expense';\r\n   private httpOptions = {\r\n      headers: new HttpHeaders( { 'Content-Type': 'application/json' })\r\n   };\r\n\r\n   constructor(\r\n      private httpClient : HttpClient) { }\r\n}\r\n</pre>\r\n<h2>HTTP GET</h2>\r\n<p>HttpClient provides get() method to fetch data from a web page. The main argument is the target web url. Another optional argument is the option object with below format &minus;</p>\r\n<pre class=\"result notranslate\">\r\n{\r\n   headers?: HttpHeaders | {[header: string]: string | string[]},\r\n   observe?: 'body' | 'events' | 'response',\r\n\r\n   params?: HttpParams|{[param: string]: string | string[]},\r\n   reportProgress?: boolean,\r\n   responseType?: 'arraybuffer'|'blob'|'json'|'text',\r\n   withCredentials?: boolean,\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>headers</b> &minus; HTTP Headers of the request, either as string, array of string or array of HttpHeaders.</p></li>\r\n<li><p><b>observe</b> &minus; Process the response and return the specific content of the response. Possible values are body, response and events. The default option of observer is body.</p></li>\r\n<li><p><b>params</b> &minus; HTTP parameters of the request, either as string, array of string or array of <b>HttpParams</b>.</p></li>\r\n<li><p><b>reportProgress</b> &minus; Whether to report the progress of the process or not (true or false).</p></li>\r\n<li><p><b>responseType</b> &minus; Refers the format of the response. Possible values are <b>arraybuffer, blob, json</b> and <b>text</b>.</p></li>\r\n<li><p><b>withCredentials</b> &minus; Whether the request has credentials or not (true or false).</p></li>\r\n</ul>\r\n<p>All options are optional.</p>\r\n<p><b>get()</b> method returns the response of the request as <b>Observable</b>. The returned Observable emit the data when the response is received from the server.</p>\r\n<p>The sample code to use <b>get()</b> method is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nhttpClient.get(url, options) \r\n.subscribe( (data) =&gt; console.log(data) );\r\n</pre>\r\n<h3>Typed Response</h3>\r\n<p><b>get()</b> method has an option to return observables, which emits typed response as well. The sample code to get typed response (ExpenseEntry) is as follows:</p>\r\n<pre class=\"result notranslate\">\r\nhttpClient.get&lt;T&gt;(url, options) .subscribe( (data: T) =&gt; console.log(data) );\r\n</pre>\r\n<h3>Handling errors</h3>\r\n<p>Error handling is one of the important aspect in the HTTP programming. Encountering error is one of the common scenario in HTTP programming.</p>\r\n<p>Errors in HTTP Programming can be categories into two groups &minus;</p>\r\n<ul class=\"list\">\r\n<li><p>Client side issues can occur due to network failure, misconfiguration, etc., If client side error happens, then the <b>get()</b> method throws <b>ErrorEvent</b> object.</p></li>\r\n<li><p>Server side issues can occur due to wrong url, server unavailability, server programming errors, etc.,</p></li>\r\n</ul>\r\n<p>Let us write a simple error handling for our <b>ExpenseEntryService</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nprivate httpErrorHandler (error: HttpErrorResponse) {\r\n   if (error.error instanceof ErrorEvent) {\r\n      console.error(\"A client side error occurs. The error message is \" + error.message);\r\n      } else {\r\n         console.error(\r\n            \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n      }\r\n\r\n   return throwError(\"Error occurred. Pleas try again\");\r\n}\r\n</pre>\r\n<p>The error function can be called in <b>get()</b> as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nhttpClient.get(url, options)  \r\n   .pipe(catchError(this.httpErrorHandler) \r\n   .subscribe( (data) =&gt; console.log(data) )\r\n</pre>\r\n<h3>Handle failed request</h3>\r\n<p>As we mentioned earlier, errors can happen and one way is to handle it. Another option is to try for certain number of times. If the request failed due to network issue or the HTTP server is temporarily offline, the next request may succeed.</p>\r\n<p>We can use <b>rxjs</b> library’s <b>retry</b> operator in this scenario as specified below</p>\r\n<pre class=\"result notranslate\">\r\nhttpClient.get(url, options) \r\n   .pipe( \r\n      retry(5), \r\n      catchError(this.httpErrorHandler)) \r\n   .subscribe( (data) =&gt; console.log(data) )\r\n</pre>\r\n<h3>Fetch expense entries</h3>\r\n<p>Let us do the actual coding to fetch the expenses from <b>Expense Rest API</b> in our ExpenseManager application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Add <b>getExpenseEntries()</b> and <b>httpErrorHandler()</b> method in <b>ExpenseEntryService</b> (src/app/expense-entry.service.ts) service.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngetExpenseEntries() : Observable&lt;ExpenseEntry[]&gt; {\r\n   return this.httpClient.get&lt;ExpenseEntry[]&gt;(this.expenseRestUrl, this.httpOptions)\r\n   .pipe(retry(3),catchError(this.httpErrorHandler));\r\n}\r\n\r\ngetExpenseEntry(id: number) : Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.get&lt;ExpenseEntry&gt;(this.expenseRestUrl + \"/\" + id, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n\r\nprivate httpErrorHandler (error: HttpErrorResponse) {\r\n   if (error.error instanceof ErrorEvent) {\r\n      console.error(\"A client side error occurs. The error message is \" + error.message);\r\n   } else {\r\n      console.error(\r\n         \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n   }\r\n\r\n   return throwError(\"Error occurred. Pleas try again\");\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>getExpenseEntries()</b> calls the <b>get()</b> method using expense end point and also configures the error handler. Also, it configures <b>httpClient</b> to try for maximum of 3 times in case of failure. Finally, it returns the response from server as typed <b>(ExpenseEntry[])</b> Observable object.</p></li>\r\n<li><p><b>getExpenseEntry</b> is similar to getExpenseEntries() except it passes the id of the ExpenseEntry object and gets ExpenseEntry Observable object.</p></li>\r\n</ul>\r\n<p>The complete coding of <b>ExpenseEntryService</b> is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { ExpenseEntry } from './expense-entry';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseEntryService {\r\n   private expenseRestUrl = 'http://localhost:8000/api/expense';\r\n   private httpOptions = {\r\n      headers: new HttpHeaders( { 'Content-Type': 'application/json' })\r\n   };\r\n\r\n   constructor(private httpClient : HttpClient) { } \r\n\r\n   getExpenseEntries() : Observable<ExpenseEntry[]> {\r\n      return this.httpClient.get<ExpenseEntry[]>(this.expenseRestUrl, this.httpOptions)\r\n      .pipe(\r\n         retry(3),\r\n         catchError(this.httpErrorHandler)\r\n      );\r\n   }\r\n\r\n   getExpenseEntry(id: number) : Observable<ExpenseEntry> {\r\n      return this.httpClient.get<ExpenseEntry>(this.expenseRestUrl + \"/\" + id, this.httpOptions)\r\n      .pipe(\r\n         retry(3),\r\n         catchError(this.httpErrorHandler)\r\n      );\r\n   }\r\n\r\n   private httpErrorHandler (error: HttpErrorResponse) {\r\n      if (error.error instanceof ErrorEvent) {\r\n         console.error(\"A client side error occurs. The error message is \" + error.message);\r\n      } else {\r\n         console.error(\r\n            \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n      }\r\n\r\n      return throwError(\"Error occurred. Pleas try again\");\r\n   }\r\n}\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent</b> (src-entry-list-entry-list.component.ts) and inject <b>ExpenseEntryService</b> through constructor as specified below:</p>\r\n<pre class=\"result notranslate\">\r\nconstructor(private debugService: DebugService, private restService : \r\nExpenseEntryService ) { }\r\n</pre>\r\n<p>Change the <b>getExpenseEntries()</b> function. Call getExpenseEntries() method from <b>ExpenseEntryService</b> instead of returning the mock items.</p>\r\n<pre class=\"result notranslate\">\r\ngetExpenseItems() {  \r\n   this.restService.getExpenseEntries() \r\n      .subscribe( data =&minus; this.expenseEntries = data ); \r\n}\r\n</pre>\r\n<p>The complete <b>ExpenseEntryListComponent</b> coding is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ExpenseEntry } from '../expense-entry';\r\nimport { DebugService } from '../debug.service';\r\nimport { ExpenseEntryService } from '../expense-entry.service';\r\n\r\n@Component({\r\n   selector: 'app-expense-entry-list',\r\n   templateUrl: './expense-entry-list.component.html',\r\n   styleUrls: ['./expense-entry-list.component.css'],\r\n   providers: [DebugService]\r\n})\r\nexport class ExpenseEntryListComponent implements OnInit {\r\n   title: string;\r\n   expenseEntries: ExpenseEntry[];\r\n   constructor(private debugService: DebugService, private restService : ExpenseEntryService ) { }\r\n\r\n   ngOnInit() {\r\n      this.debugService.info(\"Expense Entry List component initialized\");\r\n      this.title = \"Expense Entry List\";\r\n\r\n      this.getExpenseItems();\r\n   }\r\n\r\n   getExpenseItems() {\r\n      this.restService.getExpenseEntries()\r\n      .subscribe( data =&gt; this.expenseEntries = data );\r\n   }\r\n}\r\n</pre>\r\n<p>Finally, check the application and you will see the below response.</p>\r\n<h2>HTTP POST</h2>\r\n<p>HTTP POST is similar to HTTP GET except that the post request will send the necessary data as posted content along with the request. HTTP POST is used to insert new record into the system.</p>\r\n<p><b>HttpClient</b> provides <b>post()</b> method, which is similar to <b>get()</b> except it support extra argument to send the data to the server.</p>\r\n<p>Let us add a new method, <b>addExpenseEntry()</b> in our <b>ExpenseEntryService</b> to add new expense entry as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\naddExpenseEntry(expenseEntry: ExpenseEntry): Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.post&lt;ExpenseEntry&gt;(this.expenseRestUrl, expenseEntry, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h2>HTTP PUT</h2>\r\n<p>HTTP PUT is similar to HTTP POST request. HTTP PUT is used to update existing record in the system.</p>\r\n<p><b>httpClient</b> provides <b>put()</b> method, which is similar to <b>post()</b>.</p>\r\n<h3>Update expense entry</h3>\r\n<p>Let us add a new method, <b>updateExpenseEntry()</b> in our <b>ExpenseEntryService</b> to update existing expense entry as mentioned below:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nupdateExpenseEntry(expenseEntry: ExpenseEntry): Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.put&lt;ExpenseEntry&gt;(this.expenseRestUrl + \"/\" + expenseEntry.id, expenseEntry, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h2>HTTP DELETE</h2>\r\n<p>HTTP DELETE is similar to http GET request. HTTP DELETE is used to delete entries in the system.</p>\r\n<p><b>httpclient</b> provides <b>delete()</b> method, which is similar to <b>get()</b>.</p>\r\n<h3>Delete expense entry</h3>\r\n<p>Let us add a new method, <b>deleteExpenseEntry()</b> in our <b>ExpenseEntryService</b> to delete existing expense entry as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ndeleteExpenseEntry(expenseEntry: ExpenseEntry | number) : Observable&lt;ExpenseEntry&gt; {\r\n   const id = typeof expenseEntry == 'number' ? expenseEntry : expenseEntry.id\r\n   const url = `${this.expenseRestUrl}/${id}`;\r\n\r\n   return this.httpClient.delete&lt;ExpenseEntry&gt;(url, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n\t\t</div>\r\n\t<!-- Tutorial Content Ends Here -->\r\n\r\n","installation":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Installation</h1>\n<hr/>\n<p>This chapter explains about how to install <b>Angular 8</b> on your machine. Before moving to the installation, let’s verify the prerequisite first.</p>\n<h3>Prerequisite</h3>\n<p>As we know already, Angular is written in <b>TypeScript</b>. We need <b>Node</b> and <b>npm</b> to compile the files into <b>JavaScript</b> after that, we can deploy our application. For this purpose, <b>Node.js</b> must be installed in your system. Hopefully, you have installed <b>Node.js</b> on your machine.</p>\n<p>We can check it using the below command &minus;</p>\n<pre class=\"result notranslate\">\nnode --version\n</pre>\n<p>You could see the version of node. It is show below &minus;</p>\n<pre class=\"result notranslate\">\nv14.2.0\n</pre>\n<p>If <b>Node</b> is not installed, you can download and install by visiting the following link &minus;</p>\n<a rel=\"nofollow\" target=\"_blank\" href=\"https://nodejs.org/en/download/.\">https://nodejs.org/en/download/.</a>\n<h2>Angular 8 installation</h2>\n<p>Angular 8 CLI installation is based on very simple steps. It will take not more than five minutes to install.</p>\n<p><b>npm</b> is used to install <b>Angular 8</b> CLI. Once <b>Node.js</b> is installed, <b>npm</b> is also installed. If you want verify it, type the below command</p>\n<pre class=\"result notranslate\">\nnpm -v\n</pre>\n<p>You could see the version below &minus;</p>\n<pre class=\"result notranslate\">\n6.14.4\n</pre>\n<p>Let’s install <b>Angular 8</b> CLI using <b>npm</b>as follows &minus;</p>\n<pre class=\"result notranslate\">\nnpm install -g @angular/cli@^8.0.0\n</pre>\n<p>To verify <b>Angular 8</b> is properly installed on your machine, type the below command &minus;</p>\n<pre class=\"result notranslate\">\nng version\n</pre>\n<p>You could see the following response &minus;</p>\n<pre class=\"result notranslate\">\nAngular CLI: 8.3.26 \nNode: 14.2.0 \nOS: win32 x64 \nAngular: ... \nPackage                    Version \n------------------------------------------------------\n@angular-devkit/architect  0.803.26 \n@angular-devkit/core       8.3.26 \n@angular-devkit/schematics 8.3.26 \n@schematics/angular        8.3.26 \n@schematics/update         0.803.26 \nrxjs                       6.4.0\n</pre>\n\t\t</div>\n\t\n","internationalization":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Internationalization (i18n)</h1>\n<hr/>\n<p>Internationalization (i18n) is a must required feature for any modern web application. Internationalization enables the application to target any language in the world. Localization is a part of the Internationalization and it enables the application to render in a targeted local language. Angular provides complete support for internationalization and localization feature.</p>\n<p>Let us learn how to create a simple hello world application in different language.</p>\n<p>Create a new Angular application using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\ncd /go/to/workspace\nng new i18n-sample\n</pre>\n<p>Run the application using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\ncd i18n-sample\nnpm run start\n</pre>\n<p>Change the <b>AppComponent’s</b> template as specified below &minus;</p>\n<pre class=\"prettyprint notranslate\">\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\n\n&lt;div&gt;Hello&lt;/div&gt;\n&lt;div&gt;The Current time is {{ currentDate | date : 'medium' }}&lt;/div&gt;\n</pre>\n<p>Add localize module using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng add @angular/localize\n</pre>\n<p>Restart the application.</p>\n<p><b>LOCALE_ID</b> is the Angular variable to refer the current locale. By default, it is set as en_US. Let us change the locale by using in the provider in AppModule.</p>\n<pre class=\"prettyprint notranslate\">\nimport { BrowserModule } from '@angular/platform-browser';\nimport { LOCALE_ID, NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n   declarations: [\n      AppComponent\n   ],\n   imports: [\n      BrowserModule\n   ],\n   providers: [ { provide: LOCALE_ID, useValue: 'hi' } ],\n\n   bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><b>LOCALE_ID</b> is imported from <b>@angular/core</b>.</li>\n<li>LOCALE_ID is set to hi through provider so that, the LOCALE_ID will be available everywhere in the application.</li>\n</ul>\n<p>Import the locale data from @angular/common/locales/hi and then, register it using registerLocaleData method as specified below:</p>\n<pre class=\"prettyprint notranslate\">\nimport { Component } from '@angular/core';\n\nimport { registerLocaleData } from '@angular/common';\nimport localeHi from '@angular/common/locales/hi';\n\nregisterLocaleData(localeHi);\n\n@Component({\n   selector: 'app-root',\n   templateUrl: './app.component.html',\n   styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n   title = 'Internationzation Sample';\n}\n</pre>\n<p>Create a local variable, <b>CurrentDate</b> and set current time using <b>Date.now()</b>.</p>\n<pre class=\"prettyprint notranslate\">\nexport class AppComponent {\n   title = 'Internationzation Sample';\n\n   currentDate: number = Date.now();\n}\n</pre>\n<p>Change AppComponent’s template content and include the currentDate as specified below &minus;</p>\n<pre class=\"prettyprint notranslate\">\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\n\n&lt;div&gt;Hello&lt;/div&gt;\n&lt;div&gt;The Current time is {{ currentDate | date : 'medium' }}&lt;/div&gt;\n</pre>\n<p>Check the result and you will see the date is specified using <b>hi</b> locale.</p>\n<p>We have changed the date to current locale. Let us change other content as well. To do it, include <b>i18n</b> attribute in the relevant tag with format, <b>title|description@@id</b>.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\n\n&lt;h1 i18n=\"greeting|Greeting a person@@greeting\"&gt;Hello&lt;/h1&gt;\n&lt;div&gt;\n   &lt;span i18n=\"time|Specifiy the current time@@currentTime\"&gt;\n      The Current time is {{ currentDate | date : 'medium' }}\n   &lt;/span&gt;\n&lt;/div&gt;\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><b>hello</b> is simple translation format since it contains complete text to be translated.</li>\n<li><b>Time</b> is little bit complex as it contains dynamic content as well. The format of the text should follow ICU message format for translation.</li>\n</ul>\n<p>We can extract the data to be translated using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng xi18n --output-path src/locale\n</pre>\n<p>Command generates <b>messages.xlf</b> file with below content &minus;</p>\n<pre class=\"prettyprint notranslate\">\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\"&gt;\n   &lt;file source-language=\"en\" datatype=\"plaintext\" original=\"ng2.template\"&gt;\n      &lt;body&gt;\n         &lt;trans-unit id=\"greeting\" datatype=\"html\"&gt;\n            &lt;source&gt;Hello&lt;/source&gt;\n            &lt;context-group purpose=\"location\"&gt;\n               &lt;context context-type=\"sourcefile\"&gt;src/app/app.component.html&lt;/context&gt;\n               &lt;context context-type=\"linenumber\"&gt;3&lt;/context&gt;\n            &lt;/context-group&gt;\n            &lt;note priority=\"1\" from=\"description\"&gt;Greeting a person&lt;/note&gt;\n            &lt;note priority=\"1\" from=\"meaning\"&gt;greeting&lt;/note&gt;\n\n         &lt;/trans-unit&gt;\n         &lt;trans-unit id=\"currentTime\" datatype=\"html\"&gt;\n            &lt;source&gt;\n                        The Current time is &lt;x id=\"INTERPOLATION\" equiv-text=\"{{ currentDate | date : &apos;medium&apos; }}\"/&gt;\n            &lt;/source&gt;\n            &lt;context-group purpose=\"location\"&gt;\n               &lt;context context-type=\"sourcefile\"&gt;src/app/app.component.html&lt;/context&gt;\n               &lt;context context-type=\"linenumber\"&gt;5&lt;/context&gt;\n            &lt;/context-group&gt;\n            &lt;note priority=\"1\" from=\"description\"&gt;Specifiy the current time&lt;/note&gt;\n            &lt;note priority=\"1\" from=\"meaning\"&gt;time&lt;/note&gt;\n         &lt;/trans-unit&gt;\n      &lt;/body&gt;\n   &lt;/file&gt;\n&lt;/xliff&gt;\n</pre>\n<p>Copy the file and rename it to <b>messages.hi.xlf</b></p>\n<p>Open the file with Unicode text editor. Locate <b>source</b> tag and duplicate it with <b>target</b> tag and then change the content to <b>hi</b> locale. Use google translator to find the matching text. The changed content is as follows &minus;</b></p>\n<p></p>\n<p>Open <b>angular.json</b> and place below configuration under <b>build -&gt; configuration</b></p>\n<pre class=\"prettyprint notranslate\">\n\"hi\": { \n   \"aot\": true,\n   \"outputPath\": \"dist/hi/\",\n   \"i18nFile\": \"src/locale/messages.hi.xlf\",\n   \"i18nFormat\": \"xlf\",\n   \"i18nLocale\": \"hi\",\n   \"i18nMissingTranslation\": \"error\",\n   \"baseHref\": \"/hi/\"\n},\n\"en\": {\n   \"aot\": true,\n   \"outputPath\": \"dist/en/\",\n   \"i18nFile\": \"src/locale/messages.xlf\",\n   \"i18nFormat\": \"xlf\",\n   \"i18nLocale\": \"en\",\n   \"i18nMissingTranslation\": \"error\",\n   \"baseHref\": \"/en/\"\n}\n</pre>\n<p>Here,</p>\n<p>We have used separate setting for <b>hi</b> and <b>en</b> locale.</p>\n<p>Set below content under <b>serve -&gt; configuration</b>.</p>\n<pre class=\"prettyprint notranslate\">\n\"hi\": {\n   \"browserTarget\": \"i18n-sample:build:hi\"\n},\n\"en\": {\n   \"browserTarget\": \"i18n-sample:build:en\"\n}\n</pre>\n<p>We have added the necessary configuration. Stop the application and run below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nnpm run start -- --configuration=hi\n</pre>\n<p>Here,</p>\n<p>We have specified that the hi configuration has to be used.</p>\n<p>Navigate to http://localhost:4200/hi and you will see the Hindi localised content.</p>\n<p>Finally, we have created a localized application in Angular.</p>\n\t\t</div>\n\t\n","introduction":"<!-- Tutorial Content Starts Here -->\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\">\n\t<h1>Angular 8 - Introduction</h1>\n\t<br>\n\t<div class=\"mui-container-fluid button-borders\">\n\t\t<p>Angular 8 is a TypeScript based full-stack web framework for building web and mobile applications. One of\n\t\t\tthe major advantage is that the Angular 8 support for web application that can fit in any screen\n\t\t\tresolution. Angular application is fully compatible for mobiles, tablets, laptops or desktops. Angular 8\n\t\t\thas an excellent user interface library for web developers which contains reusable UI components.</p>\n\t\t<p>This functionality helps us to create Single Page Applications (SPA). SPA is reactive and fast\n\t\t\tapplication. For example, if you have a button in single page and click on the button then the action\n\t\t\tperforms dynamically in the current page without loading the new page from the server. Angular 8 is\n\t\t\tTypescript based object oriented programming and support features for server side programming as well.\n\t\t</p>\n\t\t<h2>Comparison of angular versions</h2>\n\t\t<p>As we know already, Google releases the version of <b>Angular</b> for the improvement of mobile and web\n\t\t\tdevelopment capabilities. All the released versions are backward compatible and can be updated easily to\n\t\t\tthe newer version. Let’s go through the comparison of released versions.</p>\n\t\t<h3>AngularJS</h3>\n\t\t<p>AngularJs is very powerful JavaScript framework. It was released in October 2010. AngularJS based on\n\t\t\tModel View Controller (MVC) architecture and automatically handles JavaScript code suitable for each\n\t\t\tbrowser.</p>\n\t\t<h3>Angular 2.0</h3>\n\t\t<p>Angular 2.0 was released in September 2016. It is re-engineered and rewritten version of AngularJS.\n\t\t\tAngularJs had a focus on controllers but, version 2 has changed focus on components. Components are the\n\t\t\tmain building block of application. It supports features for speed in rendering, updating pages and\n\t\t\tbuilding cross-platform native mobile apps for Google Android and iOS.</p>\n\t\t<h3>Angular 4.0</h3>\n\t\t<p>Angular 4.0 was released in March 2017. It is updated to TypeScript 2.2, supports ng if-else conditions\n\t\t\twhereas Angular 2 supported only if conditions. Angular 4.0 introduces animation packages, Http search\n\t\t\tparameters and finally angular 4 applications are smaller and faster.</p>\n\t\t<h3>Angular 5.0</h3>\n\t\t<p>Angular 5.0 was released in November 2017. It supported some of the salient features such as HTTPClient\n\t\t\tAPI, Lambda support, Improved Compiler and build optimizer.</p>\n\t\t<h3>Angular 6.0</h3>\n\t\t<p>Angular 6.0 was released in May 2018. Features added to this version are updated Angular CLI, updated\n\t\t\tCDK, updated Angular Material, multiple validators and usage of reactive JS library.</p>\n\t\t<h3>Angular 7.0</h3>\n\t\t<p>Angular 7.0 was released in October 2018. Some of salient features are Google supported community, POJO\n\t\t\tbased development, modular structure, declarative user interface and modular structure.</p>\n\t\t<h3>Angular 8 New features</h3>\n\t\t<p>Angular 8 comes up with the following new attractive features &minus;</p>\n\t\t<ul class=\"list\">\n\t\t\t<li>\n\t\t\t\t<p><b>Bazel support</b> &minus; If your application uses several modules and libraries, Bazel\n\t\t\t\t\tconcurrent builds helps to load faster in your application.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>Lazy loading</b> &minus; Angular 8 splits <b>AppRoutingModule</b> into smaller bundles and\n\t\t\t\t\tloads the data in the DOM.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>Differential loading</b> &minus; When you create an application, Angular CLI generates modules\n\t\t\t\t\tand this will be loaded automatically then browser will render the data.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>Web worker</b> &minus; It is running in the background, without affecting the performance of a\n\t\t\t\t\tpage.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>Improvement of CLI workflow</b> &minus; Angular 8 CLI commands ng-build, ng-test and ng-run\n\t\t\t\t\tare extended to third party libraries.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>Router Backward Compatibility</b> &minus; Angular router backward compatibility feature helps\n\t\t\t\t\tto create path for larger projects so user can easily add their coding with the help of lazy\n\t\t\t\t\tcoding.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>Opt-in usage sharing</b> &minus; User can opt into share Angular CLI usage data.</p>\n\t\t\t</li>\n\t\t</ul>\n\t\t<h2>Applications</h2>\n\t\t<p>Some of the popular website using Angular Framework are listed below &minus;</p>\n\t\t<ul class=\"list\">\n\t\t\t<li>\n\t\t\t\t<p><b>Weather.com</b> &minus; It is one of the leading forecasting weather report website.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>Youtube</b> &minus; It is a video and sharing website hosted by <b>Google</b>.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>Netflix</b> &minus; It is a technology and media services provider.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><b>PayPal</b> &minus; It is an online payment system.</p>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</div>","ivy_compiler":"\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Ivy Compiler</h1>\n<hr/>\n<p><b>Ivy Compiler</b> is the latest compiler for Angular application released by Angular Team. Currently, Angular is using <b>View Engine</b> compiler to compile Angular application.</p>\n<p>In general, Angular compiler has two options to compile an application.</p>\n<h3>Just In Time (JIT) Compiler</h3>\n<h3>In <b>Just In Time (JIT)</b> compilation, the compiler will be bundled along with the application and send to the browser. Angular application will be compiled in the browser and run just before the execution of application.</h3>\n<h3>Eventhough <b>JIT</b> provides certain advanced feature, <b>JIT</b> slows down the compilation and also the app bundle will be double the size produced by <b>AOT</b> compiler as it includes compiler as well.</h3>\n<h3>Ahead Of Time (AOT) Compiler</h3>\n<h3>In <b>AOT</b> compilation, the compiler will emit optimised code ready to run inside the browser without any addition step. It will reduce the size of the bundle as well as reduce the compilation time and startup time of the application.</h3>\n<h2>Advantages of Ivy Compiler</h2>\n<p><b>Ivy Compiler</b> is the optimised and advanced compiler for Angular. As of Angular 8, it is not yet complete even though it is useable at this stage. Angular Team is recommending the developer to use it in Angular 8.</p>\n<p>The main advantages of <b>Ivy Compiler</b> are as follows &minus;</p>\n<ul class=\"list\">\n<li>Optimised code.</li>\n<li>Faster build time.</li>\n<li>Reduced bundle size.</li>\n<li>Better performance.</li>\n</ul>\n<h2>How to use Ivy?</h2>\n<p><b>Ivy Compiler</b> can be used in Angular 8 application by changing the project setting as specified below &minus;</p>\n<p>Open angular.json and set the aot option <b>(projects -&gt; -&gt; architect -&gt; build -&gt; configurations -&gt; production)</b> of the project to true.</p>\n<pre class=\"prettyprint notranslate\">\n{\n   \"projects\": {\n      \"my-existing-project\": {\n         \"architect\": {\n\n            \"build\": {\n               \"options\": {\n                  ...\n                  \"aot\": true,\n               }\n            }\n         }\n      }\n   }\n}\n</pre>\n<p>Open <b>tsconfig.app.json</b> and set <b>enableIvy</b> to true under <b>angularCompilerOptions</b>.</p>\n<pre class=\"prettyprint notranslate\">\n{ \n   ... \n   \"angularCompilerOptions\": { \n      \"enableIvy\": true \n}\n</pre>\n<p>Compile and run the application and get benefited by <b>Ivy Compiler</b>.</p>\n\t\t</div>\n\t\n","pdf_version":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 Tutorial in PDF</h1>\n<hr/>\n\t\t</div>\n","pipes":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Pipes</h1>\r\n<hr/>\r\n\r\n<div id=\"google-top-ads\">\r\n<div class=\"top-ad-heading\">Advertisements</div>\r\n<div style=\"text-align:center\" class=\"google-top-ads\">\r\n<div id=\"adp_top_ads\" style=\"text-align:center!important;min-height:90px!important\"></div>\r\n<script>\r\n     var adPos = document.getElementById('adp_top_ads');\r\n     var ad_id_720 = \"8014640d-fd34-4b2e-9b1b-cc67234a2325\";\r\n     var ad_id_650 = \"2d1bb2c4-eb72-471d-9c80-1bf5514728c1\";\r\n     var ad_id_300 = \"75e8929b-e21c-41ad-bca5-5cb2601dc07b\";\r\n     var width = window.innerWidth;\r\n     var ad_id = ad_id_720;\r\n     if( width <= 768 ){\r\n        ad_id =  ad_id_300;\r\n     }else if( width <= 1435 ){\r\n        ad_id =  ad_id_650;\r\n     }\r\n     adPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\r\n     var adpushup = adpushup || {};\r\n     adpushup.que = adpushup.que || [];\r\n     adpushup.que.push(function() {\r\n     adpushup.triggerAd(ad_id);\r\n     });\r\n</script>\r\n</div>\r\n</div>\r\n<br>\r\n<div class=\"mui-container-fluid button-borders\">\r\n<div class=\"pre-btn\">\r\n<a href=\"angular8_directives.html\"><i class=\"fal fa-chevron-circle-left\"></i> Previous Page</a>\r\n</div>\r\n<div class=\"nxt-btn\">\r\n<a href=\"angular8_reactive_programming.html\">Next Page <i class=\"fal fa-chevron-circle-right\"></i>&nbsp;</a>\r\n</div>\r\n</div>\r\n<div id=\"load\">\r\n\t<div class=\"\">\r\n\t\t<div id=\"ebooks_grid\">\r\n\t\t\t\t\t\t<div class=\"videos\">\r\n\t\t\t                <br/>\r\n            \t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\r\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"1906\" />\r\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\r\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\r\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" class=\"\" data-title=\"angular_2_online_training\" > \r\n            <span class=\"play-button-trigger\"></span>\r\n    </a>\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div class=\"course-card-body\">\r\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" title=\"Angular 2 Online Training\" class=\"\" data-title=\"angular_2_online_training\" >Angular 2 Online Training</a></h4>\r\n\r\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\r\n    28 Lectures \r\n    <span><i class=\"fa fa-clock\"></i> 2.5 hours </span>\r\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/Anadi-Sharma\" >Anadi Sharma</a></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"v-courses-price\">\r\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \r\n   <a href=\"https://www.tutorialspoint.com/angular_2_online_training/index.asp\" target=\"_blank\">\r\n   <div class=\"btn-success rounded\">More Detail</div>\r\n   </a>\r\n</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\r\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"2872\" />\r\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\r\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\r\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" class=\"\" data-title=\"angular_the_complete_course\" > \r\n            <span class=\"play-button-trigger\"></span>\r\n    </a>\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div class=\"course-card-body\">\r\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" title=\"Angular - The Complete Course\" class=\"\" data-title=\"angular_the_complete_course\" >Angular - The Complete Course</a></h4>\r\n\r\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\r\n    13 Lectures \r\n    <span><i class=\"fa fa-clock\"></i> 48 mins</span>\r\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/ganesh_kavhar\" >Ganesh Kavhar</a></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"v-courses-price\">\r\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \r\n   <a href=\"https://www.tutorialspoint.com/angular_the_complete_course/index.asp\" target=\"_blank\">\r\n   <div class=\"btn-success rounded\">More Detail</div>\r\n   </a>\r\n</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4 col-lg-4 col-xl-4 tns-item tns-slide-cloned\">\r\n\t\t\t\t\t<input type=\"hidden\" class=\"course_id\" value=\"2884\" />\r\n\t\t\t\t\t<div class=\"card shadow-hover h-100 border\">\r\n\t\t\t\t\t\t<div class=\"course-card-thumbnail\">\r\n\t\t\t\t\t\t\t<a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" class=\"\" data-title=\"angular_interview_q_and_a_series\" > \r\n            <span class=\"play-button-trigger\"></span>\r\n    </a>\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div class=\"course-card-body\">\r\n\t\t\t\t\t\t\t<h4 class=\"h48\"><a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" title=\"Angular Interview Q & A series\" class=\"\" data-title=\"angular_interview_q_and_a_series\" >Angular Interview Q & A series</a></h4>\r\n\r\n\t\t\t\t\t\t\t                                             <p class=\"videos-details course-list-video\">\r\n    5 Lectures \r\n    <span><i class=\"fa fa-clock\"></i> 1.5 hours </span>\r\n</p>                     \t\t\t\t\t\t\t<p class=\"h25\"><i class=\"fa fa-user\"></i> <a href=\"https://www.tutorialspoint.com/profile/shivprasad_koirala\" >SHIVPRASAD KOIRALA</a></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"v-courses-price\">\r\n\t\t\t\t\t\t\t<div class=\"btn-width\">   \r\n   <a href=\"https://www.tutorialspoint.com/angular_interview_q_and_a_series/index.asp\" target=\"_blank\">\r\n   <div class=\"btn-success rounded\">More Detail</div>\r\n   </a>\r\n</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t<div class=\"clear\"></div>\r\n\t</div>\r\n</div>\r\n<div class=\"clear\"></div>\r\n<div class=\"clear\"></div>\r\n<p>Pipes are referred as filters. It helps to transform data and manage data within interpolation, denoted by {{ | }}. It accepts data, arrays, integers and strings as inputs which are separated by ‘|’ symbol. This chapter explains about pipes in detail.</p>\r\n<h2>Adding parameters</h2>\r\n<p>Create a date method in your <b>test.component.ts </b>file.</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent { \r\n   presentDate = new Date(); \r\n}\r\n</pre>\r\n<p>Now, add the below code in your test.component.html file.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   Today's date :- {{presentDate}} \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Now, run the application, it will show the following output &minus;</p>\r\n<pre class=\"result notranslate\">\r\nToday's date :- Mon Jun 15 2020 10:25:05 GMT+0530 (IST)\r\n</pre>\r\n<p>Here,</p>\r\n<p>Date object is converted into easily readable format.</p>\r\n<h3>Add Date pipe</h3>\r\n<p>Let’s add date pipe in the above html file.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   Today's date :- {{presentDate | date }}\r\n&lt;/div&gt;\r\n</pre>\r\n<p>You could see the below output &minus;</p>\r\n<pre class=\"result notranslate\">\r\nToday's date :- Jun 15, 2020\r\n</pre>\r\n<h3>Parameters in Date</h3>\r\n<p>We can add parameter in pipe using : character. We can show short, full or formatted dates using this parameter. Add the below code in <b>test.component.html</b> file.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   short date :- {{presentDate | date:'shortDate' }} &lt;br/&gt;\r\n   Full date :- {{presentDate | date:'fullDate' }} &lt;br/&gt; \r\n   Formatted date:- {{presentDate | date:'M/dd/yyyy'}} &lt;br/&gt; \r\n   Hours and minutes:- {{presentDate | date:'h:mm'}} \r\n&lt;/div&gt;\r\n</pre>\r\n<p>You could see the below response on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nshort date :- 6/15/20 \r\nFull date :- Monday, June 15, 2020 \r\nFormatted date:- 6/15/2020 \r\nHours and minutes:- 12:00\r\n</pre>\r\n<h2>Chained pipes</h2>\r\n<p>We can combine multiple pipes together. This will be useful when a scenario associates with more than one pipe that has to be applied for data transformation.</p>\r\n<p>In the above example, if you want to show the date with uppercase letters, then we can apply both <b>Date</b> and <b>Uppercase</b> pipes together.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   Date with uppercase :- {{presentDate | date:'fullDate' | uppercase}} &lt;br/&gt;\r\n   Date with lowercase :- {{presentDate | date:'medium' | lowercase}} &lt;br/&gt;  \r\n&lt;/div&gt;\r\n</pre>\r\n<p>You could see the below response on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nDate with uppercase :- MONDAY, JUNE 15, 2020 Date with lowercase :- jun 15, 2020, 12:00:00 am\r\n</pre>\r\n<p>Here,</p>\r\n<p>Date, Uppercase and Lowercase are pre-defined pipes. Let’s understand other types of built-in pipes in next section.</p>\r\n<h2>Built-in Pipes</h2>\r\n<p>Angular 8 supports the following built-in pipes. We will discuss one by one in brief.</p>\r\n<h3>AsyncPipe</h3>\r\n<p>If data comes in the form of observables, then <b>Async pipe</b> subscribes to an observable and returns the transmitted values.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Observable, Observer } from 'rxjs';\r\nexport class TestComponent implements OnInit {\r\n   timeChange = new Observable&ltstring&gt;((observer: Observer&gt;string&gt;) =&gt; {\r\n      setInterval(() =&gt; observer.next(new \r\n      Date().toString()), 1000); \r\n   }); \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p>The <b>Async</b> pipe performs subscription for time changing in every one seconds and returns the result whenever gets passed to it. Main advantage is that, we don’t need to call subscribe on our timeChange and don’t worry about unsubscribe, if the component is removed.</p>\r\n<p>Add the below code inside your test.component.html.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   Seconds changing in Time: {{ timeChange | async }}\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Now, run the application, you could see the seconds changing on your screen.</p>\r\n<h3>CurrencyPipe</h3>\r\n<p>It is used to convert the given number into various countries currency format. Consider the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;h3&gt; Currency Pipe&lt;/h3&gt; \r\n      &lt;p&gt;{{ price | currency:'EUR':true}}&lt;/p&gt; \r\n      &lt;p&gt;{{ price | currency:'INR' }}&lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   price : number = 20000; ngOnInit() {\r\n\r\n   } \r\n}\r\n</pre>\r\n<p>You could see the following output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCurrency Pipe\r\n\r\n€20,000.00 \r\n₹20,000.00\r\n</pre>\r\n<h3>SlicePipe</h3>\r\n<p>Slice pipe is used to return a slice of an array. It takes index as an argument. If you assign only start index, means it will print till the end of values. If you want to print specific range of values, then we can assign start and end index.</p>\r\n<p>We can also use negative index to access elements. Simple example is shown below &minus;</p>\r\n<p><b>test.component.ts</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div&gt; \r\n      &lt;h3&gt;Start index:- {{Fruits | slice:2}}&lt;/h3&gt; \r\n      &lt;h4&gt;Start and end index:- {{Fruits | slice:1:4}}&lt;/h4&gt; \r\n      &lt;h5&gt;Negative index:- {{Fruits | slice:-2}}&lt;/h5&gt; \r\n      &lt;h6&gt;Negative start and end index:- {{Fruits | slice:-4:-2}}&lt;/h6&gt; \r\n   &lt;/div&gt;\r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   Fruits = [\"Apple\",\"Orange\",\"Grapes\",\"Mango\",\"Kiwi\",\"Pomegranate\"]; \r\n   ngOnInit() {\r\n\r\n   } \r\n}\r\n</pre>\r\n<p>Now run your application and you could see the below output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nStart index:- Grapes,Mango,Kiwi,Pomegranate\r\nStart and end index:- Orange,Grapes,Mango \r\nNegative index:- Kiwi,Pomegranate \r\nNegative start and end index:- Grapes,Mango\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>{{Fruits | slice:2}}</b> means it starts from second index value Grapes to till the end of value.</p></li>\r\n<li><p><b>{{Fruits | slice:1:4}}</b> means starts from 1 to end-1 so the result is one to third index values.</p></li>\r\n<li><p><b>{{Fruits | slice:-2}}</b> means starts from -2 to till end because no end value is specified. Hence the result is Kiwi, Pomegranate.</p></li>\r\n<li><p><b>{{Fruits | slice:-4:-2}}</b> means starts from negative index -4 is Grapes to end-1 which is -3 so the result of index[-4,-3] is Grapes, Mango.</p></li>\r\n</ul>\r\n<h3>DecimalPipe</h3>\r\n<p>It is used to format decimal values. It is also considered as CommonModule. Let’s understand a simple code in <b>test.component.ts</b> file,</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;h3&gt;Decimal Pipe&lt;/h3&gt; \r\n      &lt;p&gt; {{decimalNum1 | number}} &lt;/p&gt; \r\n      &lt;p&gt; {{decimalNum2 | number}} &lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   decimalNum1: number = 8.7589623; \r\n   decimalNum2: number = 5.43; \r\n   ngOnInit() {\r\n\r\n   } \r\n}\r\n</pre>\r\n<p>You could see the below output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nDecimal Pipe \r\n8.759 \r\n5.43\r\n</pre>\r\n<h3>Formatting values</h3>\r\n<p>We can apply string format inside number pattern. It is based on the below format &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnumber:\"{minimumIntegerDigits}.{minimumFractionDigits} - {maximumFractionDigits}\"\r\n</pre>\r\n<p>Let’s apply the above format in our code,</p>\r\n<pre class=\"result notranslate\">\r\n@Component({ \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;p&gt; Apply formatting:- {{decimalNum1 | number:'3.1'}} &lt;/p&gt; \r\n      &lt;p&gt; Apply formatting:- {{decimalNum1 | number:'2.1-4'}} &lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n})\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>{{decimalNum1 | number:’3.1’}}</b> means three decimal place and minimum of one fraction but no constraint about maximum fraction limit. It returns the following output &minus;</p>\r\n<pre class=\"result notranslate\">\r\nApply formatting:- 008.759\r\n</pre>\r\n<p><b>{{decimalNum1 | number:’2.1-4’}}</b> means two decimal places and minimum one and maximum of four fractions allowed so it returns the below output &minus;</p>\r\n<pre class=\"result notranslate\">\r\nApply formatting:- 08.759\r\n</pre>\r\n<h3>PercentPipe</h3>\r\n<p>It is used to format number as percent. Formatting strings are same as DecimalPipe concept. Simple example is shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; \r\n@Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;h3&gt;Decimal Pipe&lt;/h3&gt; \r\n      &lt;p&gt; {{decimalNum1 | percent:'2.2'}} &lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent { \r\n   decimalNum1: number = 0.8178; \r\n}\r\n</pre>\r\n<p>You could see the below output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nDecimal Pipe \r\n81.78%\r\n</pre>\r\n<h3>JsonPipe</h3>\r\n<p>It is used to transform a JavaScript object into a JSON string. Add the below code in <b>test.component.ts</b> file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; \r\n@Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;p ngNonBindable&gt;{{ jsonData }}&lt;/p&gt; (1) \r\n      &lt;p&gt;{{ jsonData }}&lt;/p&gt; \r\n      &lt;p ngNonBindable&gt;{{ jsonData | json }}&lt;/p&gt; \r\n      &lt;p&gt;{{ jsonData | json }}&lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent { \r\n   jsonData = { id: 'one', name: { username: 'user1' }} \r\n}\r\n</pre>\r\n<p>Now, run the application, you could see the below output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\n{{ jsonData }} \r\n(1) \r\n[object Object] \r\n{{ jsonData | json }} \r\n{ \"id\": \"one\", \"name\": { \"username\": \"user1\" } }\r\n</pre>\r\n<h2>Creating custom pipe</h2>\r\n<p>As we have seen already, there is a number of pre-defined Pipes available in Angular 8 but sometimes, we may want to transform values in custom formats. This section explains about creating custom Pipes.</p>\r\n<p>Create a custom Pipe using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng g pipe digitcount\r\n</pre>\r\n<p>After executing the above command, you could see the response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/digitcount.pipe.spec.ts (203 bytes) CREATE src/app/digitcount.pipe.ts (213 bytes) \r\nUPDATE src/app/app.module.ts (744 bytes)\r\n</pre>\r\n<p>Let’s create a logic for counting digits in a number using Pipe. Open <b>digitcount.pipe.ts</b> file and add the below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Pipe, PipeTransform } from '@angular/core'; @Pipe({ \r\n   name: 'digitcount' \r\n}) \r\nexport class DigitcountPipe implements PipeTransform { \r\n   transform(val : number) : number { \r\n      return val.toString().length; \r\n   } \r\n}\r\n</pre>\r\n<p>Now, we have added logic for count number of digits in a number. Let’s add the final code in <b>test.component.ts</b> file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div&gt; \r\n      &lt;p&gt; DigitCount Pipe &lt;/p&gt; \r\n      &lt;h1&gt;{{ digits | digitcount }}&lt;/h1&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   digits : number = 100; \r\n   ngOnInit() { \r\n   } \r\n}\r\n</pre>\r\n<p>Now, run the application, you could see the below response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nDigitCount Pipe \r\n3\r\n</pre>\r\n<h3>Working example</h3>\r\n<p>Let us use the pipe in the our ExpenseManager application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent’s</b> template, <b>src/app/expense-entry-list/expense-entry-list.component.html</b> and include pipe in <b>entry.spendOn</b> as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;td&gt;{{ entry.spendOn | date: 'short' }}&lt;/td&gt;\r\n</pre>\r\n<p>Here, we have used the date pipe to show the spend on date in the short format.</p>\r\n<p>Finally, the output of the application is as shown below &minus;</p>\r\n\r\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\r\n<a href=\"angular8_directives.html\" class=\"pre-btn\"><i class=\"fal fa-chevron-circle-left\"></i> Previous Page</a>\r\n<a id=\"print-page\" href=\"#\" class=\"pre-btn d-none d-sm-block\"><i class=\"fal fa-print\"></i> Print Page</a>\r\n<a href=\"angular8_reactive_programming.html\" class=\"nxt-btn\">Next Page <i class=\"fal fa-chevron-circle-right\"></i>&nbsp;</a>\r\n</div>\r\n\t\t\t<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\r\n\t\t\t\t<div>Advertisements</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div id=\"adp_bottom_ads\"></div>\r\n\t\t\t\t\t<script>\r\n\t\t\t\t\t\tvar adPos = document.getElementById('adp_bottom_ads');\r\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\r\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\r\n\t\t\t\t\t\tvar adpushup = adpushup || {};\r\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\r\n\t\t\t\t\t\tadpushup.que.push(function() {\r\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\r\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\r\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t</script>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\r\n","quick_guide":"<!-- Tutorial Content Starts Here -->\r\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Quick Guide</h1>\r\n<hr/>-->\r\n<h1>Angular 8 - Introduction</h1>\r\n<p>Angular 8 is a TypeScript based full-stack web framework for building web and mobile applications. One of the major advantage is that the Angular 8 support for web application that can fit in any screen resolution. Angular application is fully compatible for mobiles, tablets, laptops or desktops. Angular 8 has an excellent user interface library for web developers which contains reusable UI components.</p>\r\n<p>This functionality helps us to create Single Page Applications (SPA). SPA is reactive and fast application. For example, if you have a button in single page and click on the button then the action performs dynamically in the current page without loading the new page from the server. Angular 8 is Typescript based object oriented programming and support features for server side programming as well.</p>\r\n<h2>Comparison of angular versions</h2>\r\n<p>As we know already, Google releases the version of <b>Angular</b> for the improvement of mobile and web development capabilities. All the released versions are backward compatible and can be updated easily to the newer version. Let’s go through the comparison of released versions.</p>\r\n<h3>AngularJS</h3>\r\n<p>AngularJs is very powerful JavaScript framework. It was released in October 2010. AngularJS based on Model View Controller (MVC) architecture and automatically handles JavaScript code suitable for each browser.</p>\r\n<h3>Angular 2.0</h3>\r\n<p>Angular 2.0 was released in September 2016. It is re-engineered and rewritten version of AngularJS. AngularJs had a focus on controllers but, version 2 has changed focus on components. Components are the main building block of application. It supports features for speed in rendering, updating pages and building cross-platform native mobile apps for Google Android and iOS.</p>\r\n<h3>Angular 4.0</h3>\r\n<p>Angular 4.0 was released in March 2017. It is updated to TypeScript 2.2, supports ng if-else conditions whereas Angular 2 supported only if conditions. Angular 4.0 introduces animation packages, Http search parameters and finally angular 4 applications are smaller and faster.</p>\r\n<h3>Angular 5.0</h3>\r\n<p>Angular 5.0 was released in November 2017. It supported some of the salient features such as HTTPClient API, Lambda support, Improved Compiler and build optimizer.</p>\r\n<h3>Angular 6.0</h3>\r\n<p>Angular 6.0 was released in May 2018. Features added to this version are updated Angular CLI, updated CDK, updated Angular Material, multiple validators and usage of reactive JS library.</p>\r\n<h3>Angular 7.0</h3>\r\n<p>Angular 7.0 was released in October 2018. Some of salient features are Google supported community, POJO based development, modular structure, declarative user interface and modular structure.</p>\r\n<h3>Angular 8 New features</h3>\r\n<p>Angular 8 comes up with the following new attractive features &minus;</p>\r\n<ul class=\"list\">\r\n<li><p><b>Bazel support</b> &minus; If your application uses several modules and libraries, Bazel concurrent builds helps to load faster in your application.</p></li>\r\n<li><p><b>Lazy loading</b> &minus; Angular 8 splits <b>AppRoutingModule</b> into smaller bundles and loads the data in the DOM.</p></li>\r\n<li><p><b>Differential loading</b> &minus; When you create an application, Angular CLI generates modules and this will be loaded automatically then browser will render the data.</p></li>\r\n<li><p><b>Web worker</b> &minus; It is running in the background, without affecting the performance of a page.</p></li>\r\n<li><p><b>Improvement of CLI workflow</b> &minus; Angular 8 CLI commands ng-build, ng-test and ng-run are extended to third party libraries.</p></li>\r\n<li><p><b>Router Backward Compatibility</b> &minus; Angular router backward compatibility feature helps to create path for larger projects so user can easily add their coding with the help of lazy coding.</p></li>\r\n<li><p><b>Opt-in usage sharing</b> &minus; User can opt into share Angular CLI usage data.</p></li>\r\n</ul>\r\n<h2>Applications</h2>\r\n<p>Some of the popular website using Angular Framework are listed below &minus;</p>\r\n<ul class=\"list\">\r\n<li><p><b>Weather.com</b> &minus; It is one of the leading forecasting weather report website.</p></li>\r\n<li><p><b>Youtube</b> &minus; It is a video and sharing website hosted by <b>Google</b>.</p></li>\r\n<li><p><b>Netflix</b> &minus; It is a technology and media services provider.</p></li>\r\n<li><p><b>PayPal</b> &minus; It is an online payment system.</p></li>\r\n</ul>\r\n<h1>Angular 8 - Installation</h1>\r\n<p>This chapter explains about how to install <b>Angular 8</b> on your machine. Before moving to the installation, let’s verify the prerequisite first.</p>\r\n<h3>Prerequisite</h3>\r\n<p>As we know already, Angular is written in <b>TypeScript</b>. We need <b>Node</b> and <b>npm</b> to compile the files into <b>JavaScript</b> after that, we can deploy our application. For this purpose, <b>Node.js</b> must be installed in your system. Hopefully, you have installed <b>Node.js</b> on your machine.</p>\r\n<p>We can check it using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnode --version\r\n</pre>\r\n<p>You could see the version of node. It is show below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nv14.2.0\r\n</pre>\r\n<p>If <b>Node</b> is not installed, you can download and install by visiting the following link &minus;</p>\r\n<a rel=\"nofollow\" target=\"_blank\" href=\"https://nodejs.org/en/download/.\">https://nodejs.org/en/download/.</a>\r\n<h2>Angular 8 installation</h2>\r\n<p>Angular 8 CLI installation is based on very simple steps. It will take not more than five minutes to install.</p>\r\n<p><b>npm</b> is used to install <b>Angular 8</b> CLI. Once <b>Node.js</b> is installed, <b>npm</b> is also installed. If you want verify it, type the below command</p>\r\n<pre class=\"result notranslate\">\r\nnpm -v\r\n</pre>\r\n<p>You could see the version below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n6.14.4\r\n</pre>\r\n<p>Let’s install <b>Angular 8</b> CLI using <b>npm</b>as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnpm install -g @angular/cli@^8.0.0\r\n</pre>\r\n<p>To verify <b>Angular 8</b> is properly installed on your machine, type the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng version\r\n</pre>\r\n<p>You could see the following response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nAngular CLI: 8.3.26 \r\nNode: 14.2.0 \r\nOS: win32 x64 \r\nAngular: ... \r\nPackage                    Version \r\n------------------------------------------------------\r\n@angular-devkit/architect  0.803.26 \r\n@angular-devkit/core       8.3.26 \r\n@angular-devkit/schematics 8.3.26 \r\n@schematics/angular        8.3.26 \r\n@schematics/update         0.803.26 \r\nrxjs                       6.4.0\r\n</pre>\r\n<h1>Angular 8 - Creating First Application</h1>\r\n<p>Let us create a simple angular application and analyse the structure of the basic angular application.</p>\r\n<p>Let us check whether the Angular Framework is installed in our system and the version of the installed Angular version using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng --version\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>ng</b> is the CLI application used to create, manage and run Angular Application. It written in JavaScript and runs in NodeJS environment.</p>\r\n<p>The result will show the details of the Angular version as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nAngular CLI: 8.3.26 \r\nNode: 14.2.0 \r\nOS: win32 x64 \r\nAngular: ... \r\nPackage                    Version \r\n------------------------------------------------------\r\n@angular-devkit/architect  0.803.26 \r\n@angular-devkit/core       8.3.26 \r\n@angular-devkit/schematics 8.3.26 \r\n@schematics/angular        8.3.26 \r\n@schematics/update         0.803.26 \r\nrxjs                       6.4.0\r\n</pre>\r\n<p>So, Angular is installed in our system and the version is <b>8.3.26</b>.</p>\r\n<p>Let us create an Angular application to check our day to day expenses. Let us give <b>ExpenseManager</b>as our choice for our new application. Use below command to create the new application.</p>\r\n<pre class=\"result notranslate\">\r\ncd /path/to/workspace \r\nng new expense-manager\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>new</b> is one of the command of the <b>ng</b> CLI application. It will be used to create new application. It will ask some basic question in order to create new application. It is enough to let the application choose the default choices. Regarding routing question as mentioned below, specify <b>No</b>. We will see how to create routing later in the <b>Routing</b> chapter.</p>\r\n<pre class=\"result notranslate\">\r\nWould you like to add Angular routing? No\r\n</pre>\r\n<p>Once the basic questions are answered, the <b>ng </b>CLI application create a new Angular application under <b>expense-manager</b> folder.</p>\r\n<p>Let us move into the our newly created application folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd expense-manager\r\n</pre>\r\n<p>Let us check the partial structure of the application. The structure of the application is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n| favicon.ico \r\n| index.html \r\n| main.ts \r\n| polyfills.ts \r\n| styles.css \r\n| \r\n+---app \r\n|  app.component.css \r\n|  app.component.html \r\n|  app.component.spec.ts \r\n|  app.component.ts \r\n|  app.module.ts \r\n| \r\n+---assets \r\n|  .gitkeep \r\n| \r\n+---environments \r\n   environment.prod.ts \r\n   environment.ts\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>We have shown, only the most important file and folder of the application.</p></li>\r\n<li><p><b>favicon.ico</b> and <b>assets</b> are application’s icon and application’s root asset folder.</p></li>\r\n<li><p><b>polyfills.ts</b> contains standard code useful for browser compatibility.</p></li>\r\n<li><p><b>environments</b> folder will have the application’s setting. It includes production and development setup.</p></li>\r\n<li><p><b>main.ts</b> file contains the startup code.</p></li>\r\n<li><p><b>index.html</b> is the application base HTML code.</p></li>\r\n<li><p><b>styles.css</b> is the base CSS code.</p></li>\r\n<li><p><b>app folder</b> contains the Angular application code, which will be learn elaborately in the upcoming chapters.</p></li>\r\n</ul>\r\n<p>Let us start the application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n10% building 3/3 modules 0 activei wds: Project is running at http://localhost:4200/webpack-dev-server/\r\ni wds: webpack output is served from /\r\n\r\ni wds: 404s will fallback to //index.html \r\nchunk {main} main.js, main.js.map (main) 49.2 kB [initial] [rendered] \r\nchunk {polyfills} polyfills.js, polyfills.js.map (polyfills) 269 kB [initial] [rendered] \r\nchunk {runtime} runtime.js, runtime.js.map (runtime) 6.15 kB [entry] [rendered] \r\nchunk {styles} styles.js, styles.js.map (styles) 9.75 kB [initial] [rendered] \r\nchunk {vendor} vendor.js, vendor.js.map (vendor) 3.81 MB [initial] [rendered] \r\nDate: 2020-05-26T05:02:14.134Z - Hash: 0dec2ff62a4247d58fe2 - Time: 12330ms \r\n** Angular Live Development Server is listening on localhost:4200, open your \r\nbrowser on http://localhost:4200/ ** \r\ni wdm: Compiled successfully.\r\n</pre>\r\n<p>Here, <b>serve</b> is the sub command used to compile and run the Angular application using a local development web server. <b>ng server</b> will start a development web server and serves the application under port, 4200.</p>\r\n<p>Let us fire up a browser and opens http://localhost:4200. The browser will show the application as shown below &minus;</p>\r\n<!--<img src=\"images/browser_application.jpg\" alt=\"Browser Application\" />-->\r\n<p>Let us change the title of the application to better reflect our application. Open <b>src/app/app.component.ts</b> and change the code as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nexport class AppComponent { \r\n   title = 'Expense Manager'; \r\n}\r\n</pre>\r\n<p>Our final application will be rendered in the browser as shown below &minus;</p>\r\n<!--<img src=\"images/browser_application.jpg\" alt=\"Browser Application\" />-->\r\n<p>We will change the application and learn how to code an Angular application in the upcoming chapters.</p>\r\n<h1>Angular 8 - Architecture</h1>\r\n<p>Let us see the architecture of the Angular framework in this chapter.</p>\r\n<p>Angular framework is based on four core concepts and they are as follows &minus;</p>\r\n<ul class=\"list\">\r\n<li>Components.</li>\r\n<li>Templates with <b>Data binding</b> and <b>Directives</b>.</li>\r\n<li>Modules.</li>\r\n<li>Services and dependency injection.</li>\r\n</ul>\r\n<h2>Component</h2>\r\n<p>The core of the Angular framework architecture is <b>Angular Component</b>. Angular Component is the building block of every Angular application. Every angular application is made up of one more <b>Angular Component</b>. It is basically a plain JavaScript / Typescript class along with a HTML template and an associated name.</p>\r\n<p>The HTML template can access the data from its corresponding JavaScript / Typescript class. Component’s HTML template may include other component using its selector’s value (name). The Angular Component may have an optional CSS Styles associated it and the HTML template may access the CSS Styles as well.</p>\r\n<!--<img src=\"images/component.jpg\" alt=\"Component\" />-->\r\n<p>Let us analyse the <b>AppComponent</b> component in our <b>ExpenseManager</b> application. The <b>AppComponent</b> code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/app.component.ts \r\nimport { Component } from '@angular/core'; @Component({ \r\n   selector: 'app-root', \r\n   templateUrl: './app.component.html', \r\n   styleUrls: ['./app.component.css'] \r\n}) \r\nexport class AppComponent { \r\n   title = 'Expense Manager'; \r\n}\r\n</pre>\r\n<p><b>@Component</b> is a decorator and it is used to convert a normal Typescript class to <b>Angular Component</b>.</p>\r\n<p><b>app-root</b> is the selector / name of the component and it is specified using <b>selector</b> meta data of the component’s decorator. <b>app-root</b> can be used by application root document, <b>src/index.html</b> as specified below</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!doctype html&gt; \r\n&lt;html lang=\"en\"&gt; \r\n   &lt;head&gt; \r\n      &lt;meta charset=\"utf-8\"&gt; \r\n      &lt;title&gt;ExpenseManager&lt;/title&gt; \r\n      &lt;base href=\"/\"&gt; \r\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; \r\n      &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt; \r\n   &lt;/head&gt; \r\n   &lt;body&gt; \r\n      &lt;app-root&gt;&lt;/app-root&gt; \r\n   &lt;/body&gt; \r\n&lt;/html&gt;\r\n</pre>\r\n<p><b>app.component.html</b> is the HTML template document associated with the component. The component template is specified using <b>templateUrl</b> meta data of the <b>@Component</b> decorator.</p>\r\n<p><b>app.component.css</b> is the CSS style document associated with the component. The component style is specified using <b>styleUrls</b> meta data of the <b>@Component</b> decorator.</p>\r\n<p><b>AppComponent</b> property (title) can be used in the HTML template as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n{{ title }}\r\n</pre>\r\n<h2>Template</h2>\r\n<p>Template is basically a super set of HTML. Template includes all the features of HTML and provides additional functionality to bind the component data into the HTML and to dynamically generate HTML DOM elements.</p>\r\n<p>The core concept of the template can be categorised into two items and they are as follows &minus;</p>\r\n<h3>Data binding</h3>\r\n<p>Used to bind the data from the component to the template.</p>\r\n<pre class=\"result notranslate\">\r\n{{ title }}\r\n</pre>\r\n<p>Here, <b>title</b> is a property in <b>AppComponent</b> and it is bind to template using <b>Interpolation</b>.</p>\r\n<h3>Directives</h3>\r\n<p>Used to include logic as well as enable creation of complex HTML DOM elements.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p *ngIf=\"canShow\"&gt;\r\n   This sectiom will be shown only when the *canShow* propery's value in the corresponding component is *true* &lt;/p&gt; \r\n&lt;p [showToolTip]='tips' /&gt;\r\n</pre>\r\n<p>Here, <b>ngIf</b> and <b>showToolTip</b> (just an example) are directives. <b>ngIf</b> create the paragraph DOM element only when <b>canShow</b> is true. Similarly, <b>showToolTip</b> is <b>Attribute Directives</b>, which adds the tooltip functionality to the paragraph element.</p>\r\n<p>When user mouse over the paragraph, a tooltip with be shown. The content of the tooltip comes from tips property of its corresponding component.</p>\r\n<h2>Modules</h2>\r\n<p><b>Angular Module</b> is basically a collection of related features / functionality. <b>Angular Module</b> groups multiple components and services under a single context.</p>\r\n<p>For example, animations related functionality can be grouped into single module and Angular already provides a module for the animation related functionality, <b>BrowserAnimationModule</b> module.</p>\r\n<p>An Angular application can have any number of modules but only one module can be set as root module, which will bootstrap the application and then call other modules as and when necessary. A module can be configured to access functionality from other module as well. In short, components from any modules can access component and services from any other modules.</p>\r\n<p>Following diagram depicts the interaction between modules and its components.</p>\r\n<!--<img src=\"images/module.jpg\" alt=\"Module\" />-->\r\n<p>Let us check the root module of our <b>Expense Manager</b> application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserModule } from '@angular/platform-browser'; \r\nimport { NgModule } from '@angular/core'; \r\nimport { AppComponent } from './app.component'; @NgModule({ \r\n   declarations: [ \r\n      AppComponent \r\n   ], \r\n   imports: [ \r\n      BrowserModule \r\n   ], \r\n   providers: [], \r\n   bootstrap: [AppComponent] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>NgModule</b> decorator is used to convert a plain Typescript / JavaScript class into <b>Angular module</b>.</p></li>\r\n<li><p><b>declarations</b> option is used to include components into the <b>AppModule</b>module.</p></li>\r\n<li><p><b>bootstrap</b> option is used to set the root component of the <b>AppModule</b>module.</p></li>\r\n<li><p><b>providers</b> option is used to include the services for the <b>AppModule</b>module.</p></li>\r\n<li><p><b>imports</b> option is used to import other modules into the <b>AppModule</b>module.</p></li>\r\n</ul>\r\n<p>The following diagram depicts the relationship between Module, Component and Services</p>\r\n<h2>Services</h2>\r\n<p><b>Services</b> are plain Typescript / JavaScript class providing a very specific functionality. <b>Services</b> will do a single task and do it best. The main purpose of the service is reusability. Instead of writing a functionality inside a component, separating it into a service will make it useable in other component as well.</p>\r\n<p>Also, <b>Services</b> enables the developer to organise the business logic of the application. Basically, component uses services to do its own job. <b>Dependency Injection</b> is used to properly initialise the service in the component so that the component can access the services as and when necessary without any setup.</p>\r\n<h2>Workflow of Angular application</h2>\r\n<p>We have learned the core concepts of Angular application. Let us see the complete flow of a typical Angular application.</p>\r\n<!--<img src=\"images/angular_application.jpg\" alt=\"Angular application\" />-->\r\n<p><b>src/main.ts</b> is the entry point of Angular application.</p>\r\n<p>src/main.ts bootstraps the AppModule (src/app.module.ts), which is the root module for every Angular application.</p>\r\n<pre class=\"result notranslate\">\r\nplatformBrowserDynamic().bootstrapModule(AppModule) .catch(err =&gt; console.error(err));\r\n</pre>\r\n<p><b>AppModule</b> bootstraps the <b>AppComponent</b> (src/app.component.ts), which is the root component of every Angular application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@NgModule({ \r\n   declarations: [ \r\n      AppComponent \r\n   ], \r\n      imports: [ \r\n   BrowserModule \r\n   ], \r\n   providers: [], \r\n   bootstrap: [AppComponent] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>AppModule</b> loads modules through <b>imports</b> option.</p>\r\n<p><b>AppModule</b> also loads all the registered service using <b>Dependency Injection (DI)</b> framework.</p>\r\n<p><b>AppComponent</b> renders its template <b>(src/app.component.html)</b> and uses the corresponding styles <b>(src/app.component.css). AppComponent</b> name, <b>app-root</b> is used to place it inside the <b>src/index.html</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!doctype html&gt; \r\n&lt;html lang=\"en\"&gt; \r\n   &lt;head&gt; \r\n      &lt;meta charset=\"utf-8\"&gt; \r\n      &lt;title&gt;ExpenseManager&lt;/title&gt; \r\n      &lt;base href=\"/\"&gt; \r\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; \r\n      &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt; \r\n   &lt;/head&gt; \r\n   &lt;body&gt; \r\n      &lt;app-root&gt;&lt;/app-root&gt; \r\n   &lt;/body&gt; \r\n&lt;/html&gt;\r\n</pre>\r\n<p><b>AppComponent</b> can use any other components registered in the application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@NgModule({ \r\n   declarations: [ \r\n      AppComponent \r\n      AnyOtherComponent\r\n   ], \r\n   imports: [ \r\n      BrowserModule \r\n   ], \r\n   providers: [], \r\n   bootstrap: [AppComponent] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p>Component use other component through directive in its template using target component’s selector name.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;component-selector-name&gt;&lt;/component-selector-name&gt;\r\n</pre>\r\n<p>Also, all registered services are accessible to all Angular components through <b>Dependency Injection (DI)</b> framework.</p>\r\n<h1>Angular 8 - Angular Components and Templates</h1>\r\n<p>As we learned earlier, <b>Components</b> are building block of Angular application. The main job of Angular Component is to generate a section of web page called <b>view</b>. Every component will have an associated template and it will be used to generate views.</p>\r\n<p>Let us learn the basic concept of component and template in this chapter.</p>\r\n<h2>Add a component</h2>\r\n<p>Let us create a new component in our <b>ExpenseManager</b> application.</p>\r\n<p>Open command prompt and go to <b>ExpenseManager</b> application.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Create a new component using <b>ng generate component</b> command as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component expense-entry\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry/expense-entry.component.html (28 bytes) \r\nCREATE src/app/expense-entry/expense-entry.component.spec.ts (671 bytes) \r\nCREATE src/app/expense-entry/expense-entry.component.ts (296 bytes) \r\nCREATE src/app/expense-entry/expense-entry.component.css (0 bytes) \r\nUPDATE src/app/app.module.ts (431 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><b>ExpenseEntryComponent</b> is created under src/app/expense-entry folder.</li>\r\n<li>Component class, Template and stylesheet are created.</li>\r\n<li>AppModule is updated with new component.</li>\r\n</ul>\r\n<p>Add title property to <b>ExpenseEntryComponent</b> (src/app/expense-entry/expense-entry.component.ts) component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-expense-entry', \r\n   templateUrl: './expense-entry.component.html', styleUrls: ['./expense-entry.component.css'] \r\n}) \r\nexport class ExpenseEntryComponent implements OnInit {\r\n   title: string;\r\n   constructor() { } \r\n   ngOnInit() { \r\n      this.title = \"Expense Entry\" \r\n   } \r\n}\r\n</pre>\r\n<p>Update template, <b>src/app/expense-entry/expense-entry.component.html</b>with below content.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p&gt;{{ title }}&lt;/p&gt;\r\n</pre>\r\n<p>Open <b>src/app/app.component.html</b> and include newly created component.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;app-expense-entry&gt;&lt;/app-expense-entry&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>app-expense-entry</b> is the selector value and it can be used as regular HTML Tag.</p>\r\n<p>Finally, the output of the application is as shown below &minus;</p>\r\n<!--<img src=\"images/html_tag.jpg\" alt=\"HTML Tag\" />-->\r\n<p>We will update the content of the component during the course of learning more about templates.</p>\r\n<h2>Templates</h2>\r\n<p>The integral part of Angular component is <b>Template</b>. It is used to generate the HTML content. <b>Templates</b> are plain HTML with additional functionality.</p>\r\n<h3>Attach a template</h3>\r\n<p><b>Template</b> can be attached to Angular component using <b>@component</b> decorator’s meta data. Angular provides two meta data to attach template to components.</p>\r\n<p><b>templateUrl</b></p>\r\n<p>We already know how to use templateUrl. It expects the relative path of the template file. For example, AppComponent set its template as app.component.html.</p>\r\n<pre class=\"result notranslate\">\r\ntemplateUrl: './app.component.html',\r\n</pre>\r\n<p><b>template</b></p>\r\n<p><b>template</b> enables to place the HTML string inside the component itself. If the template content is minimal, then it will be easy to have it <b>Component</b> class itself for easy tracking and maintenance purpose.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@Component({ \r\n   selector: 'app-root', \r\n   templateUrl: `&lt;h1&gt;{{ title }}&lt;/h1&gt;`, \r\n   styleUrls: ['./app.component.css'] \r\n}) \r\nexport class AppComponent implements OnInit { \r\n   title = 'Expense Manager'; \r\n   constructor(private debugService : DebugService) {} ngOnInit() { \r\n      this.debugService.info(\"Angular Application starts\"); \r\n   } \r\n}\r\n</pre>\r\n<h3>Attach Stylesheet</h3>\r\n<p>Angular Templates can use CSS styles similar to HTML. Template gets its style information from two sources, a) from its component b) from application configuration.</p>\r\n<p><b>Component configuration</b></p>\r\n<p><b>Component</b> decorator provides two option, <b>styles</b> and <b>styleUrls</b> to provide CSS style information to its template.</p>\r\n<ul class=\"list\">\r\n<li>Styles &minus; <b>styles</b> option is used to place the CSS inside the component itself.</li>\r\n</ul>\r\n<pre class=\"result notranslate\">\r\nstyles: ['h1 { color: '#ff0000'; }']\r\n</pre>\r\n<ul class=\"list\">\r\n<li>styleUrls &minus; <b>styleUrls</b> is used to refer external CSS stylesheet. We can use multiple stylesheet as well.</li>\r\n</ul>\r\n<pre class=\"result notranslate\">\r\nstyleUrls: ['./app.component.css', './custom_style.css']\r\n</pre>\r\n<h3>Application configuration</h3>\r\n<p>Angular provides an option in project configuration <b>(angular.json)</b> to specify the CSS stylesheets. The styles specified in <b>angular.json</b> will be applicable for all templates. Let us check our <b>angular.json</b> as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{\r\n\"projects\": { \r\n   \"expense-manager\": { \r\n      \"architect\": { \r\n         \"build\": { \r\n            \"builder\": \"@angular-devkit/build-angular:browser\", \"options\": { \r\n               \"outputPath\": \"dist/expense-manager\", \r\n               \"index\": \"src/index.html\", \r\n               \"main\": \"src/main.ts\", \r\n               \"polyfills\": \"src/polyfills.ts\", \r\n               \"tsConfig\": \"tsconfig.app.json\", \r\n               \"aot\": false, \r\n               \"assets\": [ \r\n                  \"src/favicon.ico\", \r\n                  \"src/assets\" \r\n               ], \r\n               \"styles\": [ \r\n                  \"src/styles.css\" \r\n               ], \r\n               \"scripts\": [] \r\n            }, \r\n         }, \r\n      } \r\n   }}, \r\n   \"defaultProject\": \"expense-manager\" \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>styles</b> option sets<b>src/styles.css</b> as global CSS stylesheet. We can include any number of CSS stylesheets as it supports multiple values.</p>\r\n<h2>Include bootstrap</h2>\r\n<p>Let us include bootstrap into our <b>ExpenseManager</b> application using <b>styles</b> option and change the default template to use bootstrap components.</p>\r\n<p>Open command prompt and go to ExpenseManager application.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Install <b>bootstrap</b> and <b>JQuery</b> library using below commands</p>\r\n<pre class=\"result notranslate\">\r\nnpm install --save bootstrap@4.5.0 jquery@3.5.1\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have installed JQuery, because, bootstrap uses jquery extensively for advanced components.</p>\r\n<p>Option <b>angular.json</b> and set bootstrap and jquery library path.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{ \r\n   \"projects\": { \r\n      \"expense-manager\": { \r\n         \"architect\": { \r\n            \"build\": {\r\n               \"builder\":\"@angular-devkit/build-angular:browser\", \"options\": { \r\n                  \"outputPath\": \"dist/expense-manager\", \r\n                  \"index\": \"src/index.html\", \r\n                  \"main\": \"src/main.ts\", \r\n                  \"polyfills\": \"src/polyfills.ts\", \r\n                  \"tsConfig\": \"tsconfig.app.json\", \r\n                  \"aot\": false, \r\n                  \"assets\": [ \r\n                     \"src/favicon.ico\", \r\n                     \"src/assets\" \r\n                  ], \r\n                  \"styles\": [ \r\n                     \"./node_modules/bootstrap/dist/css/bootstrap.css\", \"src/styles.css\" \r\n                  ], \r\n                  \"scripts\": [ \r\n                     \"./node_modules/jquery/dist/jquery.js\", \"./node_modules/bootstrap/dist/js/bootstrap.js\" \r\n                  ] \r\n               }, \r\n            }, \r\n         } \r\n   }}, \r\n   \"defaultProject\": \"expense-manager\" \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>scripts</b> option is used to include JavaScript library. <b>JavaScript</b> registered through <b>scripts</b> will be available to all Angular components in the application.</p>\r\n<p>Open <b>app.component.html</b> and change the content as specified below</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt; \r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt; \r\n   &lt;div class=\"container\"&gt; \r\n      &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; \r\n         &lt;span class=\"navbar-toggler-icon\"&gt;\r\n         &lt;/span&gt; \r\n      &lt;/button&gt; \r\n      &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt; \r\n         &lt;ul class=\"navbar-nav ml-auto\"&gt; \r\n            &lt;li class=\"nav-item active\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n               &lt;span class=\"sr-only\"&gt;(current)\r\n               &lt;/span&gt;\r\n            &lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Report&lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt; \r\n            &lt;/li&gt; \r\n         &lt;/ul&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/nav&gt; \r\n&lt;app-expense-entry&gt;&lt;/app-expense-entry&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Used bootstrap navigation and containers.</p>\r\n<p>Open <b>src/app/expense-entry/expense-entry.component.html</b> and place below content.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt; \r\n&lt;div class=\"container\"&gt; \r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt; \r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n            &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; {{ title }} \r\n            &lt;/div&gt; \r\n            &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n               &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n            &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;  \r\n            &lt;strong&gt;&lt;em&gt;Item:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Pizza \r\n         &lt;/div&gt;\r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n            &lt;strong&gt;&lt;em&gt;Amount:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            20 \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Category:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Food \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Location:&lt;/em&gt;&lt;/strong&gt;\r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Zomato \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Spend On:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            June 20, 2020 \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Restart the application.</p>\r\n<p>The output of the application is as follows &minus;</p>\r\n<!--<img src=\"images/restart_tag.jpg\" alt=\"Restart Tag\" />-->\r\n<p>We will improve the application to handle dynamic expense entry in next chapter.</p>\r\n<h1>Angular 8 - Data Binding</h1>\r\n<p>Data binding deals with how to bind your data from component to HTML DOM elements (Templates). We can easily interact with application without worrying about how to insert your data. We can make connections in two different ways one way and two-way binding.</p>\r\n<p>Before moving to this topic, let’s create a component in Angular 8.</p>\r\n<p>Open command prompt and create new Angular application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/workspace \r\nng new databind-app \r\ncd databind-app\r\n</pre>\r\n<p>Create a <b>test</b> component using Angular CLI as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component test\r\n</pre>\r\n<p>The above create a new component and the output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/test/test.component.scss (0 bytes) CREATE src/app/test/test.component.html (19 bytes) CREATE src/app/test/test.component.spec.ts (614 bytes) \r\nCREATE src/app/test/test.component.ts (262 bytes) UPDATE src/app/app.module.ts (545 bytes)\r\n</pre>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<h2>One-way data binding</h2>\r\n<p><b>One-way data binding</b> is a one-way interaction between component and its template. If you perform any changes in your component, then it will reflect the HTML elements. It supports the following types &minus;</p>\r\n<h3>String interpolation</h3>\r\n<p>In general, <b>String interpolation</b> is the process of formatting or manipulating strings. In Angular, <b>Interpolation</b> is used to display data from component to view (DOM). It is denoted by the expression of {{ }} and also known as mustache syntax.</p>\r\n<p>Let’s create a simple string property in component and bind the data to view.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent implements OnInit { \r\n   appName = \"My first app in Angular 8\"; \r\n}\r\n</pre>\r\n<p>Move to test.component.html file and add the below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h1&gt;{{appName}}&lt;/h1&gt;\r\n</pre>\r\n<p>Add the test component in your <b>app.component.html</b> file by replacing the existing content as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;app-test&gt;&lt;/app-test&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>You could see the following output on your screen &minus;</p>\r\n<!--<img src=\"images/string_interpolation.jpg\" alt=\"String interpolation\" />-->\r\n<h2>Event binding</h2>\r\n<p>Events are actions like mouse click, double click, hover or any keyboard and mouse actions. If a user interacts with an application and performs some actions, then event will be raised. It is denoted by either parenthesis <b>()</b> or <b>on-</b>. We have different ways to bind an event to DOM element. Let’s understand one by one in brief.</p>\r\n<h3>Component to view binding</h3>\r\n<p>Let’s understand how simple button click even handling works.</p>\r\n<p>Add the following code in <b>test.component.ts</b>file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class TestComponent { \r\n   showData($event: any){ \r\n      console.log(\"button is clicked!\"); if($event) { \r\n         console.log($event.target); \r\n         console.log($event.target.value); \r\n      } \r\n   } \r\n}\r\n</pre>\r\n<p>$event\\ast\\:refersthefiredevent\\cdot\\:Inthisscenario\\:,\\ast\\:click \\ast\\:istheevent\\cdot\\ast$event has all the information about event and the target element. Here, the target is button. $event.target property will have the target information.</p>\r\n<p>We have two approaches to call the component method to view <b>(test.component.html)</b>. First one is defined below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h2&gt;Event Binding&lt;/h2&gt; \r\n&lt;button (click)=\"showData($event)\"&gt;Click here&lt;/button&gt;\r\n</pre>\r\n<p>Alternatively, you can use <b>prefix - on</b> using canonical form as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;button on-click = \"showData()\"&gt;Click here&lt;/button&gt;\r\n</pre>\r\n<p>Here, we have not used <b>$event</b> as it is optional.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/canonical.jpg\" alt=\"canonical\" />-->\r\n<p>Here, when the user clicks on the button, event binding understands to button click action and call component showData() method so we can conclude it is one-way binding.</p>\r\n<h2>Property binding</h2>\r\n<p><b>Property binding</b> is used to bind the data from property of a component to DOM elements. It is denoted by <b>[]</b>.</p>\r\n<p>Let’s understand with a simple example.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent { \r\n   userName:string = \"Peter\"; \r\n}\r\n</pre>\r\n<p>Add the below changes in view test.component.html,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;input type=\"text\" [value]=\"userName\"&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>userName</b> property is bind to an attribute of a DOM element <b>&lt;input&gt;</b> tag.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<!--<img src=\"images/property_binding.jpg\" alt=\"Property binding\" />-->\r\n<h2>Attribute binding</h2>\r\n<p><b>Attribute binding</b> is used to bind the data from component to HTML attributes. The syntax is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [attr.ATTR]=\"Component data\"&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;td [attr.colspan]=\"columnSpan\"&gt; ... &lt;/td&gt;\r\n</pre>\r\n<p>Let’s understand with a simple example.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent { \r\n   userName:string = \"Peter\"; \r\n}\r\n</pre>\r\n<p>Add the below changes in view <b>test.component.html,</b></p>\r\n<pre class=\"result notranslate\">\r\n&lt;input type=\"text\" [value]=\"userName\"&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>userName property is bind to an attribute of a DOM element &lt;input&gt; tag.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<!--<img src=\"images/attribute_binding.jpg\" alt=\"Attribute binding\" />-->\r\n<h2>Class binding</h2>\r\n<p><b>Class binding</b> is used to bind the data from component to HTML class property. The syntax is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [class]=\"component variable holding class name\"&gt;\r\n</pre>\r\n<p><b>Class Binding</b> provides additional functionality. If the component data is boolean, then the class will bind only when it is true. Multiple class can be provided by string (“foo bar”) as well as Array of string. Many more options are available.</p>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [class]=\"myClasses\"&gt;\r\n</pre>\r\n<p>Let’s understand with a simple example.</p>\r\n<p>Add the below code in test.component.ts file,</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent { \r\n   myCSSClass = \"red\"; \r\n   applyCSSClass = false; \r\n}\r\n</pre>\r\n<p>Add the below changes in view <b>test.component.html</b>.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [class]=\"myCSSClass\"&gt;This paragraph class comes from *myClass* property &lt;/p&gt; \r\n&lt;p [class.blue]=\"applyCSSClass\"&gt;This paragraph class does not apply&lt;/p&gt;\r\n</pre>\r\n<p>Add the below content in test.component.css.</p>\r\n<pre class=\"result notranslate\">\r\n.red { \r\n   color: red; \r\n} \r\n.blue { \r\n   color: blue; \r\n}\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>The final output will be as shown below &minus;</p>\r\n<!--<img src=\"images/class_binding.jpg\" alt=\"Class binding\" />-->\r\n<h2>Style binding</h2>\r\n<p><b>Style binding</b> is used to bind the data from component into HTML style property. The syntax is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [style.STYLE]=\"component data\"&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [style.color]=\"myParaColor\"&gt; ... &lt;/p&gt;\r\n</pre>\r\n<p>Let’s understand with a simple example.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"result notranslate\">\r\nmyColor = 'brown';\r\n</pre>\r\n<p>Add the below changes in view <b>test.component.html</b>.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [style.color]=\"myColor\"&gt;Text color is styled using style binding&lt;/p&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>The final output will be as shown below &minus;</p>\r\n<!--<img src=\"images/style_binding.jpg\" alt=\"Style binding\" />-->\r\n<h2>Two-way data binding</h2>\r\n<p><b>Two-way data binding</b> is a two-way interaction, data flows in both ways (from component to views and views to component). Simple example is <b>ngModel</b>. If you do any changes in your property (or model) then, it reflects in your view and vice versa. It is the combination of property and event binding.</p>\r\n<h3>NgModel</h3>\r\n<p><b>NgModel</b> is a standalone directive. <b>ngModel</b> directive binds form control to property and property to form control. The syntax of <b>ngModel</b> is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTML [(ngModel)]=\"model.name\" /&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;input type=\"text\" [(ngModel)]=\"model.name\" /&gt;\r\n</pre>\r\n<p>Let’s try to use <b>ngModel</b> in our test application.</p>\r\n<p>Configure <b>FormsModule</b> in <b>AppModule</b> (src/app/app.module.ts)</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { FormsModule } from '@angular/forms'; @NgModule({ \r\n   imports: [ \r\n      BrowserModule, \r\n      FormsModule\r\n   ] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p><b>FormModule</b> do the necessary setup to enable two-way data binding.</p>\r\n<p>Update <b>TestComponent</b> view <b>(test.component.html)</b> as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;input type=\"text\" [(ngModel)]=\"userName\" /&gt;\r\n&lt;p&gt;Two way binding! Hello {{ userName }}!&lt;/p&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Property is bind to form control <b>ngModel</b>directive and if you enter any text in the textbox, it will bind to the property. After running your application, you could see the below changes &minus;</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/way_data_binding.jpg\" alt=\"Way Data binding\" />-->\r\n<p>Now, try to change the input value to <b>Jack</b>. As you type, the text below the input gets changed and the final output will be as shown below &minus;</p>\r\n<!--<img src=\"images/two_way_data_binding.jpg\" alt=\"Two Way Data binding\" />-->\r\n<p>We will learn more about form controls in the upcoming chapters.</p>\r\n<h3>Working example</h3>\r\n<p>Let us implement all the concept learned in this chapter in our <b>ExpenseManager</b> application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Create ExpenseEntry interface (src/app/expense-entry.ts) and add id, amount, category, Location, spendOn and createdOn.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport interface ExpenseEntry { \r\n   id: number; \r\n   item: string; \r\n   amount: number; \r\n   category: string; \r\n   location: string; \r\n   spendOn: Date; \r\n   createdOn: Date; \r\n}\r\n</pre>\r\n<p>Import <b>ExpenseEntry</b> into <b>ExpenseEntryComponent</b>.</p>\r\n<pre class=\"result notranslate\">\r\nimport { ExpenseEntry } from '../expense-entry';\r\n</pre>\r\n<p>Create a <b>ExpenseEntry</b> object, <b>expenseEntry</b> as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class ExpenseEntryComponent implements OnInit { \r\n   title: string; \r\n   expenseEntry: ExpenseEntry; \r\n   constructor() { } \r\n   ngOnInit() { \r\n      this.title = \"Expense Entry\"; \r\n      this.expenseEntry = { \r\n         id: 1, \r\n         item: \"Pizza\", \r\n         amount: 21, \r\n         category: \"Food\", \r\n         location: \"Zomato\", \r\n         spendOn: new Date(2020, 6, 1, 10, 10, 10), createdOn: new Date(2020, 6, 1, 10, 10, 10), \r\n      }; \r\n   } \r\n}\r\n</pre>\r\n<p>Update the component template using <b>expenseEntry</b> object, <b>src/app/expense-entry/expense-entry.component.html</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt; \r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt; \r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; \r\n                  {{ title }} \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n                  &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;  \r\n                  &lt;strong&gt;&lt;em&gt;Item:&lt;/em&gt;&lt;/strong&gt; \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n                  {{ expenseEntry.item }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n                  &lt;strong&gt;&lt;em&gt;Amount:&lt;/em&gt;&lt;/strong&gt; \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.amount }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n                  &lt;strong&gt;&lt;em&gt;Category:&lt;/em&gt;&lt;/strong&gt; \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n                  {{ expenseEntry.category }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n                  &lt;strong&gt;&lt;em&gt;Location:&lt;/em&gt;&lt;/strong&gt; \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n                  {{ expenseEntry.location }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Spend On:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt; \r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n                  {{ expenseEntry.spendOn }} \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<!--<img src=\"images/ngmodel.jpg\" alt=\"NgModel\" />-->\r\n<h1>Angular 8 - Directives</h1>\r\n<p>Angular 8 directives are DOM elements to interact with your application. Generally, directive is a <b>TypeScript</b> function. When this function executes <b>Angular</b> compiler checked it inside DOM element. Angular directives begin with <b>ng-</b> where <b>ng</b> stands for Angular and extends HTML tags with <b>@directive</b> decorator.</p>\r\n<p>Directives enables logic to be included in the Angular templates. Angular directives can be classified into three categories and they are as follows &minus;</p>\r\n<h3>Attribute directives</h3>\r\n<p>Used to add new attributes for the existing HTML elements to change its look and behaviour.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [attrDirective]='value' /&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [showToolTip]='Tips' /&gt;\r\n</pre>\r\n<p>Here, <b>showToolTip</b> refers an example directive, which when used in a HTML element will show tips while user hovers the HTML element.</p>\r\n<h3>Structural directives</h3>\r\n<p>Used to add or remove DOM elements in the current HTML document.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;HTMLTag [structuralDirective]='value' /&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div *ngIf=\"isNeeded\"&gt; \r\n   Only render if the *isNeeded* value has true value. \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here, <b>ngIf</b> is a built-in directive used to add or remove the HTML element in the current HTML document. Angular provides many built-in directive and we will learn in later chapters.</p>\r\n<h3>Component based directives</h3>\r\n<p>Component can be used as directives. Every component has <b>Input</b> and <b>Output</b> option to pass between component and its parent HTML elements.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;component-selector-name [input-reference]=\"input-value\"&gt; ... &lt;/component-selector-name&gt;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;list-item [items]=\"fruits\"&gt; ... &lt;/list-item&gt;\r\n</pre>\r\n<p>Here, <b>list-item</b> is a component and <b>items</b> is the input option. We will learn how to create component and advanced usages in the later chapters.</p>\r\n<p>Before moving to this topic, let’s create a sample application <b>(directive-app)</b> in Angular 8 to work out the learnings.</p>\r\n<p>Open command prompt and create new Angular application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/workspace \r\nng new directive-app \r\ncd directive-app\r\n</pre>\r\n<p>Create a <b>test</b> component using Angular CLI as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component test\r\n</pre>\r\n<p>The above create a new component and the output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/test/test.component.scss (0 bytes) CREATE src/app/test/test.component.html (19 bytes) CREATE src/app/test/test.component.spec.ts (614 bytes) \r\nCREATE src/app/test/test.component.ts (262 bytes) UPDATE src/app/app.module.ts (545 bytes)\r\n</pre>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<h2>DOM Overview</h2>\r\n<p>Let us have a look at DOM model in brief. DOM is used to define a standard for accessing documents. Generally, HTML DOM model is constructed as a tree of objects. It is a standard object model to access html elements.</p>\r\n<p>We can use DOM model in Angular 8 for the below reasons &minus;</p>\r\n<ul class=\"list\">\r\n<li>We can easily navigate document structures with DOM elements.</li>\r\n<li>We can easily add html elements.</li>\r\n<li>We can easily update elements and its contents.</li>\r\n</ul>\r\n<h2>Structural directives</h2>\r\n<p>Structural directives change the structure of <b>DOM</b> by adding or removing elements. It is denoted by * sign with three pre-defined directives <b>NgIf, NgFor</b> and <b>NgSwitch</b>. Let’s understand one by one in brief.</p>\r\n<h3>NgIf directive</h3>\r\n<p><b>NgIf</b> directive is used to display or hide data in your application based on the condition becomes true or false. We can add this to any tag in your template.</p>\r\n<p>Let us try <b>ngIf</b> directive in our <b>directive-app</b> application.</p>\r\n<p>Add the below tag in <b>test.component.html</b>.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p&gt;test works!&lt;/p&gt; \r\n&lt;div *ngIf=\"true\"&gt;Display data&lt;/div&gt;\r\n</pre>\r\n<p>Add the test component in your <b>app.component.html</b> file as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;app-test&gt;&lt;/app-test&gt;\r\n</pre>\r\n<p>Start your server (if not started already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/ngserve.jpg\" alt=\"NgServe\" />-->\r\n<p>If you set the condition <b>ngIf=“false”</b> then, contents will be hidden.</p>\r\n<h3>ngIfElse directive</h3>\r\n<p><b>ngIfElse</b> is similar to <b>ngIf</b> except, it provides option to render content during failure scenario as well.</p>\r\n<p>Let’s understand how <b>ngIfElse</b> works by doing a sample.</p>\r\n<p>Add the following code in <b>test.component.ts </b>file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class TestComponent implements OnInit { \r\n   isLogIn : boolean = false;\r\n   isLogOut : boolean = true; \r\n}\r\n</pre>\r\n<p>Add the following code in <b>test.component.html</b> file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;p&gt;ngIfElse example!&lt;/p&gt; \r\n&lt;div *ngIf=\"isLogIn; else isLogOut\"&gt; \r\n   Hello you are logged in \r\n&lt;/div&gt;\r\n&lt;ng-template #isLogOut&gt; \r\n   You're logged out.. \r\n&lt;/ng-template&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/ngapplication.jpg\" alt=\"NgApplication\" />-->\r\n<p>Here, <p>isLogOut</p> value is assigned as <b>true</b>, so it goes to <b>else</b> block and renders <b>ng-template</b>. We will learn <b>ng-template</b> later in this chapter.</p>\r\n<h3>ngFor directive</h3>\r\n<p>ngFor is used to repeat a portion of elements from the list of items.</p>\r\n<p>Let’s understand how ngFor works by doing a sample.</p>\r\n<p>Add the list in test.component.ts file as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nlist = [1,2,3,4,5];\r\n</pre>\r\n<p>Add <b>ngFor</b> directive in <b>test.component.html</b> as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h2&gt;ngFor directive&lt;/h2&gt; \r\n&lt;ul&gt; \r\n   &lt;li *ngFor=\"let l of list\"&gt;\r\n      {{l}} \r\n   &lt;/li&gt;\r\n&lt;/ul&gt;\r\n</pre>\r\n<p>Here, the let keyword creates a local variable and it can be referenced anywhere in your template. The let l creates a template local variable to get the list elements.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/ngdirective.jpg\" alt=\"Ngdirective\" />-->\r\n<h3>trackBy</h3>\r\n<p>Sometimes, <b>ngFor</b> performance is low with large lists. For example, when adding new item or remove any item in the list may trigger several DOM manipulations. To iterate over large objects collection, we use <b>trackBy</b>.</p>\r\n<p>It is used to track when elements are added or removed. It is performed by trackBy method. It has two arguments index and element. Index is used to identity each element uniquely. Simple example is defined below.</p>\r\n<p>Let’s understand how trackBy works along with <b>ngFor</b> by doing a sample.</p>\r\n<p>Add the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class TestComponent { \r\n   studentArr: any[] = [ { \r\n      \"id\": 1, \r\n      \"name\": \"student1\" \r\n   }, \r\n   { \r\n      \"id\": 2,\r\n      \"name\": \"student2\" \r\n   }, \r\n   { \r\n      \"id\": 3, \"name\": \"student3\"\r\n   },\r\n   { \r\n      \"id\": 4, \r\n      \"name\": \"student4\" \r\n   } \r\n   ]; \r\n   trackByData(index:number, studentArr:any): number { \r\n      return studentArr.id; \r\n   }\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have created, <p>trackByData()</p> method to access each student element in a unique way based on the id.</p>\r\n<p>Add the below code in <b>test.component.html</b> file to define trackBy method inside ngFor.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;ul&gt; \r\n   &lt;li *ngFor=\"let std of studentArr; trackBy: trackByData\"&gt;\r\n      {{std.name}} \r\n   &lt;/li&gt;\r\n&lt;/ul&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/directive.jpg\" alt=\"Directive\" />-->\r\n<p>Here, the application will print the student names. Now, the application is tracking student objects using the student id instead of object references. So, DOM elements are not affected.</p>\r\n<h3>NgSwitch directive</h3>\r\n<p><b>NgSWitch</b> is used to check multiple conditions and keep the DOM structure as simple and easy to understand.</p>\r\n<p>Let us try <b>ngSwitch</b> directive in our <b>directive-app</b> application.</p>\r\n<p>Add the following code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent implements OnInit {  \r\n   logInName = 'admin'; \r\n}\r\n</pre>\r\n<p>Add the following code in test.component.html file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h2&gt;ngSwitch directive&lt;/h2&gt; \r\n&lt;ul [ngSwitch]=\"logInName\"&gt; \r\n   &lt;li *ngSwitchCase=\"'user'\"&gt; \r\n      &lt;p&gt;User is logged in..&lt;/p&gt; \r\n   &lt;/li&gt; \r\n   &lt;li *ngSwitchCase=\"'admin'\"&gt; \r\n      &lt;p&gt;admin is logged in&lt;/p&gt; \r\n   &lt;/li&gt; \r\n   &lt;li *ngSwitchDefault&gt; \r\n      &lt;p&gt;Please choose login name&lt;/p&gt; \r\n   &lt;/li&gt; \r\n&lt;/ul&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/ngswitch.jpg\" alt=\"NgSwitch\" />-->\r\n<p>Here, we have defined <b>logInName</b> as <b>admin.</b> So, it matches second SwitchCase and prints above admin related message.</p>\r\n<h2>Attribute directives</h2>\r\n<p>Attribute directives performs the appearance or behavior of DOM elements or components. Some of the examples are NgStyle, NgClass and NgModel. Whereas, NgModel is two-way attribute data binding explained in previous chapter.</p>\r\n<h3>ngStyle</h3>\r\n<p><b>ngStyle</b> directive is used to add dynamic styles. Below example is used to apply blue color to the paragraph.</p>\r\n<p>Let us try <b>ngStyle</b> directive in our <b>directive-app</b> application.</p>\r\n<p>Add below content in <b>test.component.html</b> file.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p [ngStyle]=\"{'color': 'blue', 'font-size': '14px'}\"&gt; \r\n   paragraph style is applied using ngStyle \r\n&lt;/p&gt;\r\n</pre>\r\n<p>Start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/ngstyle.jpg\" alt=\"ngStyle\" />-->\r\n<h3>ngClass</h3>\r\n<p><b>ngClass</b> is used to add or remove CSS classes in HTML elements.</p>\r\n<p>Let us try <b>ngClass</b> directive in our <b>directive-app</b> application.</p>\r\n<p>Create a class <b>User</b> using the below command</p>\r\n<pre class=\"result notranslate\">\r\nng g class User\r\n</pre>\r\n<p>You could see the following response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/user.spec.ts (146 bytes) \r\nCREATE src/app/user.ts (22 bytes)\r\n</pre>\r\n<p>Move to <b>src/app/user.ts</b> file and add the below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\nexport class User { \r\n   userId : number; userName : string; \r\n}\r\n</pre>\r\n<p>Here, we have created two property <b>userId</b> and <b>userName</b> in the <b>User</b> class.</p>\r\n<p>Open <b>test.component.ts</b> file and add the below changes &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { User } from '../user'; \r\nexport class TestComponent implements OnInit {  \r\n   users: User[] = [ \r\n      { \r\n         \"userId\": 1, \r\n         \"userName\": 'User1' \r\n      }, \r\n      { \r\n         \"userId\": 2, \r\n         \"userName\": 'User2' \r\n      }, \r\n   ]; \r\n}\r\n</pre>\r\n<p>Here, we have declared a local variable, users and initialise with 2 users object.</p>\r\n<p>Open <b>test.component.css</b> file and add below code</p>\r\n<pre class=\"result notranslate\">\r\n.highlight { \r\n   color: red; \r\n}\r\n</pre>\r\n<p>Open your <b>test.component.html</b> file and add the below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"container\"&gt; \r\n   &lt;br/&gt; \r\n   &lt;div *ngFor=\"let user of users\" [ngClass]=\"{ \r\n      'highlight':user.userName === 'User1' \r\n   }\"&gt; \r\n      {{ user.userName }} \r\n   &lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have applied, <b>ngClass</b> for <b>User1</b> so it will highlight the <b>User1</b>.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/ngclass.jpg\" alt=\"ngClass\" />-->\r\n<h2>Custom directives</h2>\r\n<p>Angular provides option to extend the angular directive with user defined directives and it is called <b>Custom directives</b>. Let us learn how to create custom directive in this chapter.</p>\r\n<p>Let us try to create custom directive in our <b>directive-app</b> application.</p>\r\n<p>Angular CLI provides a below command to create custom directive.</p>\r\n<pre class=\"result notranslate\">\r\nng generate directive customstyle\r\n</pre>\r\n<p>After executing this command, you could see the below response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/customstyle.directive.spec.ts (244 bytes) \r\nCREATE src/app/customstyle.directive.ts (151 bytes) UPDATE src/app/app.module.ts (1115 bytes)\r\n</pre>\r\n<p>Open <b>app.module.ts.</b> The directive will be configured in the <b>AppModule</b> through <b>declarations</b> meta data.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { CustomstyleDirective } from './customstyle.directive'; \r\n@NgModule({ \r\n   declarations: [ \r\n      AppComponent, \r\n      TestComponent, \r\n      CustomstyleDirective \r\n   ] \r\n})\r\n</pre>\r\n<p>Open <b>customstyle.directive.ts</b> file and add the below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Directive, ElementRef } from '@angular/core'; \r\n@Directive({ \r\n   selector: '[appCustomstyle]' \r\n}) \r\nexport class CustomstyleDirective {\r\n   constructor(el: ElementRef) { \r\n      el.nativeElement.style.fontSize = '24px'; \r\n   } \r\n}\r\n</pre>\r\n<p>Here, <b>constructor</b> method gets the element using <b>CustomStyleDirective</b> as <b>el</b>. Then, it accesses el’s style and set its font size as <b>24px</b> using CSS property.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/custom_directives.jpg\" alt=\"Custom directives\" />-->\r\n<h3>ng-template</h3>\r\n<p><b>ng-template</b> is used to create dynamic and reusable templates. It is a virtual element. If you compile your code with <b>ng-template</b> then is converted as comment in DOM.</p>\r\n<p>For example,</p>\r\n<p>Let’s add a below code in <b>test.component.html</b> page.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h3&gt;ng-template&lt;/h3&gt; \r\n&lt;ng-template&gt;ng-template tag is a virtual element&lt;/ng-template&gt;\r\n</pre>\r\n<p>If you run the application, then it will print only <b>h3</b> element. Check your page source, template is displayed in comment section because it is a virtual element so it does not render anything. We need to use <b>ng-template</b> along with Angular directives.</p>\r\n<p>Normally, directive emits the HTML tag it is associated. Sometimes, we don’t want the tag but only the content. For example, in the below example, li will be emitted.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;li *ngFor=\"let item in list\"&gt;{{ item }}&lt;/li&gt;\r\n</pre>\r\n<p>We can use <b>ng-template</b> to safely skip the <b>li</b> tag.</p>\r\n<h3>ng-template with structural directive</h3>\r\n<p><b>ng-template</b> should always be used inside <b>ngIf, ngFor</b> or <b>ngSwitch</b> directives to render the result.</p>\r\n<p>Let’s assume simple code.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;ng-template [ngIf]=true&gt; \r\n   &lt;div&gt;&lt;h2&gt;ng-template works!&lt;/h2&gt;&lt;/div&gt; \r\n&lt;/ng-template&gt;\r\n</pre>\r\n<p>Here, if <b>ngIf</b> condition becomes true, it will print the data inside div element. Similarly, you can use <b>ngFor</b> and <b>ngSwitch</b> directives as well.</p>\r\n<h3>NgForOf directive</h3>\r\n<p><b>ngForOf</b> is also a structural directive used to render an item in a collection. Below example is used to show <b>ngForOf</b> directive inside <b>ng-template</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; \r\n@Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div&gt; \r\n   &lt;ng-template ngFor let-item [ngForOf]=\"Fruits\" let-i=\"index\"&gt; \r\n   &lt;p&gt;{{i}}&lt;/p&gt; \r\n   &lt;/ng-template&gt; \r\n   &lt;/div&gt;` \r\n   , \r\n   styleUrls: ['./test.component.css'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   Fruits = [\"mango\",\"apple\",\"orange\",\"grapes\"]; \r\n   ngOnInit() \r\n   { \r\n   } \r\n}\r\n</pre>\r\n<p>If you run the application, it will show the index of each elements as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n0 \r\n1 \r\n2 \r\n3\r\n</pre>\r\n<h2>Component directives</h2>\r\n<p>Component directives are based on component. Actually, each component can be used as directive. Component provides @Input and @Output decorator to send and receive information between parent and child components.</p>\r\n<p>Let us try use component as directive in our <b>directive-app</b> application.</p>\r\n<p>Create a new <b>ChildComponent</b> using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component child\r\nCREATE src/app/child/child.component.html (20 bytes) CREATE src/app/child/child.component.spec.ts (621 bytes) \r\nCREATE src/app/child/child.component.ts (265 bytes) CREATE src/app/child/child.component.css (0 bytes) UPDATE src/app/app.module.ts (466 bytes)\r\n</pre>\r\n<p>Open <b>child.component.ts</b> and add below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n@Input() userName: string;\r\n</pre>\r\n<p>Here, we are setting a input property for <b>ChildComponent</b>.</p>\r\n<p>Open <b>child.component.html</b> and add below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;p&gt;child works!&lt;/p&gt; \r\n&lt;p&gt;Hi {{ userName }}&lt;/p&gt;\r\n</pre>\r\n<p>Here, we are using the value userName to welcome the user.</p>\r\n<p>Open <b>test.component.ts</b> and add below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\nname: string = 'Peter';\r\n</pre>\r\n<p>Open <b>test.component.html</b> and add below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;h1&gt;Test component&lt;/h1&gt; \r\n&lt;app-child [userName]=\"name\"&gt;&lt;app-child&gt;\r\n</pre>\r\n<p>Here, we are using <b>AppComponent</b> inside the <b>TestComponent</b> as a directive with input property.</p>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<p>[](images/directive-app/component_as_directive.PNG\"</p>\r\n<h3>Working example</h3>\r\n<p>Let us add a new component in our <b>ExpenseManager</b> application to list the expense entries.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Create a new component, <b>ExpenseEntryListComponent</b> using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component ExpenseEntryList\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry-list/expense-entry-list.component.html (33 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.spec.ts (700 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.ts (315 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.css (0 bytes) \r\nUPDATE src/app/app.module.ts (548 bytes)\r\n</pre>\r\n<p>Here, the command creates the ExpenseEntryList Component and update the necessary code in <b>AppModule</b>.</p>\r\n<p>Import <b>ExpenseEntry</b> into <b>ExpenseEntryListComponent</b> component <b>(src/app/expense-entry-list/expense-entry-list.component)</b></p>\r\n<pre class=\"result notranslate\">\r\nimport { ExpenseEntry } from '../expense-entry';\r\n</pre>\r\n<p>Add a method, <b>getExpenseEntries()</b> to return list of expense entry (mock items) in <b>ExpenseEntryListComponent (src/app/expense-entry-list/expense-entry-list.component)</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\ngetExpenseEntries() : ExpenseEntry[] { \r\n   let mockExpenseEntries : ExpenseEntry[] = [ \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"Mcdonald\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1,\r\n         item: \"Pizza\",\r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"Mcdonald\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) \r\n      }, \r\n   ]; \r\n   return mockExpenseEntries; \r\n}\r\n</pre>\r\n<p>Declare a local variable, expenseEntries and load the mock list of expense entries as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ntitle: string; \r\nexpenseEntries: ExpenseEntry[]; \r\nconstructor() { } \r\nngOnInit() { \r\n   this.title = \"Expense Entry List\"; \r\n   this.expenseEntries = this.getExpenseEntries(); \r\n}\r\n</pre>\r\n<p>Open the template file <b>(src/app/expense-entry-list/expense-entry-list.component.html)</b> and show the mock entries in a table.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt; \r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; \r\n                  {{ title }} \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n                  &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n            &lt;table class=\"table table-striped\"&gt; \r\n               &lt;thead&gt; \r\n                  &lt;tr&gt; \r\n                     &lt;th&gt;Item&lt;/th&gt; \r\n                     &lt;th&gt;Amount&lt;/th&gt; \r\n                     &lt;th&gt;Category&lt;/th&gt; \r\n                     &lt;th&gt;Location&lt;/th&gt; \r\n                     &lt;th&gt;Spent On&lt;/th&gt; \r\n                  &lt;/tr&gt; \r\n               &lt;/thead&gt; \r\n               &lt;tbody&gt; \r\n                  &lt;tr *ngFor=\"let entry of expenseEntries\"&gt; \r\n                     &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt; \r\n                     &lt;th&gt;{{ entry.amount }}&lt;/th&gt; \r\n                     &lt;td&gt;{{ entry.category }}&lt;/td&gt; \r\n                     &lt;td&gt;{{ entry.location }}&lt;/td&gt; \r\n                     &lt;td&gt;{{ entry.spendOn | date: 'short' }}&lt;/td&gt; \r\n                  &lt;/tr&gt; \r\n               &lt;/tbody&gt; \r\n            &lt;/table&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Used bootstrap table. <b>table</b> and <b>table-striped</b> will style the table according to Boostrap style standard.</p></li>\r\n<li><p>Used <b>ngFor</b> to loop over the <b>expenseEntries</b> and generate table rows.</p></li>\r\n</ul>\r\n<p>Open <b>AppComponent</b> template, <b>src/app/app.component.html</b> and include <b>ExpenseEntryListComponent</b> and remove <b>ExpenseEntryComponent</b> as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n... \r\n&lt;app-expense-entry-list&gt;&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Finally, the output of the application is as shown below.</p>\r\n<!--<img src=\"images/appcomponent.jpg\" alt=\"AppComponent\" />-->\r\n<h1>Angular 8 - Pipes</h1>\r\n<p>Pipes are referred as filters. It helps to transform data and manage data within interpolation, denoted by {{ | }}. It accepts data, arrays, integers and strings as inputs which are separated by ‘|’ symbol. This chapter explains about pipes in detail.</p>\r\n<h2>Adding parameters</h2>\r\n<p>Create a date method in your <b>test.component.ts </b>file.</p>\r\n<pre class=\"result notranslate\">\r\nexport class TestComponent { \r\n   presentDate = new Date(); \r\n}\r\n</pre>\r\n<p>Now, add the below code in your test.component.html file.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   Today's date :- {{presentDate}} \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Now, run the application, it will show the following output &minus;</p>\r\n<pre class=\"result notranslate\">\r\nToday's date :- Mon Jun 15 2020 10:25:05 GMT+0530 (IST)\r\n</pre>\r\n<p>Here,</p>\r\n<p>Date object is converted into easily readable format.</p>\r\n<h3>Add Date pipe</h3>\r\n<p>Let’s add date pipe in the above html file.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   Today's date :- {{presentDate | date }}\r\n&lt;/div&gt;\r\n</pre>\r\n<p>You could see the below output &minus;</p>\r\n<pre class=\"result notranslate\">\r\nToday's date :- Jun 15, 2020\r\n</pre>\r\n<h3>Parameters in Date</h3>\r\n<p>We can add parameter in pipe using : character. We can show short, full or formatted dates using this parameter. Add the below code in <b>test.component.html</b> file.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   short date :- {{presentDate | date:'shortDate' }} &lt;br/&gt;\r\n   Full date :- {{presentDate | date:'fullDate' }} &lt;br/&gt; \r\n   Formatted date:- {{presentDate | date:'M/dd/yyyy'}} &lt;br/&gt; \r\n   Hours and minutes:- {{presentDate | date:'h:mm'}} \r\n&lt;/div&gt;\r\n</pre>\r\n<p>You could see the below response on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nshort date :- 6/15/20 \r\nFull date :- Monday, June 15, 2020 \r\nFormatted date:- 6/15/2020 \r\nHours and minutes:- 12:00\r\n</pre>\r\n<h2>Chained pipes</h2>\r\n<p>We can combine multiple pipes together. This will be useful when a scenario associates with more than one pipe that has to be applied for data transformation.</p>\r\n<p>In the above example, if you want to show the date with uppercase letters, then we can apply both <b>Date</b> and <b>Uppercase</b> pipes together.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   Date with uppercase :- {{presentDate | date:'fullDate' | uppercase}} &lt;br/&gt;\r\n   Date with lowercase :- {{presentDate | date:'medium' | lowercase}} &lt;br/&gt;  \r\n&lt;/div&gt;\r\n</pre>\r\n<p>You could see the below response on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nDate with uppercase :- MONDAY, JUNE 15, 2020 Date with lowercase :- jun 15, 2020, 12:00:00 am\r\n</pre>\r\n<p>Here,</p>\r\n<p>Date, Uppercase and Lowercase are pre-defined pipes. Let’s understand other types of built-in pipes in next section.</p>\r\n<h2>Built-in Pipes</h2>\r\n<p>Angular 8 supports the following built-in pipes. We will discuss one by one in brief.</p>\r\n<h3>AsyncPipe</h3>\r\n<p>If data comes in the form of observables, then <b>Async pipe</b> subscribes to an observable and returns the transmitted values.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Observable, Observer } from 'rxjs';\r\nexport class TestComponent implements OnInit {\r\n   timeChange = new Observable&ltstring&gt;((observer: Observer&gt;string&gt;) =&gt; {\r\n      setInterval(() =&gt; observer.next(new \r\n      Date().toString()), 1000); \r\n   }); \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p>The <b>Async</b> pipe performs subscription for time changing in every one seconds and returns the result whenever gets passed to it. Main advantage is that, we don’t need to call subscribe on our timeChange and don’t worry about unsubscribe, if the component is removed.</p>\r\n<p>Add the below code inside your test.component.html.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   Seconds changing in Time: {{ timeChange | async }}\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Now, run the application, you could see the seconds changing on your screen.</p>\r\n<h3>CurrencyPipe</h3>\r\n<p>It is used to convert the given number into various countries currency format. Consider the below code in <b>test.component.ts</b> file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;h3&gt; Currency Pipe&lt;/h3&gt; \r\n      &lt;p&gt;{{ price | currency:'EUR':true}}&lt;/p&gt; \r\n      &lt;p&gt;{{ price | currency:'INR' }}&lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   price : number = 20000; ngOnInit() {\r\n\r\n   } \r\n}\r\n</pre>\r\n<p>You could see the following output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCurrency Pipe\r\n\r\n€20,000.00 \r\n₹20,000.00\r\n</pre>\r\n<h3>SlicePipe</h3>\r\n<p>Slice pipe is used to return a slice of an array. It takes index as an argument. If you assign only start index, means it will print till the end of values. If you want to print specific range of values, then we can assign start and end index.</p>\r\n<p>We can also use negative index to access elements. Simple example is shown below &minus;</p>\r\n<p><b>test.component.ts</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div&gt; \r\n      &lt;h3&gt;Start index:- {{Fruits | slice:2}}&lt;/h3&gt; \r\n      &lt;h4&gt;Start and end index:- {{Fruits | slice:1:4}}&lt;/h4&gt; \r\n      &lt;h5&gt;Negative index:- {{Fruits | slice:-2}}&lt;/h5&gt; \r\n      &lt;h6&gt;Negative start and end index:- {{Fruits | slice:-4:-2}}&lt;/h6&gt; \r\n   &lt;/div&gt;\r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   Fruits = [\"Apple\",\"Orange\",\"Grapes\",\"Mango\",\"Kiwi\",\"Pomegranate\"]; \r\n   ngOnInit() {\r\n\r\n   } \r\n}\r\n</pre>\r\n<p>Now run your application and you could see the below output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nStart index:- Grapes,Mango,Kiwi,Pomegranate\r\nStart and end index:- Orange,Grapes,Mango \r\nNegative index:- Kiwi,Pomegranate \r\nNegative start and end index:- Grapes,Mango\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>{{Fruits | slice:2}}</b> means it starts from second index value Grapes to till the end of value.</p></li>\r\n<li><p><b>{{Fruits | slice:1:4}}</b> means starts from 1 to end-1 so the result is one to third index values.</p></li>\r\n<li><p><b>{{Fruits | slice:-2}}</b> means starts from -2 to till end because no end value is specified. Hence the result is Kiwi, Pomegranate.</p></li>\r\n<li><p><b>{{Fruits | slice:-4:-2}}</b> means starts from negative index -4 is Grapes to end-1 which is -3 so the result of index[-4,-3] is Grapes, Mango.</p></li>\r\n</ul>\r\n<h3>DecimalPipe</h3>\r\n<p>It is used to format decimal values. It is also considered as CommonModule. Let’s understand a simple code in <b>test.component.ts</b> file,</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;h3&gt;Decimal Pipe&lt;/h3&gt; \r\n      &lt;p&gt; {{decimalNum1 | number}} &lt;/p&gt; \r\n      &lt;p&gt; {{decimalNum2 | number}} &lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   decimalNum1: number = 8.7589623; \r\n   decimalNum2: number = 5.43; \r\n   ngOnInit() {\r\n\r\n   } \r\n}\r\n</pre>\r\n<p>You could see the below output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nDecimal Pipe \r\n8.759 \r\n5.43\r\n</pre>\r\n<h3>Formatting values</h3>\r\n<p>We can apply string format inside number pattern. It is based on the below format &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnumber:\"{minimumIntegerDigits}.{minimumFractionDigits} - {maximumFractionDigits}\"\r\n</pre>\r\n<p>Let’s apply the above format in our code,</p>\r\n<pre class=\"result notranslate\">\r\n@Component({ \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;p&gt; Apply formatting:- {{decimalNum1 | number:'3.1'}} &lt;/p&gt; \r\n      &lt;p&gt; Apply formatting:- {{decimalNum1 | number:'2.1-4'}} &lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n})\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>{{decimalNum1 | number:’3.1’}}</b> means three decimal place and minimum of one fraction but no constraint about maximum fraction limit. It returns the following output &minus;</p>\r\n<pre class=\"result notranslate\">\r\nApply formatting:- 008.759\r\n</pre>\r\n<p><b>{{decimalNum1 | number:’2.1-4’}}</b> means two decimal places and minimum one and maximum of four fractions allowed so it returns the below output &minus;</p>\r\n<pre class=\"result notranslate\">\r\nApply formatting:- 08.759\r\n</pre>\r\n<h3>PercentPipe</h3>\r\n<p>It is used to format number as percent. Formatting strings are same as DecimalPipe concept. Simple example is shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; \r\n@Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;h3&gt;Decimal Pipe&lt;/h3&gt; \r\n      &lt;p&gt; {{decimalNum1 | percent:'2.2'}} &lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent { \r\n   decimalNum1: number = 0.8178; \r\n}\r\n</pre>\r\n<p>You could see the below output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\nDecimal Pipe \r\n81.78%\r\n</pre>\r\n<h3>JsonPipe</h3>\r\n<p>It is used to transform a JavaScript object into a JSON string. Add the below code in <b>test.component.ts</b> file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; \r\n@Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div style=\"text-align:center\"&gt; \r\n      &lt;p ngNonBindable&gt;{{ jsonData }}&lt;/p&gt; (1) \r\n      &lt;p&gt;{{ jsonData }}&lt;/p&gt; \r\n      &lt;p ngNonBindable&gt;{{ jsonData | json }}&lt;/p&gt; \r\n      &lt;p&gt;{{ jsonData | json }}&lt;/p&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent { \r\n   jsonData = { id: 'one', name: { username: 'user1' }} \r\n}\r\n</pre>\r\n<p>Now, run the application, you could see the below output on your screen &minus;</p>\r\n<pre class=\"result notranslate\">\r\n{{ jsonData }} \r\n(1) \r\n[object Object] \r\n{{ jsonData | json }} \r\n{ \"id\": \"one\", \"name\": { \"username\": \"user1\" } }\r\n</pre>\r\n<h2>Creating custom pipe</h2>\r\n<p>As we have seen already, there is a number of pre-defined Pipes available in Angular 8 but sometimes, we may want to transform values in custom formats. This section explains about creating custom Pipes.</p>\r\n<p>Create a custom Pipe using the below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng g pipe digitcount\r\n</pre>\r\n<p>After executing the above command, you could see the response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/digitcount.pipe.spec.ts (203 bytes) CREATE src/app/digitcount.pipe.ts (213 bytes) \r\nUPDATE src/app/app.module.ts (744 bytes)\r\n</pre>\r\n<p>Let’s create a logic for counting digits in a number using Pipe. Open <b>digitcount.pipe.ts</b> file and add the below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Pipe, PipeTransform } from '@angular/core'; @Pipe({ \r\n   name: 'digitcount' \r\n}) \r\nexport class DigitcountPipe implements PipeTransform { \r\n   transform(val : number) : number { \r\n      return val.toString().length; \r\n   } \r\n}\r\n</pre>\r\n<p>Now, we have added logic for count number of digits in a number. Let’s add the final code in <b>test.component.ts</b> file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; @Component({ \r\n   selector: 'app-test', \r\n   template: ` \r\n   &lt;div&gt; \r\n      &lt;p&gt; DigitCount Pipe &lt;/p&gt; \r\n      &lt;h1&gt;{{ digits | digitcount }}&lt;/h1&gt; \r\n   &lt;/div&gt; \r\n   `, \r\n   styleUrls: ['./test.component.scss'] \r\n}) \r\nexport class TestComponent implements OnInit { \r\n   digits : number = 100; \r\n   ngOnInit() { \r\n   } \r\n}\r\n</pre>\r\n<p>Now, run the application, you could see the below response &minus;</p>\r\n<pre class=\"result notranslate\">\r\nDigitCount Pipe \r\n3\r\n</pre>\r\n<h3>Working example</h3>\r\n<p>Let us use the pipe in the our ExpenseManager application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent’s</b> template, <b>src/app/expense-entry-list/expense-entry-list.component.html</b> and include pipe in <b>entry.spendOn</b> as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;td&gt;{{ entry.spendOn | date: 'short' }}&lt;/td&gt;\r\n</pre>\r\n<p>Here, we have used the date pipe to show the spend on date in the short format.</p>\r\n<p>Finally, the output of the application is as shown below &minus;</p>\r\n<!--<img src=\"images/pipes.jpg\" alt=\"Pipes\" />-->\r\n<h1>Angular 8 - Reactive Programming</h1>\r\n<p>Reactive programming is a programming paradigm dealing with data streams and the propagation of changes. Data streams may be static or dynamic. An example of static data stream is an array or collection of data. It will have an initial quantity and it will not change. An example for dynamic data stream is event emitters. Event emitters emit the data whenever the event happens. Initially, there may be no events but as the time moves on, events happens and it will gets emitted.</p>\r\n<p>Reactive programming enables the data stream to be emitted from one source called <b>Observable</b> and the emitted data stream to be caught by other sources called <b>Observer</b> through a process called subscription. This Observable / Observer pattern or simple <b>Observer</b> pattern greatly simplifies complex change detection and necessary updating in the context of the programming.</p>\r\n<p>JavaScript does not have the built-in support for Reactive Programming. <b>RxJs</b> is a JavaScript Library which enables reactive programming in JavaScript. Angular uses <b>RxJs</b> library extensively to do below mentioned advanced concepts &minus;</p>\r\n<ul class=\"list\">\r\n<li>Data transfer between components.</li>\r\n<li>HTTP client.</li>\r\n<li>Router.</li>\r\n<li>Reactive forms.</li>\r\n</ul>\r\n<p>Let us learn reactive programming using <b>RxJs</b> library in this chapter.</p>\r\n<h2>Observable</h2>\r\n<p>As learn earlier, <b>Observable</b> are data sources and they may be static or dynamic. <b>Rxjs</b> provides lot of method to create <b>Observable</b> from common JavaScript Objects. Let us see some of the common methods.</p>\r\n<p>of &minus; Emit any number of values in a sequence and finally emit a complete notification.</p>\r\n<pre class=\"result notranslate\">\r\nconst numbers$ = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>numbers$</b> is an <b>Observable</b> object, which when subscribed will emit 1 to 10 in a sequence.</p></li>\r\n<li><p><b>Dollar sign ($)</b> at the end of the variable is to identify that the variable is Observable.</p></li>\r\n</ul>\r\n<p><b>range</b> &minus; Emit a range of number in sequence.</p>\r\n<pre class=\"result notranslate\">\r\nconst numbers$ = range(1,10)\r\n</pre>\r\n<p><b>from</b> &minus; Emit array, promise or iterable.</p>\r\n<pre class=\"result notranslate\">\r\nconst numbers$ = from([1,2,3,4,5,6,7,8,9,10]);\r\n</pre>\r\n<p><b>ajax</b> &minus; Fetch a url through AJAX and then emit the response.</p>\r\n<pre class=\"result notranslate\">\r\nconst api$ = ajax({ url: 'https://httpbin.org/delay/1', method: 'POST', headers: { 'Content-Type': 'application/text' }, body: \"Hello\" });\r\n</pre>\r\n<p>Here,</p>\r\n<p><a target=\"_blank\" rel=\"nofollow\" href=\"https://httpbin.org/\"><b>https://httpbin.org</b></a> is a free REST API service which will return the supplied body content in the JSON format as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n{ \r\n   \"args\": {}, \r\n   \"data\": \"Hello\", \r\n   \"files\": {}, \r\n   \"form\": {}, \r\n   \"headers\": { \r\n      \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", \r\n      \"Accept-Encoding\": \"gzip, deflate, br\", \r\n      \"Accept-Language\": \"en-US,en;q=0.9\", \r\n      \"Host\": \"httpbin.org\", \"Sec-Fetch-Dest\": \"document\", \r\n      \"Sec-Fetch-Mode\": \"navigate\", \r\n      \"Sec-Fetch-Site\": \"none\", \r\n      \"Upgrade-Insecure-Requests\": \"1\", \r\n      \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36\", \r\n      \"X-Amzn-Trace-Id\": \"Root=1-5eeef468-015d8f0c228367109234953c\" \r\n   }, \r\n   \"origin\": \"ip address\", \r\n   \"url\": \"https://httpbin.org/delay/1\" \r\n}\r\n</pre>\r\n<p><b>fromEvent</b> &minus; Listen to an HTML element’s event and then emit the event and its property whenever the listened event fires.</p>\r\n<pre class=\"result notranslate\">\r\nconst clickEvent$ = fromEvent(document.getElementById('counter'), 'click');\r\n</pre>\r\n<p>Angular internally uses the concept extensively to provide data transfer between components and for reactive forms.</p>\r\n<h2>Subscribing process</h2>\r\n<p>Subscribing to an Observable is quite easy. Every Observable object will have a method, subscribe for the subscription process. Observer need to implement three callback function to subscribe to the Observable object. They are as follows &minus;</p>\r\n<ul class=\"list\">\r\n<li><p><b>next</b> &minus; Receive and process the value emitted from the Observable</p></li>\r\n<li><p><b>error</b> &minus; Error handling callback</p></li>\r\n<li><p><b>complete</b> &minus; Callback function called when all data from Observable are emitted.</p></li>\r\n</ul>\r\n<p>Once the three callback functions are defined, Observable’s subscribe method has to be called as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nconst numbers$ = from([1,2,3,4,5,6,7,8,9,10]); \r\n// observer \r\nconst observer = { \r\n   next: (num: number) =&gt; {      this.numbers.push(num); this.val1 += num }, \r\n      error: (err: any) =&gt; console.log(err), \r\n      complete: () =&gt; console.log(\"Observation completed\") \r\n}; \r\nnumbers$.subscribe(observer);\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>next</b> &minus; method get the emitted number and then push it into the local variable, <b>this.numbers</b>.</p></li>\r\n<li><p><b>next</b> &minus; method also adding the number to local variable, <b>this.val1</b>.</p></li>\r\n<li><p><b>error</b> &minus; method just writes the error message to console.</p></li>\r\n<li><p><b>complete</b> &minus; method also writes the completion message to console.</p></li>\r\n</ul>\r\n<p>We can skip <b>error</b> and <b>complete</b> method and write only the <b>next</b> method as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnumber$.subscribe((num: number) =&gt; { this.numbers.push(num); this.val1 += num; });\r\n</pre>\r\n<h2>Operations</h2>\r\n<p><b>Rxjs</b> library provides some of the operators to process the data stream. Some of the important <b>operators</b> are as follows &minus;</p>\r\n<p><b>filter</b> &minus; Enable to filter the data stream using callback function.</p>\r\n<pre class=\"result notranslate\">\r\nconst filterFn = filter( (num : number) =&gt; num &gt; 5 ); \r\nconst filteredNumbers$ = filterFn(numbers$); \r\nfilteredNumbers$.subscribe( (num : number) =&gt; { \r\nthis.filteredNumbers.push(num); this.val2 += num } );\r\n</pre>\r\n<p><b>map</b> &minus; Enables to map the data stream using callback function and to change the data stream itself.</p>\r\n<pre class=\"result notranslate\">\r\nconst mapFn = map( (num : number) =&gt; num + num ); const mappedNumbers$ = mappedFn(numbers$);\r\n</pre>\r\n<p><b>pipe</b> &minus; Enable two or more operators to be combined.</p>\r\n<pre class=\"result notranslate\">\r\nconst filterFn = filter( (num : number) =&gt; num &gt; 5 ); \r\nconst mapFn = map( (num : number) =&gt; num + num ); const processedNumbers$ = numbers$.pipe(filterFn, mapFn); \r\nprocessedNumbers$.subscribe( (num : number) =&gt; { this.processedNumbers.push(num); this.val3 += num } );\r\n</pre>\r\n<p>Let us create a sample application to try out the reaction programming concept learned in this chapter.</p>\r\n<p>Create a new application, reactive using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng new reactive\r\n</pre>\r\n<p>Change the directory to our newly created application.</p>\r\n<pre class=\"result notranslate\">\r\ncd reactive\r\n</pre>\r\n<p>Run the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Change the AppComponent component code (src/app/app.component.ts) as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { Observable, of, range, from, fromEvent } from 'rxjs'; \r\nimport { ajax } from 'rxjs/ajax'; \r\nimport { filter, map, catchError } from 'rxjs/operators'; \r\n@Component({ \r\n   selector: 'app-root', \r\n   templateUrl: './app.component.html', \r\n   styleUrls: ['./app.component.css'] \r\n}) \r\nexport class AppComponent implements OnInit { \r\n   title = 'Reactive programming concept'; \r\n   numbers : number[] = []; \r\n   val1 : number = 0; \r\n   filteredNumbers : number[] = []; \r\n   val2 : number = 0; \r\n   processedNumbers : number[] = []; \r\n   val3 : number = 0; \r\n   apiMessage : string; \r\n   counter : number = 0; \r\n   ngOnInit() { \r\n      // Observable stream of data Observable&lt;number&gt;\r\n      // const numbers$ = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); \r\n      // const numbers$ = range(1,10); \r\n      const numbers$ = from([1,2,3,4,5,6,7,8,9,10]); \r\n      // observer \r\n      const observer = { \r\n         next: (num: number) =&gt; {this.numbers.push(num); this.val1 += num }, \r\n         error: (err: any) =&gt; console.log(err), \r\n         complete: () =&gt; console.log(\"Observation completed\") \r\n      }; \r\n      numbers$.subscribe(observer); \r\n      const filterFn = filter( (num : number) =&gt; num &gt; 5 ); \r\n      const filteredNumbers = filterFn(numbers$); \r\n      filteredNumbers.subscribe( (num : number) =&gt; {this.filteredNumbers.push(num); this.val2 += num } ); \r\n      const mapFn = map( (num : number) =&gt; num + num ); \r\n      const processedNumbers$ = numbers$.pipe(filterFn, mapFn); \r\n      processedNumbers$.subscribe( (num : number) =&gt; {this.processedNumbers.push(num); this.val3 += num } ); \r\n      const api$ = ajax({ \r\n         url: 'https://httpbin.org/delay/1', \r\n         method: 'POST', \r\n         headers: {'Content-Type': 'application/text' }, \r\n         body: \"Hello\" \r\n      }); \r\n      api$.subscribe(res =&gt; this.apiMessage = res.response.data ); \r\n      const clickEvent$ = fromEvent(document.getElementById('counter'), 'click'); \r\n      clickEvent$.subscribe( () =&gt; this.counter++ ); \r\n   } \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Used of, range, from, ajax and fromEvent methods to created Observable.</li>\r\n<li>Used filter, map and pipe operator methods to process the data stream.</li>\r\n<li>Callback functions catch the emitted data, process it and then store it in component’s local variables.</li>\r\n</ul>\r\n<p>Change the <b>AppComponent</b> template <b>(src/app/app.component.html)</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt; \r\n&lt;div&gt; \r\n   The summation of numbers ( &lt;span *ngFor=\"let num of numbers\"&gt; {{ num }} &lt;/span&gt; ) is {{ val1 }} \r\n&lt;/div&gt; \r\n&lt;div&gt; \r\n   The summation of filtered numbers ( &lt;span *ngFor=\"let num of filteredNumbers\"&gt; {{ num }} &lt;/span&gt; ) is {{ val2 }} \r\n&lt;/div&gt; \r\n&lt;div&gt; \r\n   The summation of processed numbers ( &lt;span *ngFor=\"let num of processedNumbers\"&gt; {{ num }} &lt;/span&gt; ) is {{ val3 }} \r\n&lt;/div&gt; \r\n&lt;div&gt; \r\n   The response from the API is &lt;em&gt;{{ apiMessage }}&lt;/em&gt; &lt;/div&gt; \r\n&lt;div&gt; \r\n   &lt;a id=\"counter\" href=\"#\"&gt;Click here&lt;/a&gt; to increment the counter value. The current counter value is {{ counter }} \r\n&lt;div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Shown all the local variable processed by <b>Observer</b> callback functions.</p>\r\n<p>Open the browser, http://localhost:4200.</p>\r\n<!--<img src=\"images/reactive.jpg\" alt=\"Pipes\" />-->\r\n<p>Click the <b>Click here</b> link for five times. For each event, the event will be emitted and forward to the <b>Observer</b>. Observer callback function will be called. The callback function increment the counter for every click and the final result will be as shown below &minus;</p>\r\n<!--<img src=\"images/observer.jpg\" alt=\"Observer\" />-->\r\n<h1>Angular 8 - Services and Dependency Injection</h1>\r\n<p>As learned earlier, <b>Services</b> provides specific functionality in an Angular application. In a given Angular application, there may be one or more services can be used. Similarly, an Angular component may depend on one or more services.</p>\r\n<p>Also, Angular services may depend on another services to work properly. Dependency resolution is one of the complex and time consuming activity in developing any application. To reduce the complexity, Angular provides <b>Dependency Injection</b> pattern as one of the core concept.</p>\r\n<p>Let us learn, how to use Dependency Injection in Angular application in this chapter.</p>\r\n<h2>Create Angular service</h2>\r\n<p>An Angular service is plain Typescript class having one or more methods (functionality) along with <b>@Injectable</b> decorator. It enables the normal Typescript class to be used as service in Angular application.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; @Injectable() \r\nexport class DebugService { \r\n   constructor() { } \r\n}\r\n</pre>\r\n<p>Here, <b>@Injectable</b> decorator converts a plain Typescript class into Angular service.</p>\r\n<h2>Register Angular service</h2>\r\n<p>To use <b>Dependency Injection</b>, every service needs to be registered into the system. Angular provides multiple option to register a service. They are as follows &minus;</p>\r\n<ul class=\"list\">\r\n<li>ModuleInjector @ root level</li>\r\n<li>ModuleInjector @ platform level</li>\r\n<li>ElementInjector using providers meta data</li>\r\n<li>ElementInjector using viewProviders meta data</li>\r\n<li>NullInjector</li>\r\n</ul>\r\n<h3>ModuleInjector @ root</h3>\r\n<p><b>ModuleInjector</b> enforces the service to used only inside a specific module. <b>ProvidedIn</b>meta data available in <b>@Injectable</b> has to be used to specify the module in which the service can be used.</p>\r\n<p>The value should refer to the one of the registered Angular Module (decorated with <b>@NgModule). root</b> is a special option which refers the root module of the application. The sample code is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; @Injectable({ \r\n   providedIn: 'root', \r\n})\r\nexport class DebugService { \r\n   constructor() { } \r\n}\r\n</pre>\r\n<h3>ModuleInjector @ platform</h3>\r\n<p><b>Platform Injector</b> is one level higher than <b>ModuleInject</b> and it is only in advanced and rare situation. Every Angular application starts by executing <b>PreformBrowserDynamic().bootstrap</b> method (see <b>main.js</b>), which is responsible for bootstrapping root module of Angular application.</p>\r\n<p><b>PreformBrowserDynamic()</b> method creates an injector configured by <b>PlatformModule</b>. We can configure platform level services using <b>platformBrowser()</b> method provided by <b>PlatformModule</b>.</p>\r\n<h3>NullInjector</h3>\r\n<p><b>NullInjector</b> is one level higher than platform level <b>ModuleInjector</b> and is in the top level of the hierarchy. We could not able to register any service in the <b>NullInjector</b>. It resolves when the required service is not found anywhere in the hierarchy and simply throws an error.</p>\r\n<h3>ElementInjector using providers</h3>\r\n<p><b>ElementInjector</b> enforces the service to be used only inside some particular components. providers and <b>ViewProviders</b> meta data available in <b>@Component</b> decorator is used to specify the list of services to be visible for the particular component. The sample code to use providers is as follows &minus;</p>\r\n<p><b>ExpenseEntryListComponent</b></p>\r\n<pre class=\"result notranslate\">\r\n// import statement \r\nimport { DebugService } from '../debug.service'; \r\n// component decorator \r\n@Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', \r\n   styleUrls: ['./expense-entry-list.component.css'], \r\n   providers: [DebugService] })\r\n</pre>\r\n<p>Here, <b>DebugService</b> will be available only inside the <b>ExpenseEntryListComponent</b> and its view. To make DebugService in other component, simply use <b>providers</b> decorator in necessary component.</p>\r\n<h3>ElementInjector using viewProviders</h3>\r\n<p><b>viewProviders</b> is similar to <b>provider</b> except it does not allow the service to be used inside the componentâ€™s content created using <b>ng-content</b> directive.</p>\r\n<p><b>ExpenseEntryListComponent</b></p>\r\n<pre class=\"result notranslate\">\r\n// import statement \r\nimport { DebugService } from '../debug.service'; \r\n// component decorator \r\n@Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', \r\n   styleUrls: ['./expense-entry-list.component.css'], viewProviders: [DebugService] \r\n})\r\n</pre>\r\n<p>Parent component can use a child component either through its view or content. Example of a parent component with child and content view is mentioned below &minus;</p>\r\n<p><b>Parent component view / template</b></p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   child template in view \r\n   &lt;child&gt;&lt;/child&gt; \r\n&lt;/div&gt; \r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p><b>child component view / template</b></p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   child template in view \r\n&lt;/div&gt; \r\n</pre>\r\n<p>Parent component usage in a template (another component)</p>\r\n<pre class=\"result notranslate\">\r\n&lt;parent&gt; \r\n   &lt;!-- child template in content --&gt;\r\n   &lt;child&gt;&lt;/child&gt;\r\n&lt;/parent&gt; \r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><b>child</b> component is used in two place. One inside the parent’s view. Another inside parent content.</li>\r\n<li>Services will be available in child component, which is placed inside parent’s view.</li>\r\n<li>Services will not be available in child component, which is placed inside parent’s content.</li>\r\n</ul>\r\n<h2>Resolve Angular service</h2>\r\n<p>Let us see how a component can resolve a service using the below flow diagram.</p>\r\n<!--<img src=\"images/resolve_angular.jpg\" alt=\"Resolve Angular\" />-->\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>First, component tries to find the service registered using <b>viewProviders</b> meta data.</li>\r\n<li>If not found, component tries to find the service registered using <b>providers</b> meta data.</li>\r\n<li>If not found, Component tries to find the service registered using <b>ModuleInjector</b></li>\r\n<li>If not found, component tries to find the service registered using <b>PlatformInjector</b></li>\r\n<li>If not found, component tries to find the service registered using <b>NullInjector</b>, which always throws error.</li>\r\n</ul>\r\n<p>The hierarchy of the Injector along with work flow of the resolving the service is as follows &minus;</p>\r\n<!--<img src=\"images/angular_service.jpg\" alt=\"Angular service\" />-->\r\n<h3>Resolution Modifier</h3>\r\n<p>As we learn in the previous chapter, the resolution of the service starts from component and stops either when a service is found or <b>NUllInjector</b> is reached. This is the default resolution and it can be changed using <b>Resolution Modifier</b>. They are as follows &minus;</p>\r\n<p><b>Self()</b></p>\r\n<p><b>Self()</b> start and stops the search for the service in its current <b>ElementInjector</b> itself.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Self } from '@angular/core'; \r\nconstructor(@Self() public debugService: DebugService) {}\r\n</pre>\r\n<p><b>SkipSelf()</b></p>\r\n<p><b>SkipSelf()</b> is just opposite to Self(). It skips the current ElementInjector and starts the search for service from its parent <b>ElementInjector</b>.</p>\r\n<pre class=\"result notranslate\">\r\nimport { SkipSelf } from '@angular/core'; \r\nconstructor(@SkipSelf() public debugService: DebugService) {}\r\n</pre>\r\n<p><b>Host()</b></p>\r\n<p><b>Host()</b> stop the search for the service in its host <b>ElementInjector</b>. Even if service available up in the higher level, it stops at host.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Host } from '@angular/core'; \r\nconstructor(@Host() public debugService: DebugService) {}\r\n</pre>\r\n<p><b>Optional()</b></p>\r\n<p><b>Optional()</b> does not throws the error when the search for the service fails.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Optional } from '@angular/core'; \r\nconstructor(@Optional() private debugService?: DebugService) { \r\n   if (this.debugService) { \r\n      this.debugService.info(\"Debugger initialized\"); \r\n   } \r\n}\r\n</pre>\r\n<h2>Dependency Injector Providers</h2>\r\n<p>Dependency Injector providers serves two purpose. First, it helps in setting a token for the service to be registered. The token will be used to refer and call the service. Second, it helps in creating the service from the given configuration.</p>\r\n<p>As learned earlier, the simplest provider is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [ DebugService ]\r\n</pre>\r\n<p>Here, <b>DebugService</b> is both token as well as the class, with which the service object has to be created. The actual form of the provider is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [ { provides: DebugService, useClass: DebugService }]\r\n</pre>\r\n<p>Here, <b>provides</b> is the token and <b>useClass</b> is the class reference to create the service object.</p>\r\n<p>Angular provides some more providers and they are as follows &minus;</p>\r\n<p>Aliased class providers</p>\r\n<p>The purpose of the providers is to reuse the existing service.</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [ DebugService, \r\n   { provides: AnotherDebugService, userClass: DebugService }]\r\n</pre>\r\n<p>Here, only one instance of <b>DebugService</b> service will be created.</p>\r\n<p>Value providers</p>\r\n<p>The purpose of the Value providers is to supply the value itself instead of asking the DI to create an instance of the service object. It may use existing object as well. The only restriction is that the object should be in the shape of referenced service.</p>\r\n<pre class=\"result notranslate\">\r\nexport class MyCustomService { \r\n   name = \"My Custom Service\" \r\n} \r\n[{ provide: MyService, useValue: { name: 'instance of MyCustomService' }]\r\n</pre>\r\n<p>Here, DI provider just return the instance set in <b>useValue</b> option instead of creating a new service object.</p>\r\n<p>Non-class dependency providers</p>\r\n<p>It enables string, function or object to be used in Angular DI.</p>\r\n<p>Let us see a simple example.</p>\r\n<pre class=\"result notranslate\">\r\n// Create the injectable token \r\nimport { InjectionToken } from '@angular/core'; \r\nexport const APP_CONFIG = new InjectionToken&lt;AppConfig&gt;('app.config'); \r\n// Create value \r\nexport const MY_CONFIG: AppConfig = { \r\n   title: 'Dependency Injection' \r\n}; \r\n// congfigure providers \r\nproviders: [{ provide: APP_CONFIG, useValue: HERO_DI_CONFIG }] \r\n// inject the service \r\nconstructor(@Inject(APP_CONFIG) config: AppConfig) {\r\n</pre>\r\n<p>Factory providers</p>\r\n<p>Factory Providers enables complex service creation. It delegates the creation of the object to an external function. Factory providers has option to set the dependency for factory object as well.</p>\r\n<pre class=\"result notranslate\">\r\n{ provide: MyService, useFactory: myServiceFactory, deps: [DebugService] };\r\n</pre>\r\n<p>Here, <b>myServiceFactory</b> returns the instance of <b>MyService</b>.</p>\r\n<h2>Angular Service usage</h2>\r\n<p>Now, we know how to create and register Angular Service. Let us see how to use the Angular Service inside a component. Using an Angular service is as simple as setting the type of parameters of the constructor as the token of the service providers.</p>\r\n<pre class=\"result notranslate\">\r\nexport class ExpenseEntryListComponent implements OnInit {\r\n   title = 'Expense List'; \r\n   constructor(private debugService : DebugService) {} \r\n   ngOnInit() { \r\n      this.debugService.info(\"Angular Application starts\"); \r\n   } \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>ExpenseEntryListComponent</b> constructor set a parameter of type DebugService.</p></li>\r\n<li><p><b>Angular Dependency Injector</b> (DI) will try to find any service registered in the application with type DebugService. If found, it will set an instance of DebugService to ExpenseEntryListComponent component. If not found, it will throw an error.</p></li>\r\n</ul>\r\n<h2>Add a debug service</h2>\r\n<p>Let us add a simple <b>Debug</b> service, which will help us to print the debugging information during application development.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Run the below command to generate an Angular service, <b>DebugService</b>.</p>\r\n<pre class=\"result notranslate\">\r\nng g service debug\r\n</pre>\r\n<p>This will create two Typescript files (debug service & its test) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/debug.service.spec.ts (328 bytes) \r\nCREATE src/app/debug.service.ts (134 bytes)\r\n</pre>\r\n<p>Let us analyse the content of the <b>DebugService</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; @Injectable({ \r\n   providedIn: 'root' \r\n}) \r\nexport class DebugService { \r\n   constructor() { } \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>@Injectable</b> decorator is attached to DebugService class, which enables the DebugService to be used in Angular component of the application.</p></li>\r\n<li><p><b>providerIn</b> option and its value, root enables the DebugService to be used in all component of the application.</p></li>\r\n</ul>\r\n<p>Let us add a method, Info, which will print the message into the browser console.</p>\r\n<pre class=\"result notranslate\">\r\ninfo(message : String) : void { \r\n   console.log(message); \r\n}\r\n</pre>\r\n<p>Let us initialise the service in the <b>ExpenseEntryListComponent</b> and use it to print message.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { ExpenseEntry } from '../expense-entry'; import { DebugService } from '../debug.service'; @Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', styleUrls: ['./expense-entry-list.component.css'] \r\n}) \r\nexport class ExpenseEntryListComponent implements OnInit { \r\n   title: string; \r\n   expenseEntries: ExpenseEntry[]; \r\n   constructor(private debugService: DebugService) { } \r\n   ngOnInit() { \r\n      this.debugService.info(\"Expense Entry List \r\n      component initialized\"); \r\n      this.title = \"Expense Entry List\"; \r\n      this.expenseEntries = this.getExpenseEntries(); \r\n   } \r\n   // other coding \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>DebugService is initialised using constructor parameters. Setting an argument (debugService) of type DebugService will trigger the dependency injection to create a new DebugService object and set it into the ExpenseEntryListComponent component.</p></li>\r\n<li><p>Calling the info method of DebugService in the ngOnInit method prints the message in the browser console.</p></li>\r\n</ul>\r\n<p>The result can be viewed using developer tools and it looks similar as shown below &minus;</p>\r\n<!--<img src=\"images/debug_service.jpg\" alt=\"Debug service\" />-->\r\n<p>Let us extend the application to understand the scope of the service.</p>\r\n<p>Let us a create a <b>DebugComponent</b> by using below mentioned command.</p>\r\n<pre class=\"result notranslate\">\r\nng generate component debug\r\nCREATE src/app/debug/debug.component.html (20 bytes) CREATE src/app/debug/debug.component.spec.ts (621 bytes) \r\nCREATE src/app/debug/debug.component.ts (265 bytes) CREATE src/app/debug/debug.component.css (0 bytes) UPDATE src/app/app.module.ts (392 bytes)\r\n</pre>\r\n<p>Let us remove the DebugService in the root module.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/debug.service.ts\r\nimport { Injectable } from '@angular/core'; @Injectable() \r\nexport class DebugService { \r\n   constructor() { \r\n   }\r\n   info(message : String) : void {     \r\n      console.log(message); \r\n   } \r\n}\r\n</pre>\r\n<p>Register the DebugService under ExpenseEntryListComponent component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/expense-entry-list/expense-entry-list.component.ts @Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', \r\n   styleUrls: ['./expense-entry-list.component.css'] \r\n   providers: [DebugService] \r\n})\r\n</pre>\r\n<p>Here, we have used providers meta data <b>(ElementInjector)</b> to register the service.</p>\r\n<p>Open <b>DebugComponent</b> (src/app/debug/debug.component.ts) and import <b>DebugService</b> and set an instance in the constructor of the component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { DebugService } from '../debug.service'; \r\n@Component({ \r\n   selector: 'app-debug', \r\n   templateUrl: './debug.component.html', \r\n   styleUrls: ['./debug.component.css'] \r\n}) \r\nexport class DebugComponent implements OnInit { \r\n   constructor(private debugService: DebugService) { } \r\n   ngOnInit() { \r\n      this.debugService.info(\"Debug component gets service from Parent\"); \r\n   } \r\n}\r\n</pre>\r\n<p>Here, we have not registered <b>DebugService</b>. So, DebugService will not be available if used as parent component. When used inside a parent component, the service may available from parent, if the parent has access to the service.</p>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and include a content section as shown below:</p>\r\n<pre class=\"result notranslate\">\r\n// existing content \r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p>Here, we have included a content section and DebugComponent section.</p>\r\n<p>Let us include the debug component as a content inside the <b>ExpenseEntryListComponent</b> component in the AppComponent template. Open <b>AppComponent</b> template and change <b>app-expense-entry-list</b> as below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n// navigation code\r\n&lt;app-expense-entry-list&gt;\r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Here, we have included the <b>DebugComponent</b> as content.</p>\r\n<p>Let us check the application and it will show <b>DebugService</b> template at the end of the page as shown below &minus;</p>\r\n<!--<img src=\"images/debug.jpg\" alt=\"Debug \" />-->\r\n<p>Also, we could able to see two debug information from debug component in the console. This indicate that the debug component gets the service from its parent component.</p>\r\n<p>Let us change how the service is injected in the <b>ExpenseEntryListComponent</b> and how it affects the scope of the service. Change providers injector to viewProviders injection. <b>viewProviders</b> does not inject the service into the content child and so, it should fail.</p>\r\n<pre class=\"result notranslate\">\r\nviewProviders: [DebugService]\r\n</pre>\r\n<p>Check the application and you will see that the one of the debug component (used as content child) throws error as shown below &minus;</p>\r\n<!--<img src=\"images/application.jpg\" alt=\"Application \" />-->\r\n<p>Let us remove the debug component in the templates and restore the application.</p>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and remove below content</p>\r\n<pre class=\"result notranslate\"> \r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p>Open <b>AppComponent</b> template and change <b>app-expense-entry-list</b> as below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n// navigation code\r\n&lt;app-expense-entry-list&gt;\r\n&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Change the <b>viewProviders</b> setting to <b>providers</b> in <b>ExpenseEntryListComponent</b>.</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [DebugService]\r\n</pre>\r\n<p>Rerun the application and check the result.</p>\r\n<h1>Angular 8 - Http Client Programming</h1>\r\n<p>Http client programming is a must needed feature in every modern web application. Nowadays, lot of application exposes their functionality through REST API (functionality over HTTP protocol). With this in mind, Angular Team provides extensive support to access HTTP server. Angular provides a separate module, <b>HttpClientModule</b> and a service, <b>HttpClient</b> to do HTTP programming.</p>\r\n<p>Let us learn how to how to use <b>HttpClient</b> service in this chapter. Developer should have a basic knowledge in Http programming to understand this chapter.</p>\r\n<h2>Expense REST API</h2>\r\n<p>The prerequisite to do Http programming is the basic knowledge of Http protocol and REST API technique. Http programming involves two part, server and client. Angular provides support to create client side application. <b>Express</b> a popular web framework provides support to create server side application.</p>\r\n<p>Let us create an <b>Expense Rest API</b> using express framework and then access it from our <b>ExpenseManager</b> application using Angular HttpClient service.</p>\r\n<p>Open a command prompt and create a new folder, <b>express-rest-api</b>.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/workspace \r\nmkdir express-rest-api \r\ncd expense-rest-api\r\n</pre>\r\n<p>Initialise a new node application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnpm init\r\n</pre>\r\n<p><b>npm init</b> will ask some basic questions like project name (express-rest-api), entry point (server.js), etc., as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nThis utility will walk you through creating a package.json file. \r\nIt only covers the most common items, and tries to guess sensible defaults. \r\nSee `npm help json` for definitive documentation on these fields and exactly what they do. \r\nUse `npm install &lt;pkg&gt;` afterwards to install a package and save it as a dependency in the package.json file. \r\nPress ^C at any time to quit. \r\npackage name: (expense-rest-api) \r\nversion: (1.0.0) \r\ndescription: Rest api for Expense Application \r\nentry point: (index.js) server.js \r\ntest command:\r\ngit repository: \r\nkeywords: \r\nauthor: \r\nlicense: (ISC) \r\nAbout to write to \\path\\to\\workspace\\expense-rest-api\\package.json: { \r\n   \"name\": \"expense-rest-api\", \r\n   \"version\": \"1.0.0\", \r\n   \"description\": \"Rest api for Expense Application\", \r\n   \"main\": \"server.js\", \r\n   \"scripts\": { \r\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" \r\n   }, \r\n   \"author\": \"\", \r\n   \"license\": \"ISC\" \r\n} \r\nIs this OK? (yes) yes\r\n</pre>\r\n<p>Install <b>express, sqlite</b> and <b>cors</b> modules using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnpm install express sqlite3 cors\r\n</pre>\r\n<p>Create a new file <b>sqlitedb.js</b> and place below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nvar sqlite3 = require('sqlite3').verbose()\r\nconst DBSOURCE = \"expensedb.sqlite\"\r\n\r\nlet db = new sqlite3.Database(DBSOURCE, (err) =&gt; {\r\n   if (err) {\r\n      console.error(err.message)\r\n      throw err\r\n   }else{\r\n      console.log('Connected to the SQLite database.')\r\n      db.run(`CREATE TABLE expense (\r\n         id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n         item text, \r\n         amount real, \r\n         category text, \r\n         location text, \r\n         spendOn text, \r\n         createdOn text \r\n         )`,\r\n            (err) =&gt; {\r\n               if (err) {\r\n                  console.log(err);\r\n               }else{\r\n                  var insert = 'INSERT INTO expense (item, amount, category, location, spendOn, createdOn) VALUES (?,?,?,?,?,?)'\r\n\r\n                  db.run(insert, ['Pizza', 10, 'Food', 'KFC', '2020-05-26 10:10', '2020-05-26 10:10'])\r\n                  db.run(insert, ['Pizza', 9, 'Food', 'Mcdonald', '2020-05-28 11:10', '2020-05-28 11:10'])\r\n                  db.run(insert, ['Pizza', 12, 'Food', 'Mcdonald', '2020-05-29 09:22', '2020-05-29 09:22'])\r\n                  db.run(insert, ['Pizza', 15, 'Food', 'KFC', '2020-06-06 16:18', '2020-06-06 16:18'])\r\n                  db.run(insert, ['Pizza', 14, 'Food', 'Mcdonald', '2020-06-01 18:14', '2020-05-01 18:14'])\r\n               }\r\n            }\r\n      );  \r\n   }\r\n});\r\n\r\nmodule.exports = db\r\n</pre>\r\n<p>Here, we are creating a new sqlite database and load some sample data.</p>\r\n<p>Open server.js and place below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nvar express = require(\"express\")\r\nvar cors = require('cors')\r\nvar db = require(\"./sqlitedb.js\")\r\n\r\nvar app = express()\r\napp.use(cors());\r\n\r\nvar bodyParser = require(\"body-parser\");\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\n\r\nvar HTTP_PORT = 8000 \r\napp.listen(HTTP_PORT, () =&gt; {\r\n   console.log(\"Server running on port %PORT%\".replace(\"%PORT%\",HTTP_PORT))\r\n});\r\n\r\napp.get(\"/\", (req, res, next) =&gt; {\r\n    res.json({\"message\":\"Ok\"})\r\n});\r\n\r\napp.get(\"/api/expense\", (req, res, next) =&gt; {\r\n   var sql = \"select * from expense\"\r\n   var params = []\r\n   db.all(sql, params, (err, rows) =&gt; {\r\n      if (err) {\r\n        res.status(400).json({\"error\":err.message});\r\n        return;\r\n      }\r\n      res.json(rows)\r\n     });\r\n\r\n});\r\n\r\napp.get(\"/api/expense/:id\", (req, res, next) =&gt; {\r\n   var sql = \"select * from expense where id = ?\"\r\n   var params = [req.params.id]\r\n   db.get(sql, params, (err, row) =&gt; {\r\n      if (err) {\r\n         res.status(400).json({\"error\":err.message});\r\n         return;\r\n      }\r\n      res.json(row)\r\n   });\r\n});\r\n\r\napp.post(\"/api/expense/\", (req, res, next) =&gt; {\r\n   var errors=[]\r\n   if (!req.body.item){\r\n      errors.push(\"No item specified\");\r\n   }\r\n   var data = {\r\n      item : req.body.item,\r\n      amount: req.body.amount,\r\n      category: req.body.category,\r\n      location : req.body.location,\r\n      spendOn: req.body.spendOn,\r\n      createdOn: req.body.createdOn,\r\n   }\r\n   var sql = 'INSERT INTO expense (item, amount, category, location, spendOn, createdOn) VALUES (?,?,?,?,?,?)'\r\n   var params =[data.item, data.amount, data.category, data.location, data.spendOn, data.createdOn]\r\n   db.run(sql, params, function (err, result) {\r\n      if (err){\r\n         res.status(400).json({\"error\": err.message})\r\n         return;\r\n      }\r\n      data.id = this.lastID;\r\n      res.json(data);\r\n   });\r\n})\r\n\r\napp.put(\"/api/expense/:id\", (req, res, next) =&gt; {\r\n   var data = {\r\n      item : req.body.item,\r\n      amount: req.body.amount,\r\n      category: req.body.category,\r\n      location : req.body.location,\r\n      spendOn: req.body.spendOn\r\n   }\r\n   db.run(\r\n      `UPDATE expense SET\r\n         item = ?, \r\n\r\n         amount = ?,\r\n         category = ?, \r\n         location = ?, \r\n\r\n         spendOn = ? \r\n         WHERE id = ?`,\r\n            [data.item, data.amount, data.category, data.location,data.spendOn, req.params.id],\r\n      function (err, result) {\r\n         if (err){\r\n            console.log(err);\r\n            res.status(400).json({\"error\": res.message})\r\n            return;\r\n         }\r\n         res.json(data)\r\n   });\r\n})\r\n\r\napp.delete(\"/api/expense/:id\", (req, res, next) =&gt; {\r\n   db.run(\r\n      'DELETE FROM expense WHERE id = ?',\r\n      req.params.id,\r\n      function (err, result) {\r\n         if (err){\r\n            res.status(400).json({\"error\": res.message})\r\n            return;\r\n         }\r\n         res.json({\"message\":\"deleted\", changes: this.changes})\r\n   });\r\n})\r\n\r\napp.use(function(req, res){\r\n   res.status(404);\r\n});\r\n</pre>\r\n<p>Here, we create a basic CURD rest api to select, insert, update and delete expense entry.</p>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nnpm run start\r\n</pre>\r\n<p>Open a browser, enter <b>http://localhost:8000/ </b>and press enter. You will see below response &minus;</p>\r\n<pre class=\"result notranslate\">\r\n{ \r\n   \"message\": \"Ok\" \r\n}\r\n</pre>\r\n<p>It confirms our application is working fine.</p>\r\n<p>Change the url to <b>http://localhost:8000/api/expense</b> and you will see all the expense entries in JSON format.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n[\r\n   {\r\n      \"id\": 1,\r\n\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 10,\r\n      \"category\": \"Food\",\r\n      \"location\": \"KFC\",\r\n      \"spendOn\": \"2020-05-26 10:10\",\r\n      \"createdOn\": \"2020-05-26 10:10\"\r\n   },\r\n   {\r\n      \"id\": 2,\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 14,\r\n      \"category\": \"Food\",\r\n      \"location\": \"Mcdonald\",\r\n      \"spendOn\": \"2020-06-01 18:14\",\r\n      \"createdOn\": \"2020-05-01 18:14\"\r\n   },\r\n   {\r\n      \"id\": 3,\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 15,\r\n      \"category\": \"Food\",\r\n      \"location\": \"KFC\",\r\n      \"spendOn\": \"2020-06-06 16:18\",\r\n      \"createdOn\": \"2020-06-06 16:18\"\r\n   },\r\n   {\r\n      \"id\": 4,\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 9,\r\n      \"category\": \"Food\",\r\n      \"location\": \"Mcdonald\",\r\n      \"spendOn\": \"2020-05-28 11:10\",\r\n      \"createdOn\": \"2020-05-28 11:10\"\r\n   },\r\n   {\r\n      \"id\": 5,\r\n      \"item\": \"Pizza\",\r\n      \"amount\": 12,\r\n      \"category\": \"Food\",\r\n      \"location\": \"Mcdonald\",\r\n      \"spendOn\": \"2020-05-29 09:22\",\r\n      \"createdOn\": \"2020-05-29 09:22\"\r\n   }\r\n]\r\n</pre>\r\n<p>Finally, we created a simple CURD REST API for expense entry and we can access the REST API from our Angular application to learn HttpClient module.</p>\r\n<h2>Configure Http client</h2>\r\n<p>Let us learn how to configure <b>HttpClient</b> service in this chapter.</p>\r\n<p><b>HttpClient</b> service is available inside the <b>HttpClientModule</b> module, which is available inside the @angular/common/http package.</p>\r\n<p>To register <b>HttpClientModule</b> module &minus;</p>\r\n<p>Import the HttpClientModule in <b>AppComponent</b></p>\r\n<pre class=\"result notranslate\">\r\nimport { HttpClientModule } from '@angular/common/http';\r\n</pre>\r\n<p>Include HttpClientModule in imports meta data of AppComponent.</p>\r\n<pre class=\"result notranslate\">\r\n@NgModule({ \r\n   imports: [ \r\n      BrowserModule, \r\n      // import HttpClientModule after BrowserModule. \r\n      HttpClientModule, \r\n   ] \r\n}) \r\nexport class AppModule {}\r\n</pre>\r\n<h3>Create expense service</h3>\r\n<p>Let us create a new service <b>ExpenseEntryService</b> in our <b>ExpenseManager</b> application to interact with <b>Expense REST API</b>. ExpenseEntryService will get the latest expense entries, insert new expense entries, modify existing expense entries and delete the unwanted expense entries.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Run the below command to generate an Angular service, <b>ExpenseService</b>.</p>\r\n<pre class=\"result notranslate\">\r\nng generate service ExpenseEntry\r\n</pre>\r\n<p>This will create two Typescript files (expense entry service & its test) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry.service.spec.ts (364 bytes) \r\nCREATE src/app/expense-entry.service.ts (141 bytes)\r\n</pre>\r\n<p>Open <b>ExpenseEntryService</b> (src/app/expense-entry.service.ts) and import <b>ExpenseEntry, throwError</b> and <b>catchError</b> from rxjs library and import <b>HttpClient, HttpHeaders</b> and <b>HttpErrorResponse</b> from @angular/common/http package.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; \r\nimport { ExpenseEntry } from './expense-entry'; import { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators'; \r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from \r\n'@angular/common/http';\r\n</pre>\r\n<p>Inject the HttpClient service into our service.</p>\r\n<pre class=\"result notranslate\">\r\nconstructor(private httpClient : HttpClient) { }\r\n</pre>\r\n<p>Create a variable, <b>expenseRestUrl</b> to specify the <b>Expense Rest API</b> endpoints.</p>\r\n<pre class=\"result notranslate\">\r\nprivate expenseRestUrl = 'http://localhost:8000/api/expense';\r\n</pre>\r\n<p>Create a variable, <b>httpOptions</b> to set the Http Header option. This will be used during the Http Rest API call by Angular <b>HttpClient</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nprivate httpOptions = { \r\n   headers: new HttpHeaders( { 'Content-Type': 'application/json' }) \r\n};\r\n</pre>\r\n<p>The complete code is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { ExpenseEntry } from './expense-entry';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseEntryService {\r\n   private expenseRestUrl = 'api/expense';\r\n   private httpOptions = {\r\n      headers: new HttpHeaders( { 'Content-Type': 'application/json' })\r\n   };\r\n\r\n   constructor(\r\n      private httpClient : HttpClient) { }\r\n}\r\n</pre>\r\n<h2>HTTP GET</h2>\r\n<p>HttpClient provides get() method to fetch data from a web page. The main argument is the target web url. Another optional argument is the option object with below format &minus;</p>\r\n<pre class=\"result notranslate\">\r\n{\r\n   headers?: HttpHeaders | {[header: string]: string | string[]},\r\n   observe?: 'body' | 'events' | 'response',\r\n\r\n   params?: HttpParams|{[param: string]: string | string[]},\r\n   reportProgress?: boolean,\r\n   responseType?: 'arraybuffer'|'blob'|'json'|'text',\r\n   withCredentials?: boolean,\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>headers</b> &minus; HTTP Headers of the request, either as string, array of string or array of HttpHeaders.</p></li>\r\n<li><p><b>observe</b> &minus; Process the response and return the specific content of the response. Possible values are body, response and events. The default option of observer is body.</p></li>\r\n<li><p><b>params</b> &minus; HTTP parameters of the request, either as string, array of string or array of <b>HttpParams</b>.</p></li>\r\n<li><p><b>reportProgress</b> &minus; Whether to report the progress of the process or not (true or false).</p></li>\r\n<li><p><b>responseType</b> &minus; Refers the format of the response. Possible values are <b>arraybuffer, blob, json</b> and <b>text</b>.</p></li>\r\n<li><p><b>withCredentials</b> &minus; Whether the request has credentials or not (true or false).</p></li>\r\n</ul>\r\n<p>All options are optional.</p>\r\n<p><b>get()</b> method returns the response of the request as <b>Observable</b>. The returned Observable emit the data when the response is received from the server.</p>\r\n<p>The sample code to use <b>get()</b> method is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nhttpClient.get(url, options) \r\n.subscribe( (data) =&gt; console.log(data) );\r\n</pre>\r\n<h3>Typed Response</h3>\r\n<p><b>get()</b> method has an option to return observables, which emits typed response as well. The sample code to get typed response (ExpenseEntry) is as follows:</p>\r\n<pre class=\"result notranslate\">\r\nhttpClient.get&lt;T&gt;(url, options) .subscribe( (data: T) =&gt; console.log(data) );\r\n</pre>\r\n<h3>Handling errors</h3>\r\n<p>Error handling is one of the important aspect in the HTTP programming. Encountering error is one of the common scenario in HTTP programming.</p>\r\n<p>Errors in HTTP Programming can be categories into two groups &minus;</p>\r\n<ul class=\"list\">\r\n<li><p>Client side issues can occur due to network failure, misconfiguration, etc., If client side error happens, then the <b>get()</b> method throws <b>ErrorEvent</b> object.</p></li>\r\n<li><p>Server side issues can occur due to wrong url, server unavailability, server programming errors, etc.,</p></li>\r\n</ul>\r\n<p>Let us write a simple error handling for our <b>ExpenseEntryService</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nprivate httpErrorHandler (error: HttpErrorResponse) {\r\n   if (error.error instanceof ErrorEvent) {\r\n      console.error(\"A client side error occurs. The error message is \" + error.message);\r\n      } else {\r\n         console.error(\r\n            \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n      }\r\n\r\n   return throwError(\"Error occurred. Pleas try again\");\r\n}\r\n</pre>\r\n<p>The error function can be called in <b>get()</b> as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nhttpClient.get(url, options)  \r\n   .pipe(catchError(this.httpErrorHandler) \r\n   .subscribe( (data) =&gt; console.log(data) )\r\n</pre>\r\n<h3>Handle failed request</h3>\r\n<p>As we mentioned earlier, errors can happen and one way is to handle it. Another option is to try for certain number of times. If the request failed due to network issue or the HTTP server is temporarily offline, the next request may succeed.</p>\r\n<p>We can use <b>rxjs</b> library’s <b>retry</b> operator in this scenario as specified below</p>\r\n<pre class=\"result notranslate\">\r\nhttpClient.get(url, options) \r\n   .pipe( \r\n      retry(5), \r\n      catchError(this.httpErrorHandler)) \r\n   .subscribe( (data) =&gt; console.log(data) )\r\n</pre>\r\n<h3>Fetch expense entries</h3>\r\n<p>Let us do the actual coding to fetch the expenses from <b>Expense Rest API</b> in our ExpenseManager application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Add <b>getExpenseEntries()</b> and <b>httpErrorHandler()</b> method in <b>ExpenseEntryService</b> (src/app/expense-entry.service.ts) service.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngetExpenseEntries() : Observable&lt;ExpenseEntry[]&gt; {\r\n   return this.httpClient.get&lt;ExpenseEntry[]&gt;(this.expenseRestUrl, this.httpOptions)\r\n   .pipe(retry(3),catchError(this.httpErrorHandler));\r\n}\r\n\r\ngetExpenseEntry(id: number) : Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.get&lt;ExpenseEntry&gt;(this.expenseRestUrl + \"/\" + id, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n\r\nprivate httpErrorHandler (error: HttpErrorResponse) {\r\n   if (error.error instanceof ErrorEvent) {\r\n      console.error(\"A client side error occurs. The error message is \" + error.message);\r\n   } else {\r\n      console.error(\r\n         \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n   }\r\n\r\n   return throwError(\"Error occurred. Pleas try again\");\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>getExpenseEntries()</b> calls the <b>get()</b> method using expense end point and also configures the error handler. Also, it configures <b>httpClient</b> to try for maximum of 3 times in case of failure. Finally, it returns the response from server as typed <b>(ExpenseEntry[])</b> Observable object.</p></li>\r\n<li><p><b>getExpenseEntry</b> is similar to getExpenseEntries() except it passes the id of the ExpenseEntry object and gets ExpenseEntry Observable object.</p></li>\r\n</ul>\r\n<p>The complete coding of <b>ExpenseEntryService</b> is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { ExpenseEntry } from './expense-entry';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseEntryService {\r\n   private expenseRestUrl = 'http://localhost:8000/api/expense';\r\n   private httpOptions = {\r\n      headers: new HttpHeaders( { 'Content-Type': 'application/json' })\r\n   };\r\n\r\n   constructor(private httpClient : HttpClient) { } \r\n\r\n   getExpenseEntries() : Observable<ExpenseEntry[]> {\r\n      return this.httpClient.get<ExpenseEntry[]>(this.expenseRestUrl, this.httpOptions)\r\n      .pipe(\r\n         retry(3),\r\n         catchError(this.httpErrorHandler)\r\n      );\r\n   }\r\n\r\n   getExpenseEntry(id: number) : Observable<ExpenseEntry> {\r\n      return this.httpClient.get<ExpenseEntry>(this.expenseRestUrl + \"/\" + id, this.httpOptions)\r\n      .pipe(\r\n         retry(3),\r\n         catchError(this.httpErrorHandler)\r\n      );\r\n   }\r\n\r\n   private httpErrorHandler (error: HttpErrorResponse) {\r\n      if (error.error instanceof ErrorEvent) {\r\n         console.error(\"A client side error occurs. The error message is \" + error.message);\r\n      } else {\r\n         console.error(\r\n            \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n      }\r\n\r\n      return throwError(\"Error occurred. Pleas try again\");\r\n   }\r\n}\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent</b> (src-entry-list-entry-list.component.ts) and inject <b>ExpenseEntryService</b> through constructor as specified below:</p>\r\n<pre class=\"result notranslate\">\r\nconstructor(private debugService: DebugService, private restService : \r\nExpenseEntryService ) { }\r\n</pre>\r\n<p>Change the <b>getExpenseEntries()</b> function. Call getExpenseEntries() method from <b>ExpenseEntryService</b> instead of returning the mock items.</p>\r\n<pre class=\"result notranslate\">\r\ngetExpenseItems() {  \r\n   this.restService.getExpenseEntries() \r\n      .subscribe( data =&minus; this.expenseEntries = data ); \r\n}\r\n</pre>\r\n<p>The complete <b>ExpenseEntryListComponent</b> coding is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ExpenseEntry } from '../expense-entry';\r\nimport { DebugService } from '../debug.service';\r\nimport { ExpenseEntryService } from '../expense-entry.service';\r\n\r\n@Component({\r\n   selector: 'app-expense-entry-list',\r\n   templateUrl: './expense-entry-list.component.html',\r\n   styleUrls: ['./expense-entry-list.component.css'],\r\n   providers: [DebugService]\r\n})\r\nexport class ExpenseEntryListComponent implements OnInit {\r\n   title: string;\r\n   expenseEntries: ExpenseEntry[];\r\n   constructor(private debugService: DebugService, private restService : ExpenseEntryService ) { }\r\n\r\n   ngOnInit() {\r\n      this.debugService.info(\"Expense Entry List component initialized\");\r\n      this.title = \"Expense Entry List\";\r\n\r\n      this.getExpenseItems();\r\n   }\r\n\r\n   getExpenseItems() {\r\n      this.restService.getExpenseEntries()\r\n      .subscribe( data =&gt; this.expenseEntries = data );\r\n   }\r\n}\r\n</pre>\r\n<p>Finally, check the application and you will see the below response.</p>\r\n<!--<img src=\"images/failed_request.jpg\" alt=\"failed request \" />-->\r\n<h2>HTTP POST</h2>\r\n<p>HTTP POST is similar to HTTP GET except that the post request will send the necessary data as posted content along with the request. HTTP POST is used to insert new record into the system.</p>\r\n<p><b>HttpClient</b> provides <b>post()</b> method, which is similar to <b>get()</b> except it support extra argument to send the data to the server.</p>\r\n<p>Let us add a new method, <b>addExpenseEntry()</b> in our <b>ExpenseEntryService</b> to add new expense entry as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\naddExpenseEntry(expenseEntry: ExpenseEntry): Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.post&lt;ExpenseEntry&gt;(this.expenseRestUrl, expenseEntry, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h2>HTTP PUT</h2>\r\n<p>HTTP PUT is similar to HTTP POST request. HTTP PUT is used to update existing record in the system.</p>\r\n<p><b>httpClient</b> provides <b>put()</b> method, which is similar to <b>post()</b>.</p>\r\n<h3>Update expense entry</h3>\r\n<p>Let us add a new method, <b>updateExpenseEntry()</b> in our <b>ExpenseEntryService</b> to update existing expense entry as mentioned below:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nupdateExpenseEntry(expenseEntry: ExpenseEntry): Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.put&lt;ExpenseEntry&gt;(this.expenseRestUrl + \"/\" + expenseEntry.id, expenseEntry, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h2>HTTP DELETE</h2>\r\n<p>HTTP DELETE is similar to http GET request. HTTP DELETE is used to delete entries in the system.</p>\r\n<p><b>httpclient</b> provides <b>delete()</b> method, which is similar to <b>get()</b>.</p>\r\n<h3>Delete expense entry</h3>\r\n<p>Let us add a new method, <b>deleteExpenseEntry()</b> in our <b>ExpenseEntryService</b> to delete existing expense entry as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ndeleteExpenseEntry(expenseEntry: ExpenseEntry | number) : Observable&lt;ExpenseEntry&gt; {\r\n   const id = typeof expenseEntry == 'number' ? expenseEntry : expenseEntry.id\r\n   const url = `${this.expenseRestUrl}/${id}`;\r\n\r\n   return this.httpClient.delete&lt;ExpenseEntry&gt;(url, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h1>Angular 8 - Angular Material</h1>\r\n<p>Angular Material provides a huge collection of high-quality and ready-made Angular component based on Material design. Let us learn how to include Angular material in Angular application and use its component.</p>\r\n<h2>Configure Angular Material</h2>\r\n<p>Let us see how to configure Angular Material in Angular application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Add Angular material package using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng add @angular/material\r\n</pre>\r\n<p>Angular CLI will ask certain question regarding theme, gesture recognition and browser animations. Select your any theme of your choice and then answer positively for gesture recognition and browser animation.</p>\r\n<pre class=\"result notranslate\">\r\nInstalling packages for tooling via npm.\r\nInstalled packages for tooling via npm.\r\nChoose a prebuilt theme name, or \"custom\" for a custom theme: Indigo/Pink        [ Preview: https://material.angular.i\r\no?theme=indigo-pink ]\r\nSet up HammerJS for gesture recognition? Yes\r\nSet up browser animations for Angular Material? Yes\r\n</pre>\r\n<p>Angular material packages each UI component in a separate module. Import all the necessary module into the application through root module <b>(src/app/app.module.ts)</b></p>\r\n<pre class=\"result notranslate\">\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule\r\n  ]\r\n})\r\n</pre>\r\n<p>Change the edit button using ExpenseEntryListComponent template (src/app/expense-entry-list/expense-entry-list.component.html) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt;\r\n    &lt;!-- &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; --&gt;\r\n    &lt;button mat-raised-button color=\"primary\">Edit&lt;/button&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Run the application and test the page.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>The output of the application is as follows &minus;</p>\r\n<!--<img src=\"images/configure_angular.jpg\" alt=\"Configure Angular\" />-->\r\n<p>Here, the application clearly shows the Angular Material button.</p>\r\n<h3>Working example</h3>\r\n<p>Some of the important UI elements provided by Angular Material package.</p>\r\n<ul class=\"list\">\r\n<li>Form field</li>\r\n<li>Input</li>\r\n<li>Checkbox</li>\r\n<li>Radio button</li>\r\n<li>Select</li>\r\n<li>Button</li>\r\n<li>DatePicker</li>\r\n<li>List</li>\r\n<li>Card</li>\r\n<li>Grid list</li>\r\n<li>Table</li>\r\n<li>Paginator</li>\r\n<li>Tabs</li>\r\n<li>Toolbar</li>\r\n<li>Menu</li>\r\n<li>Dialog</li>\r\n<li>Snackbar</li>\r\n<li>Progress bar</li>\r\n<li>Icon</li>\r\n<li>Divider</li>\r\n</ul>\r\n<p>Using material component is quite easy and we will learn one of the frequently used material component, <b>Material Table</b> by working on a sample project.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\nng add @angular/material\r\n</pre>\r\n<p>Let us change our <b>ExpenseEntryListComponent</b>(src/app/expense-entry-list/expense-entry-list.component.ts) and use Material Table component.</p>\r\n<p>Declare a variable, displayedColumns and assign the list of column to be displayed.</p>\r\n<pre class=\"result notranslate\">\r\ndisplayedColumns: string[] = ['item', 'amount', 'category', 'location', 'spendOn' ];\r\n</pre>\r\n<p>Add material table as specified below in the <b>ExpenseEntryListComponent</b> template <b>(src/app/expense-entry-list/expense-entry-list.component.html)</b> and remove our existing list.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"mat-elevation-z8\"&gt;\r\n   &lt;table mat-table [dataSource]=\"expenseEntries\"&gt; \r\n      &lt;ng-container matColumnDef=\"item\"&gt;\r\n         &lt;th mat-header-cell *matHeaderCellDef&gt; Item &lt;/th&gt;\r\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align: left\"&gt; {{element.item}} &lt;/td&gt;\r\n      &lt;/ng-container&gt;\r\n\r\n      &lt;ng-container matColumnDef=\"amount\"&gt;\r\n         &lt;th mat-header-cell *matHeaderCellDef &gt; Amount &lt;/th&gt;\r\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align: left\"&gt; {{element.amount}} &lt;/td&gt;\r\n      &lt;/ng-container&gt;\r\n\r\n      &lt;ng-container matColumnDef=\"category\"&gt;\r\n         &lt;th mat-header-cell *matHeaderCellDef&gt; Category &lt;/th&gt;\r\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align: left\"&gt; {{element.category}} &lt;/td&gt;\r\n      &lt;/ng-container&gt;\r\n\r\n      &lt;ng-container matColumnDef=\"location\"&gt;\r\n         &lt;th mat-header-cell *matHeaderCellDef&gt; Location &lt;/th&gt;\r\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align:left\"&gt; {{element.location}} &lt;/td&gt;\r\n      &lt;/ng-container&gt;\r\n\r\n      &lt;ng-container matColumnDef=\"spendOn\"&gt;\r\n         &lt;th mat-header-cell *matHeaderCellDef&gt; Spend On &lt;/th&gt;\r\n         &lt;td mat-cell *matCellDef=\"let element\" style=\"text-align: left\"&gt; {{element.spendOn}} &lt;/td&gt;\r\n      &lt;/ng-container&gt;\r\n\r\n      &lt;tr mat-header-row *matHeaderRowDef=\"displayedColumns\"&gt;&lt;/tr&gt;\r\n      &lt;tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"&gt;&lt;/tr&gt;\r\n   &lt;/table&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>mat-table</b> property is used to convert the normal table in to material table.</p></li>\r\n<li><p><b>[dataSource]</b> property is used to specify the data source of the table.</p></li>\r\n<li><p>Material table is template based and each column can be designed using separate template. <b>ng-container</b> is used to create template.</p></li>\r\n<li><p><b>matColumnDef</b> is used to specify the column of the data source applied to the particular ng-container.</p></li>\r\n<li><p><b>mat-header-cell</b> is used to specify the header text for each column.</p></li>\r\n<li><p><b>mat-cell</b> is used to specify the content of each column.</p></li>\r\n<li><p><b>mat-header-row and mat-row</b> is used to specify the order of the column in row.</p></li>\r\n<li><p>We have used only the basic features of the Material table. Material table has many more features such as sorting, pagination, etc.</p></li>\r\n</ul>\r\n<p>Run the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>The output of the application is as follows &minus;</p>\r\n<!--<img src=\"images/expense_manager.jpg\" alt=\"Configure Angular\" />-->\r\n<h1>Angular 8 - Routing and Navigation</h1>\r\n<p>Navigation is one of the important aspect in a web application. Even though a single page application (SPA) does not have multiple page concept, it does moves from one view (list of expenses) to another view (expense details). Providing clear and understandable navigation elements decides the success of an application.</p>\r\n<p>Angular provides extensive set of navigation feature to accommodate simple scenario to complex scenario. The process of defining navigation element and the corresponding view is called <b>Routing</b>. Angular provides a separate module, <b>RouterModule</b> to set up the navigation in the Angular application. Let us learn the how to do the routing in Angular application in this chapter.</p>\r\n<h2>Configure Routing</h2>\r\n<p>Angular CLI provides complete support to setup routing during the application creation process as well as during working an application. Let us create a new application with router enabled using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng new routing-app --routing\r\n</pre>\r\n<p>Angular CLI generate a new module, AppRoutingModuele for routing purpose. The generated code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>Imports RouterModule</b> and Routes from @angular/router package.</p></li>\r\n<li><p>RouterMoudle provides functionality to configure and execute routing in the application.</p></li>\r\n<li><p>Routes is the type used to setup the navigation rules.</p></li>\r\n<li><p>Routes is the local variable (of type Routes) used to configure the actual navigation rules of the application.</p></li>\r\n<li><p>RouterMoudle.forRoot() method will setup the navigation rules configured in the routes variable.</p></li>\r\n</ul>\r\n<p>Angular CLI include the generated AppRoutingModule in AppComponent as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>AppComponent</b> imports the <b>AppRoutingModule</b> module using imports meta data.</p>\r\n<p>Angular CLI provides option to set routing in the existing application as well. The general command to include routing in an existing application is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate module my-module --routing\r\n</pre>\r\n<p>This will generate new module with routing features enabled. To enable routing feature in the existing module (AppModule), we need to include extra option as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate module app-routing --module app --flat\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>–module app</b> configures the newly created routing module, <b>AppRoutingModule</b> in the AppModule module.</p>\r\n<p>Let us configure the routing module in <b>ExpenseManager</b> application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Generate routing module using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate module app-routing --module app --flat\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/app-routing.module.ts (196 bytes) \r\nUPDATE src/app/app.module.ts (785 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<p>CLI generate <b>AppRoutingModule</b> and then, configures it in <b>AppModule</b></p>\r\n<h2>Creating routes</h2>\r\n<p>Creating a route is simple and easy. The basic information to create a route is given below &minus;</p>\r\n<ul class=\"list\">\r\n<li>Target component to be called.</li>\r\n<li>The path to access the target component.</li>\r\n</ul>\r\n<p>The code to create a simple route is mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nconst routes: Routes = [\r\n  { path: 'about', component: AboutComponent },\r\n];\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>Routes</b> is the variable in the AppRoutingModule.</p></li>\r\n<li><p><b>about</b> is the path and AboutComponent is the target / destination component. When user requests http://localhost:4200/about url, the path matches with about rule and then AboutComponent will be called.</p></li>\r\n</ul>\r\n<h2>Accessing routes</h2>\r\n<p>Let us learn how to use the configured routes in the application.</p>\r\n<p>Accessing the route is a two step process.</p>\r\n<p>Include <b>router-outlet</b> tag in the root component template.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>Use <b>routerLink</b> and <b>routerLinkActive</b> property in the required place.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;a routerLink=\"/about\" routerLinkActive=\"active\"&gt;First Component&lt;/a&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>routerLink</b> set the route to be called using the path.</p></li>\r\n<li><p><b>routerLinkActive</b> set the CSS class to be used when the route is activated.</p></li>\r\n</ul>\r\n<p>Sometime, we need to access routing inside the component instead of template. Then, we need to follow below steps &minus;</p>\r\n<p>Inject instance of <b>Router</b> and <b>ActivatedRoute</b> in the corresponding component.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Router, ActivatedRoute } from '@angular/router'; \r\nconstructor(private router: Router, private route: ActivatedRoute)\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>Router</b> provides the function to do <b>routing operations</b>.</p></li>\r\n<li><p><b>Route</b> refers the current <b>activate route.</b></p></li>\r\n</ul>\r\n<p>Use router’s navigate function.</p>\r\n<pre class=\"result notranslate\">\r\nthis.router.navigate(['about']);\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>navigate</b> function expects an array with necessary path information.</p>\r\n<h3>Using relative path</h3>\r\n<p>Route path is similar to web page URL and it supports relative path as well. To access <b>AboutComponent</b> from another component, say <b>HomePageComponent</b>, simple use .. notation as in web url or folder path.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;a routerLink=\"../about\"&gt;Relative Route to about component&lt;/a&gt;\r\n</pre>\r\n<p>To access relative path in the component &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { NavigationExtras } from '@angular/router'; \r\nthis.router.navigate(['about'], { relativeTo: this.route });\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>relativeTo</b> is available under <b>NavigationExtras</b> class.</p>\r\n<h3>Route ordering</h3>\r\n<p><b>Route ordering</b> is very important in a route configuration. If same path is configured multiple times, then the first matched path will get called. If the first match fails due to some reason, then the second match will get called.</p>\r\n<h3>Redirect routes</h3>\r\n<p>Angular route allows a path to get redirected to another path. <b>redirectTo</b> is the option to set redirection path. The sample route is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nconst routes: Routes = [ \r\n   { path: '', redirectTo: '/about' }, \r\n];\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><b>redirectTo</b> sets about as the redirection path if the actual path matches empty string.</li>\r\n</ul>\r\n<h3>Wildcard routes</h3>\r\n<p>Wildcard route will match any path. It is created using ** and will be used to handle non existing path in the application. Placing the wildcard route at the end of the configuration make it called when other path is not matched.</p>\r\n<p>The sample code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nconst routes: Routes = [\r\n  { path: 'about', component: AboutComponent },\r\n  { path: '',   redirectTo: '/about', pathMatch: 'full' },\r\n  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page\r\n];\r\n</pre>\r\n<p>Here,</p>\r\n<p>If a non existent page is called, then the first two route gets failed. But, the final wildcard route will succeed and the <b>PageNotFoundComponent</b> gets called.</p>\r\n<h2>Access Route parameters</h2>\r\n<p>In Angular, we can attach extra information in the path using parameter. The parameter can be accessed in the component by using paramMap interface. The syntax to create a new parameter in the route is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nconst routes: Routes = [\r\n  { path: 'about', component: AboutComponent },\r\n  { path: 'item/:id', component: ItemComponent },\r\n  { path: '',   redirectTo: '/about', pathMatch: 'full' },\r\n  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page\r\n];\r\n</pre>\r\n<p>Here, we have attached <b>id</b> in the path. <b>id</b> can be accessed in the <b>ItemComponent</b> using two techniques.</p>\r\n<ul class=\"list\">\r\n<li>Using Observable.</li>\r\n<li>Using snapshot (non-observable option).</li>\r\n</ul>\r\n<h3>Using Observable</h3>\r\n<p>Angular provides a special interface, paramMap to access the parameter of the path. parmaMap has following methods &minus;</p>\r\n<ul class=\"list\">\r\n<li><p><b>has(name)</b> &minus; Returns true if the specified name is available in the path (parameter list).</p></li>\r\n<li><p><b>get(name)</b> &minus; Returns the value of the specified name in the path (parameter list).</p></li>\r\n<li><p><b>getAll(name)</b> &minus; Returns the multiple value of the specified name in the path. get() method returns only the first value when multiple values are available.</p></li>\r\n<li><p><b>keys</b> &minus; Returns all parameter available in the path.</p></li>\r\n</ul>\r\n<p>Steps to access the parameter using <b>paramMap</b> are as follows &minus;</p>\r\n<ul class=\"list\">\r\n<li><p>Import <b>paramMap</b> available in <b>@angular/router</b> package.</p></li>\r\n<li><p>Use <b>paramMap</b> in the <b>ngOnInit()</b> to access the parameter and set it to a local variable.</p></li>\r\n</ul>\r\n<pre class=\"prettyprint notranslate\">\r\nngOnInit() {\r\n    this.route.paramMap.subscribe(params => {\r\n        this.id = params.get('id);\r\n    });\r\n}\r\n</pre>\r\n<p>We can use it directly in the rest service using <b>pipe</b> method.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nthis.item$ = this.route.paramMap.pipe(\r\n    switchMap(params =&gt; {\r\n      this.selectedId = Number(params.get('id'));\r\n      return this.service.getItem(this.selectedId);\r\n    })\r\n);\r\n</pre>\r\n<h3>Using snapshot</h3>\r\n<p><b>snapshot</b> is similar to <b>Observable</b> except, it does not support observable and get the parameter value immediately.</p>\r\n<pre class=\"result notranslate\">\r\nlet id = this.route.snapshot.paramMap.get('id');\r\n</pre>\r\n<h2>Nested routing</h2>\r\n<p>In general, <b>router-outlet</b> will be placed in root component <b>(AppComponent)</b> of the application. But, router-outlet can be used in any component. When router-outlet is used in a component other then root component, the routes for the particular component has to be configured as the children of the parent component. This is called <b>Nested routing</b>.</p>\r\n<p>Let us consider a component, say <b>ItemComponent</b> is configured with <b>router-outlet</b> and has two <b>routerLink</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h2&gt;Item Component&lt;/h2&gt; \r\n&lt;nav&gt; \r\n   &lt;ul&gt; \r\n      &lt;li&gt;&lt;a routerLink=\"view\"&gt;View&lt;/a&gt;&lt;/li&gt; \r\n      &lt;li&gt;&lt;a routerLink=\"edit\"&gt;Edit&lt;/a&gt;&lt;/li&gt; \r\n   &lt;/ul&gt;\r\n&lt;/nav&gt; \r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>The route for the ItemComponent has to be configured as <b>Nested routing</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nconst routes: Routes = [\r\n{ \r\n   path: 'item',\r\n\r\n   component: ItemComponent,\r\n   children: [\r\n   {\r\n      path: 'view',\r\n      component: ItemViewComponent\r\n   },\r\n   {\r\n   path: 'edit',\r\n   component: ItemEditComponent\r\n   }\r\n   ]\r\n}]\r\n</pre>\r\n<h3>Working example</h3>\r\n<p>Let us apply the routing concept learned in this chapter in our <b>ExpenseManager</b> application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Generate routing module using below command, if not done before.</p>\r\n<pre class=\"result notranslate\">\r\nng generate module app-routing --module app --flat\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/app-routing.module.ts (196 bytes) UPDATE src/app/app.module.ts (785 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<p>CLI generate <b>AppRoutingModule</b> and then configures it in <b>AppModule</b>.</p>\r\n<p>Update <b>AppRoutingModule (src/app/app.module.ts)</b> as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core'; \r\nimport { Routes, RouterModule } from '@angular/router'; import { ExpenseEntryComponent } from './expense-entry/expense-entry.component'; \r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component'; \r\nconst routes: Routes = [ \r\n   { path: 'expenses', component: ExpenseEntryListComponent }, \r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent }, \r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }]; \r\n@NgModule({ \r\n   imports: [RouterModule.forRoot(routes)], \r\n   exports: [RouterModule] }) \r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here, we have added route for our expense list and expense details component.</p>\r\n<p>Update <b>AppComponent</b> template <b>(src/app/app.component.html)</b> to include <b>router-outlet</b> and <b>routerLink.</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt; \r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt; \r\n&lt;div class=\"container\"&gt; \r\n   &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; \r\n      &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; \r\n   &lt;/button&gt; \r\n   &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt; \r\n      &lt;ul class=\"navbar-nav ml-auto\"&gt; \r\n         &lt;li class=\"nav-item active\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Home \r\n               &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt; \r\n            &lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" routerLink=\"/expenses\"&gt;Report&lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt; \r\n         &lt;/li&gt; \r\n      &lt;/ul&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt; \r\n&lt;/nav&gt; \r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and include view option for every expense entries.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;table class=\"table table-striped\"&gt; \r\n   &lt;thead&gt; \r\n      &lt;tr&gt; \r\n         &lt;th&gt;Item&lt;/th&gt;\r\n         &lt;th&gt;Amount&lt;/th&gt; \r\n         &lt;th&gt;Category&lt;/th&gt; \r\n         &lt;th&gt;Location&lt;/th&gt; \r\n         &lt;th&gt;Spent On&lt;/th&gt; \r\n         &lt;th&gt;View&lt;/th&gt; \r\n      &lt;/tr&gt; \r\n   &lt;/thead&gt; \r\n   &lt;tbody&gt; \r\n      &lt;tr *ngFor=\"let entry of expenseEntries\"&gt; \r\n         &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt; \r\n         &lt;th&gt;{{ entry.amount }}&lt;/th&gt; \r\n         &lt;td&gt;{{ entry.category }}&lt;/td&gt; \r\n         &lt;td&gt;{{ entry.location }}&lt;/td&gt; \r\n         &lt;td&gt;{{ entry.spendOn | date: 'medium' }}&lt;/td&gt; \r\n         &lt;td&gt;&lt;a routerLink=\"../expenses/detail/{{ entry.id }}\"&gt;View&lt;/a&gt;&lt;/td&gt; \r\n      &lt;/tr&gt; \r\n   &lt;/tbody&gt; \r\n&lt;/table&gt;\r\n</pre>\r\n<p>Here, we have updated the expense list table and added a new column to show the view option.</p>\r\n<p>Open <b>ExpenseEntryComponent (src/app/expense-entry/expense-entry.component.ts)</b> and add functionality to fetch the current selected expense entry. It can be done by first getting the id through the <b>paramMap</b> and then, using the <b>getExpenseEntry()</b> method from <b>ExpenseEntryService</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nthis.expenseEntry$ = this.route.paramMap.pipe(  \r\n   switchMap(params =&gt; { \r\n      this.selectedId = Number(params.get('id')); \r\n      return \r\nthis.restService.getExpenseEntry(this.selectedId); })); \r\n   this.expenseEntry$.subscribe( (data) =&gt; this.expenseEntry = data );\r\n</pre>\r\n<p>Update ExpenseEntryComponent and add option to go to expense list.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngoToList() { \r\n   this.router.navigate(['/expenses']); \r\n}\r\n</pre>\r\n<p>The complete code of ExpenseEntryComponent is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { ExpenseEntry } from '../expense-entry'; import { ExpenseEntryService } from '../expense-entry.service'; \r\nimport { Router, ActivatedRoute } from '@angular/router'; \r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators'; \r\n@Component({ \r\n   selector: 'app-expense-entry', \r\n   templateUrl: './expense-entry.component.html', \r\n   styleUrls: ['./expense-entry.component.css'] \r\n}) \r\nexport class ExpenseEntryComponent implements OnInit { \r\n   title: string; \r\n   expenseEntry$ : Observable&lt;ExpenseEntry&gt;; \r\n   expenseEntry: ExpenseEntry = {} as ExpenseEntry; \r\n   selectedId: number; \r\n   constructor(private restService : ExpenseEntryService, private router : Router, private route : \r\nActivatedRoute ) { } \r\n   ngOnInit() { \r\n      this.title = \"Expense Entry\"; \r\n   this.expenseEntry$ = this.route.paramMap.pipe( \r\n      switchMap(params =&gt; { \r\n         this.selectedId = Number(params.get('id')); \r\n         return \r\nthis.restService.getExpenseEntry(this.selectedId); })); \r\n   this.expenseEntry$.subscribe( (data) =&gt; this.expenseEntry = data ); \r\n   } \r\n   goToList() { \r\n      this.router.navigate(['/expenses']); \r\n   } \r\n}\r\n</pre>\r\n<p>Open <b>ExpenseEntryComponent (src/app/expense-entry/expense-entry.component.html)</b> template and add a new button to navigate back to expense list page.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n   &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"goToList()\"&gt;Go to List&lt;/button&gt; &nbsp;\r\n   &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here, we have added <b>Go to List</b> button before <b>Edit</b> button.</p>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>The final output of the application is as follows &minus;</p>\r\n<!--<img src=\"images/nested_routing.jpg\" alt=\"Nested routing\" />-->\r\n<p>Clicking the view option of the first entry will navigate to details page and show the selected expense entry as shown below &minus;</p>\r\n<!--<img src=\"images/nested_routings.jpg\" alt=\"Nested routing\" />-->\r\n<h1>Angular 8 - Animations</h1>\r\n<p>Animation gives the web application a refreshing look and rich user interaction. In HTML, animation is basically the transformation of HTML element from one CSS style to another over a specific period of time. For example, an image element can be enlarged by changing its width and height.</p>\r\n<p>If the width and height of the image is changed from initial value to final value in steps over a period of time, say 10 seconds, then we get an animation effect. So, the scope of the animation depends on the feature / property provided by the CSS to style a HTML element.</p>\r\n<p>Angular provides a separate module <b>BrowserAnimationModule</b> to do the animation. <b>BrowserAnimationModule</b> provides an easy and clear approach to do animation.</p>\r\n<h2>Configuring animation module</h2>\r\n<p>Let us learn how to configure animation module in this chapter.</p>\r\n<p>Follow below mentioned steps to configure animation module, <b>BrowserAnimationModule</b> in an application.</p>\r\n<p>Import <b>BrowserAnimationModule</b> in AppModule.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'; \r\n@NgModule({ \r\n   imports: [ \r\n      BrowserModule, \r\n      BrowserAnimationsModule \r\n   ], \r\n   declarations: [ ], \r\n   bootstrap: [ ] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p>Import animation function in the relevant components.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { state, style, transition, animate, trigger } from '@angular/animations'\r\n</pre>\r\n<p>Add <b>animations</b> metadata property in the relevant component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@Component({ \r\n   animations: [ \r\n      // animation functionality goes here \r\n   ] \r\n}) \r\nexport class MyAnimationComponent\r\n</pre>\r\n<h2>Concepts</h2>\r\n<p>In angular, we need to understand the five core concept and its relationship to do animation.</p>\r\n<p>State</p>\r\n<p>State refers the specific state of the component. A component can have multiple defined state. The state is created using state() method. state() method has two arguments.</p>\r\n<ul class=\"list\">\r\n<li><p><b>name</b> &minus; Unique name of the state.</p></li>\r\n<li><p><b>style</b> &minus; Style of the state defined using style() method.</p></li>\r\n</ul>\r\n<pre class=\"prettyprint notranslate\">\r\nanimations: [ \r\n   ... \r\n   state('start', style( { width: 200px; } )) \r\n   ... \r\n]\r\n</pre>\r\n<p>Here, <b>start</b> is the name of the state.</p>\r\n<p>Style</p>\r\n<p><b>Style</b> refers the CSS style applied in a particular state. style() method is used to style the particular state of a component. It uses the CSS property and can have multiple items.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nanimations: [ \r\n   ... \r\n   state('start', style( { width: 200px; opacity: 1 } )) \r\n   ... \r\n]\r\n</pre>\r\n<p>Here, <b>start</b> state defines two CSS property, <b>width</b> with value 200px and opacity with value 1.</p>\r\n<h3>Transition</h3>\r\n<p><b>Transition</b> refers the transition from one state to another. Animation can have multiple transition. Each transition is defined using transition() function. transition() takes two argument.</p>\r\n<ul class=\"list\">\r\n<li><p>Specifies the direction between two transition state. For example, <b>start =&gt; end </b>refers that the initial state is <b>start</b> and the final state is <b>end</b>. Actually, it is an expression with rich functionality.</p></li>\r\n<li><p>Specifies the animation details using <b>animate()</b> function.</p></li>\r\n</ul>\r\n<pre class=\"prettyprint notranslate\">\r\nanimations: [ \r\n   ... \r\n   transition('start =&gt; end', [ \r\n      animate('1s') \r\n   ])\r\n   ... \r\n]\r\n</pre>\r\n<p>Here, <b>transition()</b> function defines the transition from start state to end state with animation defined in <b>animate()</b> method.</p>\r\n<h3>Animation</h3>\r\n<p>Animation defines the way the transition from one state to another take place. <b>animation()</b> function is used to set the animation details. <b>animate()</b> takes a single argument in the form of below expression &minus;</p>\r\n<pre class=\"result notranslate\">\r\nduration delay easing\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p><b>duration</b> &minus; refers the duration of the transition. It is expressed as 1s, 100ms, etc.,</p></li>\r\n<li><p><b>delay</b> &minus; refers the delay time to start the transition. It is expressed similar to <i>duration</i></p></li>\r\n<li><p><b>easing</b> &minus; refers how do to accelerates / decelerates the transition in the given time duration.</p></li>\r\n</ul>\r\n<h3>Trigger</h3>\r\n<p>Every animation needs a trigger to start the animation. trigger() method is used to set all the animation information such as state, style, transition and animation in one place and give it a unique name. The unique name is used further to trigger the animation.</p>\r\n<pre class=\"result notranslate\">\r\nanimations: [ \r\n   trigger('enlarge', [ \r\n      state('start', style({ \r\n         height: '200px', \r\n      })), \r\n      state('end', style({ \r\n         height: '500px', \r\n      })), \r\n      transition('start =&gt; end', [ \r\n         animate('1s') \r\n      ]), \r\n      transition('end =&gt; start', [ \r\n         animate('0.5s') \r\n   ]) ]), \r\n]\r\n</pre>\r\n<p>Here, <b>enlarge</b> is the unique name given to the particular animation. It has two state and related styles. It has two transition one from start to end and another from end to start. End to start state do the reverse of the animation.</p>\r\n<p><b>Trigger</b> can be attached to an element as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;div [@triggerName]=\"expression\"&gt;...&lt;/div&gt;;\r\n</pre>\r\n<p>For example,</p>\r\n<pre class=\"result notranslate\">\r\n&lt;img [@enlarge]=\"isEnlarge ? 'end' : 'start'\"&gt;...&lt;/img&gt;;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>@enlarge</b> &minus; trigger is set to image tag and attrached to an expression.</p></li>\r\n<li><p>If <b>isEnlarge</b> value is changed to true, then <b>end</b> state will be set and it triggers <b>start =&gt;</b> end transition.</p></li>\r\n<li><p>If <b>isEnlarge</b> value is changed to false, then <b>start</b> state will be set and it triggers <b>end =&gt; start transition</b>.</p></li>\r\n</ul>\r\n<h3>Simple Animation Example</h3>\r\n<p>Let us write a new angular application to better understand the animation concept by enlarging an image with animation effect.</p>\r\n<p>Open command prompt and create new angular application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/workspace \r\nng new animation-app \r\ncd animation-app\r\n</pre>\r\n<p>Configure <b>BrowserAnimationModule</b> in the <b>AppModule</b> (src/app/app.module.ts)</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserModule } from '@angular/platform-browser'; \r\nimport { NgModule } from '@angular/core' \r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'; \r\nimport { AppComponent } from './app.component'; @NgModule({ \r\n   declarations: [ \r\n      AppComponent \r\n   ], \r\n   imports: [ \r\n      BrowserModule, \r\n      BrowserAnimationsModule \r\n   ], \r\n   providers: [], \r\n   bootstrap: [AppComponent] \r\n}) \r\nexport class AppModule { }\r\n</pre>\r\n<p>Open <b>AppComponent (src/app/app.component.ts)</b> and import necessary animation functions.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { state, style, transition, animate, trigger } from '@angular/animations';\r\n</pre>\r\n<p>Add animation functionality, which will animate the image during the enlarging / shrinking of the image.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css'],\r\n   animations: [\r\n      trigger('enlarge', [\r\n         state('start', style({\r\n            height: '150px'\r\n         })),\r\n         state('end', style({\r\n            height: '250px'\r\n         })),\r\n         transition('start => end', [\r\n            animate('1s 2s')\r\n         ]),\r\n         transition('end => start', [\r\n            animate('1s 2s')\r\n         ])\r\n      ])\r\n   ]\r\n})\r\n</pre>\r\n<p>Open <b>AppComponent</b> template, <b>src/app/app.component.html</b> and remove sample code. Then, include a header with application title, image and a button to enlarge / shrink the image.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt; \r\n&lt;img src=\"assets/puppy.jpeg\" style=\"height: 200px\" /&gt; &lt;br /&gt; \r\n&lt;button&gt;{{ this.buttonText }}&lt;/button&gt;\r\n</pre>\r\n<p>Write a function to change the animation expression.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class AppComponent { \r\n   title = 'Animation Application'; \r\n   isEnlarge: boolean = false; \r\n   buttonText: string = \"Enlarge\"; \r\n   triggerAnimation() { \r\n      this.isEnlarge = !this.isEnlarge; \r\n      if(this.isEnlarge) \r\n         this.buttonText = \"Shrink\"; \r\n      else \r\n         this.buttonText = \"Enlarge\"; \r\n   } \r\n}\r\n</pre>\r\n<p>Attach the animation in the image tag. Also, attach the click event for the button.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;img [@enlarge]=\"isEnlarge ? 'end' : 'start'\" src=\"assets/puppy.jpeg\" style=\"height: 200px\" /&gt;\r\n&lt;br /&gt;\r\n&lt;button (click)='triggerAnimation()'&gt;{{ this.buttonText }}&lt;/button&gt;\r\n</pre>\r\n<p>The complete <b>AppComponent</b> code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component } from '@angular/core';\r\nimport { state, style, transition, animate, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css'],\r\n   animations: [\r\n      trigger('enlarge', [\r\n         state('start', style({\r\n            height: '150px'\r\n         })),\r\n         state('end', style({\r\n            height: '250px'\r\n         })),\r\n         transition('start =&gt; end', [\r\n            animate('1s 2s')\r\n         ]),\r\n         transition('end =&gt; start', [\r\n            animate('1s 2s')\r\n         ])\r\n      ])\r\n   ]\r\n})\r\nexport class AppComponent {\r\n   title = 'Animation Application';\r\n   isEnlarge: boolean = false;\r\n   buttonText: string = \"Enlarge\";\r\n\r\n\r\n   triggerAnimation() {\r\n      this.isEnlarge = !this.isEnlarge;\r\n\r\n      if(this.isEnlarge) \r\n         this.buttonText = \"Shrink\";\r\n      else\r\n         this.buttonText = \"Enlarge\";\r\n   }\r\n}\r\n</pre>\r\n<p>The complete AppComponent template code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;img [@enlarge]=\"isEnlarge ? 'end' : 'start'\" src=\"assets/puppy.jpeg\" style=\"height: 200px\" /&gt;\r\n&lt;br /&gt;\r\n&lt;button (click)='triggerAnimation()'&gt;{{ this.buttonText }}&lt;/button&gt;\r\n</pre>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Click the enlarge button, it will enlarge the image with animation. The result will be as shown below &minus;</p>\r\n<!--<img src=\"images/appcomponents.jpg\" alt=\"appcomponents\" />-->\r\n<p>Click the button again to shrink it. The result will be as shown below &minus;</p>\r\n<!--<img src=\"images/shrink.jpg\" alt=\"shrink\" />-->\r\n<h1>Angular 8 - Forms</h1>\r\n<p>Forms are used to handle user input data. Angular 8 supports two types of forms. They are <b>Template driven forms</b> and <b>Reactive forms</b>. This section explains about Angular 8 forms in detail.</p>\r\n<h2>Template driven forms</h2>\r\n<p>Template driven forms is created using directives in the template. It is mainly used for creating a simple form application. Let’s understand how to create template driven forms in brief.</p>\r\n<h3>Configure Forms</h3>\r\n<p>Before understanding forms, let us learn how to configure forms in an application. To enable template driven forms, first we need to import <b>FormsModule</b> in <b>app.module.ts.</b> It is given below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n//import FormsModule here\r\nimport { FormsModule } from '@angular/forms'; \r\n\r\nimports: [\r\n   BrowserModule,\r\n   AppRoutingModule,\r\n   FormsModule   //Assign FormsModule\r\n],\r\n</pre>\r\n<p>Once, <b>FormsModule</b> is imported, the application will be ready for form programming.</p>\r\n<h3>Create simple form</h3>\r\n<p>Let us create a sample application <b>(template-form-app)</b> in Angular 8 to learn the template driven form.</p>\r\n<p>Open command prompt and create new Angular application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/workspace \r\nng new template-form-app \r\ncd template-form-app\r\n</pre>\r\n<p>Configure <b>FormsModule</b> in <b>AppComponent</b> as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n...\r\n\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n   declarations: [\r\n      AppComponent,\r\n      TestComponent\r\n   ],\r\n   imports: [\r\n      BrowserModule,\r\n      FormsModule\r\n   ],\r\n   providers: [],\r\n   bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n</pre>\r\n<p>Create a test component using Angular CLI as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component test\r\n</pre>\r\n<p>The above create a new component and the output is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/test/test.component.scss (0 bytes)\r\nCREATE src/app/test/test.component.html (19 bytes)\r\nCREATE src/app/test/test.component.spec.ts (614 bytes)\r\nCREATE src/app/test/test.component.ts (262 bytes)\r\nUPDATE src/app/app.module.ts (545 bytes)\r\n</pre>\r\n<p>Let’s create a simple form to display user entered text.</p>\r\n<p>Add the below code in <b>test.component.html</b> file as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;form #userName=\"ngForm\" (ngSubmit)=\"onClickSubmit(userName.value)\"&gt; \r\n   &lt;input type=\"text\" name=\"username\" placeholder=\"username\" ngModel&gt; \r\n   &lt;br/&gt; \r\n   &lt;br/&gt; \r\n   &lt;input type=\"submit\" value=\"submit\"&gt; \r\n&lt;/form&gt;\r\n</pre>\r\n<p>Here, we used <b>ngModel</b> attribute in <b>input</b> text field.</p>\r\n<p>Create <b>onClickSubmit()</b> method inside <b>test.component.ts</b> file as shown below</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n   selector: 'app-test',\r\n   templateUrl: './test.component.html',\r\n   styleUrls: ['./test.component.scss']\r\n})\r\n\r\nexport class TestComponent implements OnInit {\r\n\r\n   ngOnInit() {\r\n   }\r\n   onClickSubmit(result) {\r\n      console.log(\"You have entered : \" + result.username); \r\n   }\r\n}\r\n</pre>\r\n<p>Open app.component.html and change the content as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;app-test&gt;&lt;/app-test&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/form.jpg\" alt=\"Form\" />-->\r\n<p>Enter <b>Peter</b> in input text field and enter submit. <b>onClickSubmit</b> function will be called and user entered text <b>Peter</b> will be send as an argument. <b>onClickSubmit</b> will print the user name in the console and the output is as follows &minus;</p>\r\n<!--<img src=\"images/forms.jpg\" alt=\"Forms\" />-->\r\n<h2>Reactive Forms</h2>\r\n<p><b>Reactive Forms</b> is created inside component class so it is also referred as model driven forms. Every form control will have an object in the component and this provides greater control and flexibility in the form programming. <b>Reactive Form</b> is based on structured data model. Let’s understand how to use Reactive forms in angular.</p>\r\n<h3>Configure Reactive forms</h3>\r\n<p>To enable reactive forms, first we need to import <b>ReactiveFormsModule</b> in <b>app.module.ts</b>. It is defined below</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { TestComponent } from './test/test.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n//import ReactiveFormsModule here\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule, \r\n    ReactiveFormsModule   //Assign here\r\n  ]\r\n</pre>\r\n<h3>Create Reactive forms</h3>\r\n<p>Before moving to create Reactive forms, we need to understand about the following concepts,</p>\r\n<ul class=\"list\">\r\n<li><p><b>FormControl</b> &minus; Define basic functionality of individual form control</p></li>\r\n<li><p><b>FormGroup</b> &minus; Used to aggregate the values of collection form control</p></li>\r\n<li><p><b>FormArray</b> &minus; Used to aggregate the values of form control into an array</p></li>\r\n<li><p><b>ControlValueAccessor</b> &minus; Acts as an interface between Forms API to HTML DOM elements.</p></li>\r\n</ul>\r\n<p>Let us create a sample application <b>(reactive-form-app)</b> in Angular 8 to learn the template driven form.</p>\r\n<p>Open command prompt and create new Angular application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/workspace\r\nng new reactive-form-app\r\ncd reactive-form-app\r\n</pre>\r\n<p>Configure <b>ReactiveFormsModule</b> in <b>AppComponent</b> as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n...\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n   declarations: [\r\n      AppComponent,\r\n      TestComponent\r\n   ],\r\n   imports: [\r\n      BrowserModule,\r\n      ReactiveFormsModule\r\n   ],\r\n   providers: [],\r\n   bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n</pre>\r\n<p>Create a <b>test</b> component using Angular CLI as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component test\r\n</pre>\r\n<p>The above create a new component and the output is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/test/test.component.scss (0 bytes)\r\nCREATE src/app/test/test.component.html (19 bytes)\r\nCREATE src/app/test/test.component.spec.ts (614 bytes)\r\nCREATE src/app/test/test.component.ts (262 bytes)\r\nUPDATE src/app/app.module.ts (545 bytes)\r\n</pre>\r\n<p>Let’s create a simple form to display user entered text.</p>\r\n<p>We need to import <b>FormGroup, FormControl</b> classes in <b>TestComponent</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\n</pre>\r\n<p>Create <b>onClickSubmit()</b> method inside <b>test.component.ts</b> file as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n   selector: 'app-test',\r\n   templateUrl: './test.component.html',\r\n   styleUrls: ['./test.component.css']\r\n})\r\nexport class TestComponent implements OnInit {\r\n   userName; \r\n   formdata;\r\n   ngOnInit() { \r\n      this.formdata = new FormGroup({ \r\n         userName: new FormControl(\"Tutorialspoint\")\r\n      }); \r\n   } \r\n   onClickSubmit(data) {this.userName = data.userName;}\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Created an instance of <b>formGroup</b> and set it to local variable, formdata.</p></li>\r\n<li><p>Crete an instance of <b>FormControl</b> and set it one of the entry in formdata.</p></li>\r\n<li><p>Created a <b>onClickSubmit()</b> method, which sets the local variable, <b>userName</b> with its argument.</p></li>\r\n</ul>\r\n<p>Add the below code in <b>test.component.html</b> file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div&gt; \r\n   &lt;form [formGroup]=\"formdata\" (ngSubmit)=\"onClickSubmit(formdata.value)\" &gt; \r\n      &lt;input type= text\"  name=\"userName\" placeholder=\"userName\" \r\n         formControlName = \"userName\"&gt; \r\n      &lt;br/&gt;\r\n      &lt;br/&gt;\r\n      &lt;input type=\"submit\"  value=\"Click here\"&gt; \r\n   &lt;/form&gt;\r\n&lt;/div&gt; \r\n&lt;p&gt; Textbox result is: {{userName}} &lt;/p&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>New form is created and set it’s <b>formGroup</b> property to formdata.</p></li>\r\n<li><p>New input text field is created and set is <b>formControlName to username.</b></p></li>\r\n<li><p><b>ngSubmit</b> event property is used in the form and set onClickSubmit() method as its value.</p></li>\r\n<li><p><b>onClickSubmit()</b> method gets formdata values as its arguments.</p></li>\r\n</ul>\r\n<p>Open <b>app.component.html</b> and change the content as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;app-test&gt;&lt;/app-test&gt;\r\n</pre>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now, run your application and you could see the below response &minus;</p>\r\n<!--<img src=\"images/response.jpg\" alt=\"Nested response\" />-->\r\n<p>Enter <b>Tutorialspoint</b> in input text field and enter submit. <b>onClickSubmit</b> function will be called and user entered text <b>Peter</b> will be send as an argument.</p>\r\n<!--<img src=\"images/responses.jpg\" alt=\"responses\" />-->\r\n<p>We will perform Forms validation in next chapter.</p>\r\n<h1>Angular 8 - Form Validation</h1>\r\n<p>Form validation is an important part of web application. It is used to validate whether the user input is in correct format or not.</p>\r\n<h2>RequiredValidator</h2>\r\n<p>Let’s perform simple required field validation in angular.</p>\r\n<p>Open command prompt and go to <b>reactive-form-app</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/reactive-form-app\r\n</pre>\r\n<p>Replace the below code in <b>test.component.ts </b>file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n//import validator and FormBuilder\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\n\r\n@Component({\r\n   selector: 'app-test',\r\n   templateUrl: './test.component.html',\r\n   styleUrls: ['./test.component.css']\r\n})\r\n\r\nexport class TestComponent implements OnInit {\r\n   //Create FormGroup\r\n   requiredForm: FormGroup;\r\n   constructor(private fb: FormBuilder) {\r\n      this.myForm();\r\n   }\r\n\r\n   //Create required field validator for name\r\n   myForm() {\r\n      this.requiredForm = this.fb.group({\r\n      name: ['', Validators.required ]\r\n      });\r\n   }\r\n   ngOnInit()\r\n   {\r\n\r\n   }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have used form builder to handle all the validation. Constructor is used to create a form with the validation rules.</p>\r\n<p>Add the below code inside <b>test.component.html</b> file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div&gt;\r\n   &lt;h2&gt;\r\n     Required Field validation\r\n   &lt;/h2&gt;\r\n   &lt;form [formGroup]=\"requiredForm\" novalidate&gt;\r\n         &lt;div class=\"form-group\"&gt;\r\n           &lt;label class=\"center-block\"&gt;Name:\r\n             &lt;input class=\"form-control\" formControlName=\"name\"&gt;\r\n           &lt;/label&gt;\r\n         &lt;/div&gt;\r\n         &lt;div *ngIf=\"requiredForm.controls['name'].invalid && requiredForm.controls['name'].touched\" class=\"alert alert-danger\"&gt;\r\n             &lt;div *ngIf=\"requiredForm.controls['name'].errors.required\"&gt;\r\n             Name is required.\r\n           &lt;/div&gt;\r\n         &lt;/div&gt;\r\n   &lt;/form&gt;\r\n &lt;p&gt;Form value: {{ requiredForm.value | json }}&lt;/p&gt;\r\n &lt;p&gt;Form status: {{ requiredForm.status | json }}&lt;/p&gt;\r\n &lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>requiredForm</b> is called global form group object. It is a parent element. Form controls are childrens of requiredForm.</p></li>\r\n<li><p>Conditional statement is used to check, if a user has touched the input field but not enter the values then, it displays the error message.</p></li>\r\n</ul>\r\n<p>Finally, start your application (if not done already) using the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Now run your application and put focus on text box. Then, it will use show Name is required as shown below &minus;</p>\r\n<!--<img src=\"images/validation.jpg\" alt=\"Validation\" />-->\r\n<p>If you enter text in the textbox, then it is validated and the output is shown below &minus;</p>\r\n<!--<img src=\"images/validations.jpg\" alt=\"Validations\" />-->\r\n<h2>PatternValidator</h2>\r\n<p><b>PatternValidator</b> is used to validate regex pattern. Let’s perform simple email validation.</p>\r\n<p>Open command prompt and to <b>reactive-form-app.</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/reactive-form-app\r\n</pre>\r\n<p>Replace below code in test.component.ts file &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from \r\n'@angular/forms';\r\n\r\n@Component({\r\n   selector: 'app-test',\r\n   templateUrl: './test.component.html',\r\n   styleUrls: ['./test.component.css']\r\n})\r\n\r\nexport class TestComponent implements OnInit {\r\n   requiredForm: FormGroup;\r\n   constructor(private fb: FormBuilder) {\r\n      this.myForm();\r\n   }\r\n\r\n   myForm() {\r\n      this.requiredForm = this.fb.group({\r\n      email: ['', [Validators.required, \r\n         Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")] ]\r\n      });\r\n   }\r\n\r\n   ngOnInit()\r\n   {\r\n\r\n   }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p>Added email pattern validator inside the Validator.</p>\r\n<p>Update below code in test.component.html file &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div&gt;\r\n   &lt;h2&gt;\r\n   Pattern validation\r\n   &lt;/h2&gt;\r\n   &lt;form [formGroup]=\"requiredForm\" novalidate&gt;\r\n   &lt;div class=\"form-group\"&gt;\r\n      &lt;label class=\"center-block\"&gt;Email:\r\n      &lt;input class=\"form-control\" formControlName=\"email\"&gt;\r\n      &lt;/label&gt;\r\n   &lt;/div&gt;\r\n   &lt;div *ngIf=\"requiredForm.controls['email'].invalid && requiredForm.controls['email'].touched\" class=\"alert alert-danger\"&gt;\r\n       &lt;div *ngIf=\"requiredForm.controls['email'].errors.required\"&gt;\r\n      Email is required.\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n   &lt;/form&gt;\r\n   &lt;p&gt;Form value: {{ requiredForm.value | json }}&lt;/p&gt;\r\n   &lt;p&gt;Form status: {{ requiredForm.status | json }}&lt;/p&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here, we have created the email control and called email validator.</p>\r\n<p>Run your application and you could see the below result &minus;</p>\r\n<!--<img src=\"images/patternvalidator.jpg\" alt=\"PatternValidator\" />-->\r\n<p></p>\r\n<!--<img src=\"images/patternvalidators.jpg\" alt=\"PatternValidators\" />-->\r\n<p>Similarly, you can try yourself to perform other types of validators.</p>\r\n<h1>Angular 8 - Authentication and Authorization</h1>\r\n<p><b>Authentication</b> is the process matching the visitor of a web application with the pre-defined set of user identity in the system. In other word, it is the process of recognizing the user’s identity. Authentication is very important process in the system with respect to security.</p>\r\n<p><b>Authorization</b> is the process of giving permission to the user to access certain resource in the system. Only the authenticated user can be authorised to access a resource.</p>\r\n<p>Let us learn how to do Authentication and Authorization in Angular application in this chapter.</p>\r\n<h2>Guards in Routing</h2>\r\n<p>In a web application, a resource is referred by url. Every user in the system will be allowed access a set of urls. For example, an administrator may be assigned all the url coming under administration section.</p>\r\n<p>As we know already, URLs are handled by <b>Routing</b>. Angular routing enables the urls to be guarded and restricted based on programming logic. So, a url may be denied for a normal user and allowed for an administrator.</p>\r\n<p>Angular provides a concept called <b>Router Guards</b> which can be used to prevent unauthorised access to certain part of the application through routing. Angular provides multiple guards and they are as follows:</p>\r\n<ul class=\"list\">\r\n<li><p><b>CanActivate</b> &minus; Used to stop the access to a route.</p></li>\r\n<li><p><b>CanActivateChild</b> &minus; Used to stop the access to a child route.</p></li>\r\n<li><p><b>CanDeactivate</b> &minus; Used to stop ongoing process getting feedback from user. For example, delete process can be stop if the user replies in negative.</p></li>\r\n<li><p><b>Resolve</b> &minus; Used to pre-fetch the data before navigating to the route.</p></li>\r\n<li><p><b>CanLoad</b> &minus; Used to load assets.</p></li>\r\n</ul>\r\n<h3>Working example</h3>\r\n<p>Let us try to add login functionality to our application and secure it using CanActivate guard.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Create a new service, AuthService to authenticate the user.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate service auth\r\nCREATE src/app/auth.service.spec.ts (323 bytes)\r\nCREATE src/app/auth.service.ts (133 bytes)\r\n</pre>\r\n<p>Open <b>AuthService</b> and include below code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, delay } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n   isUserLoggedIn: boolean = false;\r\n\r\n   login(userName: string, password: string): Observable<boolean> {\r\n      console.log(userName);\r\n      console.log(password);\r\n      this.isUserLoggedIn = userName == 'admin' && password == 'admin';\r\n      localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \r\n\r\n   return of(this.isUserLoggedIn).pipe(\r\n      delay(1000),\r\n      tap(val => { \r\n         console.log(\"Is User Authentication is successful: \" + val); \r\n      })\r\n   );\r\n   }\r\n\r\n   logout(): void {\r\n   this.isUserLoggedIn = false;\r\n      localStorage.removeItem('isUserLoggedIn'); \r\n   }\r\n\r\n   constructor() { }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>We have written two methods, <b>login</b> and <b>logout</b>.</p></li>\r\n<li><p>The purpose of the <b>login</b> method is to validate the user and if the user successfully validated, it stores the information in <b>localStorage</b> and then returns true.</p></li>\r\n<li><p>Authentication validation is that the user name and password should be <b>admin.</b></p></li>\r\n<li><p>We have not used any backend. Instead, we have simulated a delay of 1s using Observables.</p></li>\r\n<li><p>The purpose of the <b>logout</b> method is to invalidate the user and removes the information stored in <b>localStorage.</b></p></li>\r\n</ul>\r\n<p>Create a <b>login</b> component using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component login\r\nCREATE src/app/login/login.component.html (20 bytes)\r\nCREATE src/app/login/login.component.spec.ts (621 bytes)\r\nCREATE src/app/login/login.component.ts (265 bytes)\r\nCREATE src/app/login/login.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1207 bytes)\r\n</pre>\r\n<p>Open <b>LoginComponent</b> and include below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n   selector: 'app-login',\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n   userName: string;\r\n   password: string;\r\n   formData: FormGroup;\r\n\r\n   constructor(private authService : AuthService, private router : Router) { }\r\n\r\n   ngOnInit() {\r\n      this.formData = new FormGroup({\r\n         userName: new FormControl(\"admin\"),\r\n         password: new FormControl(\"admin\"),\r\n      });\r\n   }\r\n\r\n   onClickSubmit(data: any) {\r\n      this.userName = data.userName;\r\n      this.password = data.password;\r\n\r\n      console.log(\"Login page: \" + this.userName);\r\n      console.log(\"Login page: \" + this.password);\r\n\r\n      this.authService.login(this.userName, this.password)\r\n         .subscribe( data =&gt; { \r\n            console.log(\"Is Login Success: \" + data); \r\n      \r\n           if(data) this.router.navigate(['/expenses']); \r\n      });\r\n   }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Used reactive forms.</p></li>\r\n<li><p>Imported AuthService and Router and configured it in constructor.</p></li>\r\n<li><p>Created an instance of FormGroup and included two instance of FormControl, one for user name and another for password.</p></li>\r\n<li><p>Created a onClickSubmit to validate the user using authService and if successful, navigate to expense list.</p></li>\r\n</ul>\r\n<p>Open <b>LoginComponent</b> template and include below template code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container box\" style=\"margin-top: 10px; padding-left: 0px; padding-right: 0px;\"&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-12\" style=\"text-align: center;\"&gt;\r\n                                    &lt;form [formGroup]=\"formData\" (ngSubmit)=\"onClickSubmit(formData.value)\" \r\n                                          class=\"form-signin\"&gt;\r\n                                    &lt;h2 class=\"form-signin-heading\"&gt;Please sign in&lt;/h2&gt;\r\n                                    &lt;label for=\"inputEmail\" class=\"sr-only\"&gt;Email address&lt;/label&gt;\r\n                                    &lt;input type=\"text\" id=\"username\" class=\"form-control\" \r\n                                          formControlName=\"userName\" placeholder=\"Username\" required autofocus&gt;\r\n                                    &lt;label for=\"inputPassword\" class=\"sr-only\"&gt;Password&lt;/label&gt;\r\n                                    &lt;input type=\"password\" id=\"inputPassword\" class=\"form-control\" \r\n                                          formControlName=\"password\" placeholder=\"Password\" required&gt;\r\n                                    &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt;\r\n                                    &lt;/form&gt;\r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Created a reactive form and designed a login form.</p>\r\n<p>Attached the <b>onClickSubmit</b> method to the form submit action.</p>\r\n<p>Open <b>LoginComponent</b> style and include below CSS Code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n.form-signin {\r\n   max-width: 330px;\r\n\r\n   padding: 15px;\r\n   margin: 0 auto;\r\n}\r\n\r\ninput {\r\n   margin-bottom: 20px;\r\n}\r\n</pre>\r\n<p>Here, some styles are added to design the login form.</p>\r\n<p>Create a logout component using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component logout\r\nCREATE src/app/logout/logout.component.html (21 bytes)\r\nCREATE src/app/logout/logout.component.spec.ts (628 bytes)\r\nCREATE src/app/logout/logout.component.ts (269 bytes)\r\nCREATE src/app/logout/logout.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1368 bytes)\r\n</pre>\r\n<p>Open <b>LogoutComponent</b> and include below code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n   selector: 'app-logout',\r\n   templateUrl: './logout.component.html',\r\n   styleUrls: ['./logout.component.css']\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n\r\n   constructor(private authService : AuthService, private router: Router) { }\r\n\r\n   ngOnInit() {\r\n      this.authService.logout();\r\n      this.router.navigate(['/']);\r\n   }\r\n\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Used logout method of AuthService.</li>\r\n<li>Once the user is logged out, the page will redirect to home page (/).</li>\r\n</ul>\r\n<p>Create a guard using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate guard expense\r\nCREATE src/app/expense.guard.spec.ts (364 bytes)\r\nCREATE src/app/expense.guard.ts (459 bytes)\r\n</pre>\r\n<p>Open ExpenseGuard and include below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseGuard implements CanActivate {\r\n\r\n   constructor(private authService: AuthService, private router: Router) {}\r\n\r\n   canActivate(\r\n   next: ActivatedRouteSnapshot,\r\n   state: RouterStateSnapshot): boolean | UrlTree {\r\n      let url: string = state.url;\r\n\r\n          return this.checkLogin(url);\r\n      }\r\n\r\n      checkLogin(url: string): true | UrlTree {\r\n         console.log(\"Url: \" + url)\r\n         let val: string = localStorage.getItem('isUserLoggedIn');\r\n\r\n         if(val != null && val == \"true\"){\r\n            if(url == \"/login\")\r\n               this.router.parseUrl('/expenses');\r\n            else \r\n               return true;\r\n         } else {\r\n            return this.router.parseUrl('/login');\r\n         }\r\n      }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>checkLogin will check whether the localStorage has the user information and if it is available, then it returns true.</li>\r\n<li>If the user is logged in and goes to login page, it will redirect the user to expenses page</li>\r\n<li>If the user is not logged in, then the user will be redirected to login page.</li>\r\n</ul>\r\n<p>Open <b>AppRoutingModule (src/app/app-routing.module.ts)</b> and update below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ExpenseEntryComponent } from './expense-entry/expense-entry.component';\r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\n\r\nimport { ExpenseGuard } from './expense.guard';\r\n\r\nconst routes: Routes = [\r\n   { path: 'login', component: LoginComponent },\r\n   { path: 'logout', component: LogoutComponent },\r\n   { path: 'expenses', component: ExpenseEntryListComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Imported LoginComponent and LogoutComponent.</li>\r\n<li>Imported ExpenseGuard.</li>\r\n<li>Created two new routes, login and logout to access LoginComponent and LogoutComponent respectively.</li>\r\n<li>Add new option canActivate for ExpenseEntryComponent and ExpenseEntryListComponent.</li>\r\n</ul>\r\n<p>Open <b>AppComponent </b>template and add two login and logout link.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt;\r\n   &lt;ul class=\"navbar-nav ml-auto\"&gt;\r\n      &lt;li class=\"nav-item active\"&gt;\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n            &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt;\r\n\r\n         &lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n         &lt;a class=\"nav-link\" routerLink=\"/expenses\"&gt;Report&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n                  &lt;div *ngIf=\"isUserLoggedIn; else isLogOut\"&gt;\r\n                        &lt;a class=\"nav-link\" routerLink=\"/logout\"&gt;Logout&lt;/a&gt;\r\n                  &lt;/div&gt;\r\n\r\n                  &lt;ng-template #isLogOut&gt;\r\n                              &lt;a class=\"nav-link\" routerLink=\"/login\"&gt;Login&lt;/a&gt;\r\n                  &lt;/ng-template&gt;\r\n      &lt;/li&gt;\r\n   &lt;/ul&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Open <b>AppComponent</b> and update below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component } from '@angular/core';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n   title = 'Expense Manager';\r\n   isUserLoggedIn = false;\r\n\r\n   constructor(private authService: AuthService) {}\r\n\r\n   ngOnInit() {\r\n      let storeData = localStorage.getItem(\"isUserLoggedIn\");\r\n      console.log(\"StoreData: \" + storeData);\r\n\r\n      if( storeData != null && storeData == \"true\")\r\n         this.isUserLoggedIn = true;\r\n      else\r\n\r\n\r\n         this.isUserLoggedIn = false;\r\n   }\r\n}\r\n</pre>\r\n<p>Here, we have added the logic to identify the user status so that we can show login / logout functionality.</p>\r\n<p>Open <b>AppModule (src/app/app.module.ts)</b> and configure <b>ReactiveFormsModule</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { ReactiveFormsModule } from '@angular/forms'; \r\nimports: [ \r\n   ReactiveFormsModule \r\n]\r\n</pre>\r\n<p>Now, run the application and the application opens the login page.</p>\r\n<!--<img src=\"images/reactiveformsmodule.jpg\" alt=\"ReactiveFormsModule\" />-->\r\n<p>Enter admin and admin as username and password and then, click submit. The application process the login and redirects the user to expense list page as shown below &minus;</p>\r\n<!--<img src=\"images/formsmodule.jpg\" alt=\"FormsModule\" />-->\r\n<p>Finally, your can click logout and exit the application.</p>\r\n<h1>Angular 8 - Web Workers</h1>\r\n<p>Web workers enables JavaScript application to run the CPU-intensive in the background so that the application main thread concentrate on the smooth operation of UI. Angular provides support for including Web workers in the application. Let us write a simple Angular application and try to use web workers.</p>\r\n<p>Create a new Angular application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/workspace\r\nng new web-worker-sample\r\n</pre>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd web-worker-sample\r\nnpm run start\r\n</pre>\r\n<p>Add new web worker using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate web-worker app\r\n</pre>\r\n<p>The output of the above command is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE tsconfig.worker.json (212 bytes)\r\nCREATE src/app/app.worker.ts (157 bytes)\r\nUPDATE tsconfig.app.json (296 bytes)\r\nUPDATE angular.json (3776 bytes)\r\nUPDATE src/app/app.component.ts (605 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>app refers the location of the web worker to be created.</li>\r\n<li>Angular CLI will generate two new files, tsconfig.worker.json and src/app/app.worker.ts and update three files, tsconfig.app.json, angular.json and src/app/app.component.ts file.</li>\r\n</ul>\r\n<p>Let us check the changes &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// tsconfig.worker.json\r\n{\r\n   \"extends\": \"./tsconfig.json\",\r\n   \"compilerOptions\": {\r\n      \"outDir\": \"./out-tsc/worker\",\r\n      \"lib\": [\r\n         \"es2018\",\r\n         \"webworker\"\r\n      ],\r\n\r\n\r\n      \"types\": []\r\n   },\r\n   \"include\": [\r\n      \"src/**/*.worker.ts\"\r\n   ]\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p>tsconfig.worker.json extends tsconfig.json and includes options to compile web workers.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// tsconfig.app.json [only a snippet]\r\n\"exclude\": [\r\n   \"src/test.ts\",\r\n   \"src/**/*.spec.ts\",\r\n   \"src/**/*.worker.ts\"\r\n]\r\n</pre>\r\n<p>Here,</p>\r\n<p>Basically, it excludes all the worker from compiling as it has separate configuration.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// angular.json (only a snippet) \"webWorkerTsConfig\": \"tsconfig.worker.json\"\r\n</pre>\r\n<p>Here,</p>\r\n<p>angular.json includes the web worker configuration file, tsconfig.worker.json.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/app.worker.ts\r\naddEventListener('message', ({ data }) => {\r\n   const response = `worker response to ${data}`;\r\n   postMessage(response);\r\n});\r\n</pre>\r\n<p>Here,</p>\r\n<p>A web worker is created. Web worker is basically a function, which will be called when a message event is fired. The web worker will receive the data send by the caller, process it and then send the response back to the caller.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/app.component.ts [only a snippet]\r\nif (typeof Worker !== 'undefined') {\r\n   // Create a new\r\n   const worker = new Worker('./app.worker', { type: 'module' });\r\n   worker.onmessage = ({ data }) =&gt; {\r\n      console.log(`page got message: ${data}`);\r\n   };\r\n   worker.postMessage('hello');\r\n} else {\r\n\r\n   // Web Workers are not supported in this environment.\r\n   // You should add a fallback so that your program still executes correctly.\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>AppComponent create a new worker instance, create a callback function to receive the response and then post the message to the worker.</li>\r\n</ul>\r\n<p>Restart the application. Since the angular.json file is changed, which is not watched by Angular runner, it is necessary to restart the application. Otherwise, Angular does not identify the new web worker and does not compile it.</p>\r\n<p>Let us create Typescript class, src/app/app.prime.ts to find nth prime numbers.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class PrimeCalculator\r\n{\r\n   static isPrimeNumber(num : number) : boolean {\r\n      if(num == 1) return true;\r\n\r\n      let idx : number = 2;\r\n      for(idx = 2; idx &lt; num / 2; idx++)\r\n      {\r\n         if(num % idx == 0)\r\n            return false;\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   static findNthPrimeNumber(num : number) : number {\r\n      let idx : number = 1;\r\n      let count = 0;\r\n\r\n      while(count &lt; num) {\r\n         if(this.isPrimeNumber(idx))\r\n            count++;\r\n\r\n         idx++;\r\n         console.log(idx);\r\n      }\r\n\r\n      return idx - 1;\r\n   }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>isPrimeNumber check whether the given number is prime or not.</li>\r\n<li>findNthPrimeNumber finds the nth prime number.</li>\r\n</ul>\r\n<p>Import the new created prime number class into src/app/app.worker.ts and change the logic of the web worker to find nth prime number.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n/// &lt;reference lib=\"webworker\" /&gt;\r\n\r\nimport { PrimeCalculator } from './app.prime';\r\n\r\naddEventListener('message', ({ data }) =&gt; {\r\n   // const response = `worker response to ${data}`;\r\n   const response = PrimeCalculator.findNthPrimeNumber(parseInt(data));\r\n   postMessage(response);\r\n});\r\n</pre>\r\n<p>Change <b>AppComponent</b> and include two function, <b>find10thPrimeNumber</b> and <b>find10000thPrimeNumber</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component } from '@angular/core';\r\nimport { PrimeCalculator } from './app.prime';\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n   title = 'Web worker sample';\r\n   prime10 : number = 0;\r\n   prime10000 : number = 0;\r\n\r\n   find10thPrimeNumber() {\r\n      this.prime10 = PrimeCalculator.findNthPrimeNumber(10);\r\n   }\r\n\r\n   find10000thPrimeNumber() {\r\n      if (typeof Worker !== 'undefined') {\r\n         // Create a new\r\n         const worker = new Worker('./app.worker', { type: 'module' });\r\n         worker.onmessage = ({ data }) =&gt; {\r\n         this.prime10000 = data;\r\n         };\r\n         worker.postMessage(10000);\r\n      } else {\r\n         // Web Workers are not supported in this environment.\r\n         // You should add a fallback so that your program still executes correctly.\r\n      }\r\n   }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p>find10thPrimeNumber is directly using the PrimeCalculator. But, find10000thPrimeNumber is delegating the calculation to web worker, which in turn uses PrimeCalculator.</p>\r\n<p>Change the AppComponent template, src/app/app.commands.html and include two option, one to find 10th prime number and another to find the 10000th prime number.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n\r\n&lt;div&gt;\r\n   &lt;a href=\"#\" (click)=\"find10thPrimeNumber()\"&gt;Click here&lt;/a&gt; to find 10th prime number\r\n   &lt;div&gt;The 10&lt;sup&gt;th&lt;/sup&gt; prime number is {{ prime10 }}&lt;/div&gt; &lt;br/&gt;\r\n   &lt;a href=\"#\" (click)=\"find10000thPrimeNumber()\"&gt;Click here&lt;/a&gt; to find 10000th prime number\r\n   &lt;div&gt;The 10000&lt;sup&gt;th&lt;/sup&gt; prime number is {{ prime10000 }}&lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Finding 10000th prime number will take few seconds, but it will not affect other process as it is uses web workers. Just try to find the 10000th prime number first and then, the 10th prime number.</p>\r\n<p>Since, the web worker is calculating 10000th prime number, the UI does not freeze. We can check 10th prime number in the meantime. If we have not used web worker, we could not do anything in the browser as it is actively processing the 10000th prime number.</p>\r\n<p>The result of the application is as follows &minus;</p>\r\n<p>Initial state of the application.</p>\r\n<!--<img src=\"images/workers.jpg\" alt=\"Workers\" />-->\r\n<p>Click and try to find the 10000th prime number and then try to find the 10th prime number. The application finds the 10th prime number quite fast and shows it. The application is still processing in the background to find the 10000th prime number.</p>\r\n<!--<img src=\"images/web_worker.jpg\" alt=\"Web worker\" />-->\r\n<p>Both processes are completed.</p>\r\n<!--<img src=\"images/web_workers.jpg\" alt=\"Web workers\" />-->\r\n<p>Web worker enhances the user experience of web application by doing the complex operation in the background and it is quite easy to do it in Angular Application as well.</p>\r\n<h1>Angular 8 - Service Workers and PWA</h1>\r\n<p>Progressive web apps (PWA) are normal web application with few enhancements and behaves like a native application. PWA apps does not depends on network to work. PWA caches the application and renders it from local cache. It regularly checks the live version of the application and then caches the latest version in the background.</p>\r\n<p>PWA can be installed in the system like native application and shortcut can be shown in the desktop. Clicking the shortcut will open the application in browser with local cache even without any network available in the system.</p>\r\n<p>Angular application can be converted into PWA application. To convert an Angular application, we need to use service worker API. Service worker is actually a proxy server, which sits in between the browser, application and the network.</p>\r\n<p>Service workers is separate from web pages. It does not able to access DOM objects. Instead, Service Workers interact with web pages through <b>PostMessage</b> interface.</p>\r\n<p>PWA application has two prerequisites. They are as follows,</p>\r\n<ul class=\"list\">\r\n<li><p><b>Browser support</b> &minus; Even though lot of browser supports the PWA app, IE, Opera mini and few other does not provides the PWA support.</p></li>\r\n<li><p><b>HTTPS delivery</b> &minus; The application needs to be delivered through HTTPS protocol. One exception of the https support is <b>localhost</b> for development purpose.</p></li>\r\n</ul>\r\n<p>Let us create a new application and convert it into PWA application.</p>\r\n<p>Create a new Angular application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/workspace \r\nng new pwa-sample\r\n</pre>\r\n<p>Add PWA support using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd pwa-sample\r\nng add @angular/pwa --project pwa-sample\r\n</pre>\r\n<p>Build the production version of the application,</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng build --prod\r\n</pre>\r\n<p>PWA application does not run under Angular development server. Install, a simple web server using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nnpm install -g http-server\r\n</pre>\r\n<p>Run the web server and set our production build of the application as root folder.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nf the application as root folder.\r\nhttp-server -p 8080 -c-1 dist/pwa-sample\r\n</pre>\r\n<p>Open browser and enter <b>http://localhost:8080.</b></p>\r\n<p>Now, go to <b>Developer tools -&gt; Network</b> and select <b>Offline</b> option.</p>\r\n<b>Normal application stops working if network is set to Offline but, PWA application works fine as shown below &minus;</b>\r\n<!--<img src=\"images/pwa.jpg\" alt=\"PWA\" />-->\r\n<h1>Angular 8 - Server Side Rendering</h1>\r\n<p>Server side Rendering (SSR) is a modern technique to convert a Single Page Application (SPA) running in the browser into a server based application. Usually, in SPA, the server returns a simple index.html file with the reference to the JavaScript based SPA app. The SPA app take over from there, configure the entire application, process the request and then send the final response.</p>\r\n<p>But in SSR supported application, the server as well do all the necessary configuration and then send the final response to the browser. The browser renders the response and start the SPA app. SPA app takeover from there and further request are diverted to SPA app. The flow of SPA and SSR is as shown in below diagram.</p>\r\n<!--<img src=\"images/ssr.jpg\" alt=\"SSR\" />-->\r\n<p>Converting a SPA application to SSR provides certain advantages and they are as follows &minus;</p>\r\n<ul class=\"list\">\r\n<li><p><b>Speed</b> &minus; First request is relatively fast. One of the main drawback of SPA is slow initial rendering. Once the application is rendered, SPA app is quite fast. SSR fixes the initial rendering issue.</p></li>\r\n<li><p><b>SEO Friendly</b> &minus; Enables the site to be SEO friendly. Another main disadvantage of SPA is not able to crawled by web crawler for the purpose of SEO. SSR fixes the issue.</p></li>\r\n</ul>\r\n<h2>Angular Universal</h2>\r\n<p>To enable SSR in Angular, Angular should be able to rendered in the server. To make it happen, Angular provides a special technology called Angular Universal. It is quite new technology and it is continuously evolving. Angular Universal knows how to render Angular application in the server. We can upgrade our application to Angular Universal to support SSR.</p>\r\n<h1>Angular 8 - Internationalization (i18n)</h1>\r\n<p>Internationalization (i18n) is a must required feature for any modern web application. Internationalization enables the application to target any language in the world. Localization is a part of the Internationalization and it enables the application to render in a targeted local language. Angular provides complete support for internationalization and localization feature.</p>\r\n<p>Let us learn how to create a simple hello world application in different language.</p>\r\n<p>Create a new Angular application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/workspace\r\nng new i18n-sample\r\n</pre>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd i18n-sample\r\nnpm run start\r\n</pre>\r\n<p>Change the <b>AppComponent’s</b> template as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n\r\n&lt;div&gt;Hello&lt;/div&gt;\r\n&lt;div&gt;The Current time is {{ currentDate | date : 'medium' }}&lt;/div&gt;\r\n</pre>\r\n<p>Add localize module using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng add @angular/localize\r\n</pre>\r\n<p>Restart the application.</p>\r\n<p><b>LOCALE_ID</b> is the Angular variable to refer the current locale. By default, it is set as en_US. Let us change the locale by using in the provider in AppModule.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { LOCALE_ID, NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n   declarations: [\r\n      AppComponent\r\n   ],\r\n   imports: [\r\n      BrowserModule\r\n   ],\r\n   providers: [ { provide: LOCALE_ID, useValue: 'hi' } ],\r\n\r\n   bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><b>LOCALE_ID</b> is imported from <b>@angular/core</b>.</li>\r\n<li>LOCALE_ID is set to hi through provider so that, the LOCALE_ID will be available everywhere in the application.</li>\r\n</ul>\r\n<p>Import the locale data from @angular/common/locales/hi and then, register it using registerLocaleData method as specified below:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component } from '@angular/core';\r\n\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localeHi from '@angular/common/locales/hi';\r\n\r\nregisterLocaleData(localeHi);\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {\r\n   title = 'Internationzation Sample';\r\n}\r\n</pre>\r\n<p>Create a local variable, <b>CurrentDate</b> and set current time using <b>Date.now()</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class AppComponent {\r\n   title = 'Internationzation Sample';\r\n\r\n   currentDate: number = Date.now();\r\n}\r\n</pre>\r\n<p>Change AppComponent’s template content and include the currentDate as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n\r\n&lt;div&gt;Hello&lt;/div&gt;\r\n&lt;div&gt;The Current time is {{ currentDate | date : 'medium' }}&lt;/div&gt;\r\n</pre>\r\n<p>Check the result and you will see the date is specified using <b>hi</b> locale.</p>\r\n<!--<img src=\"images/routings.jpg\" alt=\"routings\" />-->\r\n<p>We have changed the date to current locale. Let us change other content as well. To do it, include <b>i18n</b> attribute in the relevant tag with format, <b>title|description@@id</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n\r\n&lt;h1 i18n=\"greeting|Greeting a person@@greeting\"&gt;Hello&lt;/h1&gt;\r\n&lt;div&gt;\r\n   &lt;span i18n=\"time|Specifiy the current time@@currentTime\"&gt;\r\n      The Current time is {{ currentDate | date : 'medium' }}\r\n   &lt;/span&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><b>hello</b> is simple translation format since it contains complete text to be translated.</li>\r\n<li><b>Time</b> is little bit complex as it contains dynamic content as well. The format of the text should follow ICU message format for translation.</li>\r\n</ul>\r\n<p>We can extract the data to be translated using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng xi18n --output-path src/locale\r\n</pre>\r\n<p>Command generates <b>messages.xlf</b> file with below content &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\r\n&lt;xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\"&gt;\r\n   &lt;file source-language=\"en\" datatype=\"plaintext\" original=\"ng2.template\"&gt;\r\n      &lt;body&gt;\r\n         &lt;trans-unit id=\"greeting\" datatype=\"html\"&gt;\r\n            &lt;source&gt;Hello&lt;/source&gt;\r\n            &lt;context-group purpose=\"location\"&gt;\r\n               &lt;context context-type=\"sourcefile\"&gt;src/app/app.component.html&lt;/context&gt;\r\n               &lt;context context-type=\"linenumber\"&gt;3&lt;/context&gt;\r\n            &lt;/context-group&gt;\r\n            &lt;note priority=\"1\" from=\"description\"&gt;Greeting a person&lt;/note&gt;\r\n            &lt;note priority=\"1\" from=\"meaning\"&gt;greeting&lt;/note&gt;\r\n\r\n         &lt;/trans-unit&gt;\r\n         &lt;trans-unit id=\"currentTime\" datatype=\"html\"&gt;\r\n            &lt;source&gt;\r\n                        The Current time is &lt;x id=\"INTERPOLATION\" equiv-text=\"{{ currentDate | date : &apos;medium&apos; }}\"/&gt;\r\n            &lt;/source&gt;\r\n            &lt;context-group purpose=\"location\"&gt;\r\n               &lt;context context-type=\"sourcefile\"&gt;src/app/app.component.html&lt;/context&gt;\r\n               &lt;context context-type=\"linenumber\"&gt;5&lt;/context&gt;\r\n            &lt;/context-group&gt;\r\n            &lt;note priority=\"1\" from=\"description\"&gt;Specifiy the current time&lt;/note&gt;\r\n            &lt;note priority=\"1\" from=\"meaning\"&gt;time&lt;/note&gt;\r\n         &lt;/trans-unit&gt;\r\n      &lt;/body&gt;\r\n   &lt;/file&gt;\r\n&lt;/xliff&gt;\r\n</pre>\r\n<p>Copy the file and rename it to <b>messages.hi.xlf</b></p>\r\n<p>Open the file with Unicode text editor. Locate <b>source</b> tag and duplicate it with <b>target</b> tag and then change the content to <b>hi</b> locale. Use google translator to find the matching text. The changed content is as follows &minus;</b></p>\r\n<!--<img src=\"images/target.jpg\" alt=\"Nested target\" />-->\r\n<p></p>\r\n<!--<img src=\"images/targets.jpg\" alt=\"Nested targets\" />-->\r\n<p>Open <b>angular.json</b> and place below configuration under <b>build -&gt; configuration</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\n\"hi\": { \r\n   \"aot\": true,\r\n   \"outputPath\": \"dist/hi/\",\r\n   \"i18nFile\": \"src/locale/messages.hi.xlf\",\r\n   \"i18nFormat\": \"xlf\",\r\n   \"i18nLocale\": \"hi\",\r\n   \"i18nMissingTranslation\": \"error\",\r\n   \"baseHref\": \"/hi/\"\r\n},\r\n\"en\": {\r\n   \"aot\": true,\r\n   \"outputPath\": \"dist/en/\",\r\n   \"i18nFile\": \"src/locale/messages.xlf\",\r\n   \"i18nFormat\": \"xlf\",\r\n   \"i18nLocale\": \"en\",\r\n   \"i18nMissingTranslation\": \"error\",\r\n   \"baseHref\": \"/en/\"\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have used separate setting for <b>hi</b> and <b>en</b> locale.</p>\r\n<p>Set below content under <b>serve -&gt; configuration</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n\"hi\": {\r\n   \"browserTarget\": \"i18n-sample:build:hi\"\r\n},\r\n\"en\": {\r\n   \"browserTarget\": \"i18n-sample:build:en\"\r\n}\r\n</pre>\r\n<p>We have added the necessary configuration. Stop the application and run below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nnpm run start -- --configuration=hi\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have specified that the hi configuration has to be used.</p>\r\n<p>Navigate to http://localhost:4200/hi and you will see the Hindi localised content.</p>\r\n<!--<img src=\"images/configuration.jpg\" alt=\"configuration\" />-->\r\n<p>Finally, we have created a localized application in Angular.</p>\r\n<h1>Angular 8 - Accessibility</h1>\r\n<p><b>Accessibility</b> support is one of the important feature of every UI based application. Accessibility is a way of designing the application so that, it is accessible for those having certain disabilities as well. Let us learn the support provided by Angular to develop application with good accessibility.</p>\r\n<ul class=\"list\">\r\n<li><p>While using attribute binding, use <b>attr.</b> prefix for ARIA attributes.</p></li>\r\n<li><p>Use Angular material component for Accessibility. Some of the useful components are <b>LiveAnnouncer</b> and <b>cdkTrapFocu.</b></p></li>\r\n<li><p>Use native HTML elements wherever possible because native HTML element provides maximum accessibility features. When creating a component, select native html element matching your use case instead of redeveloping the native functionality.</p></li>\r\n<li><p>Use <b>NavigationEnd</b> to track and control the focus of the application as it greatly helps in accessibility.</p></li>\r\n</ul>\r\n<h1>Angular 8 - CLI Commands</h1>\r\n<p>Angular CLI helps developers to create projects easily and quickly. As we know already, Angular CLI tool is used for development and built on top of Node.js, installed from NPM.This chapter explains about Angular 8 CLI commands in detail.</p>\r\n<h2>Verify CLI</h2>\r\n<p>Before moving to Angular CLI commands, we have to ensure that Angular CLI is installed on your machine. If it is installed, you can verify it by using the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng version\r\n</pre>\r\n<p>You could see the below response &minus;</p>\r\n<!--<img src=\"images/cli.jpg\" alt=\"CLI\" />-->\r\n<p>If CLI is not installed, then use the below command to install it.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nnpm install -g @angular/cli@^8.0.0\r\n</pre>\r\n<p>Let’s understand the commands one by one in brief.</p>\r\n<h3>New command</h3>\r\n<p>To create an application in Angular, use the below syntax &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng new &lt;project-name&gt;\r\n</pre>\r\n<h3>Example</h3>\r\n<p>If you want to create CustomerApp then, use the below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng new CustomerApp\r\n</pre>\r\n<h3>Generate Command</h3>\r\n<p>It is used to generate or modify files based on a schematic. Type the below command inside your angular project &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate\r\n</pre>\r\n<p>Or, you can simply type generate as g. You can also use the below syntax &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g\r\n</pre>\r\n<p>It will list out the available schematics &minus;</p>\r\n<!--<img src=\"images/schematics.jpg\" alt=\"schematics\" />-->\r\n<p>Let’s understand some of the repeatedly used ng generate schematics in next section.</p>\r\n<h3>Create a component</h3>\r\n<p>Components are building block of Angular. To create a component in angular use the below syntax &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g c &lt;component-name&gt;\r\n</pre>\r\n<p>For example, if user wants to create a <b>Details</b> component then use the below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g c Details\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/details/details.component.scss (0 bytes)\r\nCREATE src/app/details/details.component.html (22 bytes)\r\nCREATE src/app/details/details.component.spec.ts (635 bytes)\r\nCREATE src/app/details/details.component.ts (274 bytes)\r\nUPDATE src/app/app.module.ts (1201 bytes)\r\n</pre>\r\n<h3>Create a class</h3>\r\n<p>It is used to create a new class in Angular. It is defined below&minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g class &lt;class-name&gt;\r\n</pre>\r\n<p>If you want to create a customer class, then type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g class Customer\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/customer.spec.ts (162 bytes)\r\nCREATE src/app/customer.ts (26 bytes)\r\n</pre>\r\n<h3>Create a pipe</h3>\r\n<p>Pipes are used for filtering the data. It is used to create a custom pipe in Angular. It is defined below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g pipe &lt;pipe-name&gt;\r\n</pre>\r\n<p>If you want to create a custom digit counts in a pipe, then type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g pipe DigitCount\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/digit-count.pipe.spec.ts (204 bytes)\r\nCREATE src/app/digit-count.pipe.ts (213 bytes)\r\nUPDATE src/app/app.module.ts (1274 bytes)\r\n</pre>\r\n<h3>Create a directive</h3>\r\n<p>It is used to create a new directive in Angular. It is defined below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g directive &lt;directive-name&gt;\r\n</pre>\r\n<p>If you want to create a UnderlineText directive, then type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g directive UnderlineText\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/underline-text.directive.spec.ts (253 bytes)\r\nCREATE src/app/underline-text.directive.ts (155 bytes)\r\nUPDATE src/app/app.module.ts (1371 bytes)\r\n</pre>\r\n<h3>Create a module</h3>\r\n<p>It is used to create a new module in Angular. It is defined below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g module &lt;module-name&gt;\r\n</pre>\r\n<p>If you want to create a user information module, then type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g module Userinfo\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/userinfo/userinfo.module.ts (194 bytes)\r\n</pre>\r\n<h3>Create an interface</h3>\r\n<p>It is used to create an interface in Angular. It is given below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g interface &lt;interface-name&gt;\r\n</pre>\r\n<p>If you want to create a customer class, then type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g interface CustomerData\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/customer-data.ts (34 bytes)\r\n</pre>\r\n<h3>Create a web worker</h3>\r\n<p>It is used to create a new web worker in Angular. It is stated below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g webWorker &lt;webWorker-name&gt;\r\n</pre>\r\n<p>If you want to create a customer class, then type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g webWorker CustomerWebWorker\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE tsconfig.worker.json (212 bytes)\r\nCREATE src/app/customer-web-worker.worker.ts (157 bytes)\r\nUPDATE tsconfig.app.json (296 bytes)\r\nUPDATE angular.json (3863 bytes)\r\n</pre>\r\n<h3>Create a service</h3>\r\n<p>It is used to create a service in Angular. It is given below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g service &lt;service-name&gt;\r\n</pre>\r\n<p>If you want to create a customer class, then type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g service CustomerService\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/customer-service.service.spec.ts (379 bytes)\r\nCREATE src/app/customer-service.service.ts (144 bytes)\r\n</pre>\r\n<h3>Create an enum</h3>\r\n<p>It is used to create an enum in Angular. It is given below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g enum &lt;enum-name&gt;\r\n</pre>\r\n<p>If you want to create a customer class, then type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng g enum CustomerRecords\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/customer-records.enum.ts (32 bytes)\r\n</pre>\r\n<h3>Add command</h3>\r\n<p>It is used to add support for an external library to your project. It is specified by the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng add [name]\r\n</pre>\r\n<h3>Build command</h3>\r\n<p>It is used to compile or build your angular app. It is defined below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng build\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nGenerating ES5 bundles for differential loading...\r\nES5 bundle generation complete.\r\n</pre>\r\n<h3>Config command</h3>\r\n<p>It is used to retrieve or set Angular configuration values in the angular.json file for the workspace. It is defined below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng config\r\n</pre>\r\n<p>After using this command, you could see the below response &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{\r\n   \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\r\n   \"version\": 1,\r\n   \"newProjectRoot\": \"projects\",\r\n   \"projects\": {\r\n      \"MyApp\": {\r\n         \"projectType\": \"application\",\r\n         \"schematics\": {\r\n            \"@schematics/angular:component\": {\r\n               \"style\": \"scss\"\r\n            }\r\n         },\r\n .............................\r\n .............................\r\n</pre>\r\n<h3>Doc command</h3>\r\n<p>It is used to open the official Angular documentation (angular.io) in a browser, and searches for a given keyword.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng doc &lt;keyword&gt;\r\n</pre>\r\n<p>For example, if you search with component as ng g component then, it will open the documentation.</p>\r\n<h3>e2e command</h3>\r\n<p>It is used to build and serves an Angular app, then runs end-to-end tests using Protractor. It is stated below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng e2e &lt;project&gt; [options]\r\n</pre>\r\n<h3>Help command</h3>\r\n<p>It lists out available commands and their short descriptions. It is stated below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng help\r\n</pre>\r\n<h3>Serve command</h3>\r\n<p>It is used to build and serves your app, rebuilding on file changes. It is given below: &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<h3>Test command</h3>\r\n<p>Runs unit tests in a project. It is mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng test\r\n</pre>\r\n<h3>Update command</h3>\r\n<p>Updates your application and its dependencies. It is given below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng update\r\n</pre>\r\n<h3>Version command</h3>\r\n<p>Shows Angular CLI version. It is stated below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng version\r\n</pre>\r\n<h1>Angular 8 - Testing</h1>\r\n<p>Testing is a very important phase in the development life cycle of an application. It ensures an application quality. It needs careful planning and execution.</p>\r\n<h2>Unit Test</h2>\r\n<p>Unit testing is the easiest method to test an application. It is based on ensuring the correctness of a piece of code or a method of a class. But, it does not reflect the real environment and subsequently. It is the least option to find the bugs.</p>\r\n<p>Generally, Angular 8 uses Jasmine and Karma configurations. To perform this, first you need to configure in your project, using the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng test\r\n</pre>\r\n<p>Now, you could see the following response &minus;</p>\r\n<!--<img src=\"images/unit_test.jpg\" alt=\"Unit Test\" />-->\r\n<p>Now, Chrome browser also opens and shows the test output in the “Jasmine HTML Reporter”. It looks similar to this,</p>\r\n<!--<img src=\"images/html_reporter.jpg\" alt=\"HTML Reporter\" />-->\r\n<h2>End to End (E2E) Testing</h2>\r\n<p>Unit tests are small, simple and fast process whereas, E2E testing phase multiple components are involved and works together which cover flows in the application. To perform e2e test, type the below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng e2e\r\n</pre>\r\n<p>You could see the below response &minus;</p>\r\n<!--<img src=\"images/e2e.jpg\" alt=\"E2E\" />-->\r\n<h1>Angular 8 - Ivy Compiler</h1>\r\n<p><b>Ivy Compiler</b> is the latest compiler for Angular application released by Angular Team. Currently, Angular is using <b>View Engine</b> compiler to compile Angular application.</p>\r\n<p>In general, Angular compiler has two options to compile an application.</p>\r\n<h3>Just In Time (JIT) Compiler</h3>\r\n<h3>In <b>Just In Time (JIT)</b> compilation, the compiler will be bundled along with the application and send to the browser. Angular application will be compiled in the browser and run just before the execution of application.</h3>\r\n<h3>Eventhough <b>JIT</b> provides certain advanced feature, <b>JIT</b> slows down the compilation and also the app bundle will be double the size produced by <b>AOT</b> compiler as it includes compiler as well.</h3>\r\n<h3>Ahead Of Time (AOT) Compiler</h3>\r\n<h3>In <b>AOT</b> compilation, the compiler will emit optimised code ready to run inside the browser without any addition step. It will reduce the size of the bundle as well as reduce the compilation time and startup time of the application.</h3>\r\n<h2>Advantages of Ivy Compiler</h2>\r\n<p><b>Ivy Compiler</b> is the optimised and advanced compiler for Angular. As of Angular 8, it is not yet complete even though it is useable at this stage. Angular Team is recommending the developer to use it in Angular 8.</p>\r\n<p>The main advantages of <b>Ivy Compiler</b> are as follows &minus;</p>\r\n<ul class=\"list\">\r\n<li>Optimised code.</li>\r\n<li>Faster build time.</li>\r\n<li>Reduced bundle size.</li>\r\n<li>Better performance.</li>\r\n</ul>\r\n<h2>How to use Ivy?</h2>\r\n<p><b>Ivy Compiler</b> can be used in Angular 8 application by changing the project setting as specified below &minus;</p>\r\n<p>Open angular.json and set the aot option <b>(projects -&gt; -&gt; architect -&gt; build -&gt; configurations -&gt; production)</b> of the project to true.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{\r\n   \"projects\": {\r\n      \"my-existing-project\": {\r\n         \"architect\": {\r\n\r\n            \"build\": {\r\n               \"options\": {\r\n                  ...\r\n                  \"aot\": true,\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n</pre>\r\n<p>Open <b>tsconfig.app.json</b> and set <b>enableIvy</b> to true under <b>angularCompilerOptions</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{ \r\n   ... \r\n   \"angularCompilerOptions\": { \r\n      \"enableIvy\": true \r\n}\r\n</pre>\r\n<p>Compile and run the application and get benefited by <b>Ivy Compiler</b>.</p>\r\n<h1>Angular 8 - Building with Bazel</h1>\r\n<p><b>Bazel</b> is an advanced build and test tool. It supports lot of features suitable for large projects.</p>\r\n<p>Some of the features of <b>Bazel</b> are as follows:</p>\r\n<ul class=\"list\">\r\n<li>Support multiple languages.</li>\r\n<li>Support multiple platforms.</li>\r\n<li>Support multiple repository.</li>\r\n<li>Support high-level build language.</li>\r\n<li>Fast and reliable.</li>\r\n</ul>\r\n<p>Angular supports building the application using bazel. Let us see how to use bazel to compile Angular application. </p>\r\n<p>First, install <b>@angular/bazel</b> package. </p>\r\n<pre class=\"result notranslate\">\r\nnpm install -g @angular/bazel \r\n</pre>\r\n<p>For existing application, Add <b>@angular/bazel</b> as mentioned below:</p>\r\n<pre class=\"result notranslate\">\r\nng add @angular/bazel\r\n</pre>\r\n<p>For new application, use below mentioned command:</p>\r\n<pre class=\"result notranslate\">\r\nng new --collection=@angular/bazel \r\n</pre>\r\n<p>To build an application using bazel, use below command:</p>\r\n<pre class=\"result notranslate\">\r\nng build --leaveBazelFilesOnDisk\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>leaveBazelFilesOnDisk</b> option will leave the bazel files created during build process, which we can use to build the application directly using bazel.</p>\r\n<p>To build application using bazel directly, install <b>@bazel/bazelisk</b> and then, use <b>bazelisk</b> build command.</p>\r\n<pre class=\"result notranslate\">\r\nnpm install -g @bazel/bazelisk \r\nbazelisk build\r\n</pre>\r\n<h1>Angular 8 - Backward Compatibility</h1>\r\n<p>Angular framework provides maximum compatibility with previous versions. If Angular Team deprecate a feature in a release, it will wait for 3 more release to completely remove the feature. Angular Team release a major version for every six months. Every version will have active maintenance period of six months and then Long Term Support (LTS) period for another one year. Angular does not introduce breaking changes during these 18 months. If Angular version deprecate a feature in version 5, then it will probably remove it in version 8 or in next releases.</p>\r\n<p>Angular maintains documentation and guides of all version. For example, Angular documentation for version 7 can be checked @ https://v7.angular.io. Angular also provides a detailed upgrade path through https://update.angular.io/ site.</p>\r\n<p>To update Angular application written from previous version, use below command inside the project directory:</p>\r\n<pre class=\"result notranslate\">\r\nng update @angular/cli@8 @angular/core@8\r\n</pre>\r\n<p>Let us see some of the important changes introduced in Angular 8.</p>\r\n<ul class=\"list\">\r\n<li><p><b>HttpModule</b> module and its associated <b>Http</b> service is removed. Use <b>HttpClient</b> service from <b>HttpClientModule</b> module.</p></li>\r\n<li><p><b>/deep/, >>></b> and <b>:ng-deep</b> component selectors are removed.</p></li>\r\n<li><p>Angular default version of TypeScript is 3.4.</p></li>\r\n<li><p>Node version supported by Angular is v10 and later.</p></li>\r\n<li><p><b>@ViewChild()</b> and <b>ContentChild()</b> decorator behaviour is changed from dynaic to static.</p></li>\r\n</ul>\r\n<p>Lazy loading string syntax in router module is removed and only function based is supported.</p>\r\n<pre class=\"result notranslate\">\r\nloadChildren: './lazy/lazy.module#LazyModule' \r\nloadChildren: () => import('./lazy/lazy.module' \r\n</pre>\r\n<h1>Angular 8 - Working Example</h1>\r\n<p>Here, we will study about the complete step by step working example with regards to Angular 8.</p>\r\n<p>Let us create an Angular application to check our day to day expenses. Let us give <b>ExpenseManager</b> as our choice for our new application.</p>\r\n<h2>Create an application</h2>\r\n<p>Use below command to create the new application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /path/to/workspace\r\nng new expense-manager\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>new</b> is one of the command of the ng CLI application. It will be used to create new application. It will ask some basic question in order to create new application. It is enough to let the application choose the default choices. Regarding routing question as mentioned below, specify <b>No</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nWould you like to add Angular routing? No\r\n</pre>\r\n<p>Once the basic questions are answered, the ng CLI application create a new Angular application under expense-manager folder.</p>\r\n<p>Let us move into the our newly created application folder.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd expense-manager\r\n</pre>\r\n<p>Let us start the application using below comman.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Let us fire up a browser and opens http://localhost:4200. The browser will show the application as shown below &minus;</p>\r\n<!--<img src=\"images/applications.jpg\" alt=\"applications\" />-->\r\n<p>Let us change the title of the application to better reflect our application. Open <b>src/app/app.component.ts</b> and change the code as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class AppComponent { \r\n   title = 'Expense Manager';\r\n}\r\n</pre>\r\n<p>Our final application will be rendered in the browser as shown below &minus;</p>\r\n<!--<img src=\"images/applications.jpg\" alt=\"applications\" />-->\r\n<h2>Add a component</h2>\r\n<p>Create a new component using ng generate component command as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component expense-entry\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/expense-entry/expense-entry.component.html (28 bytes)\r\nCREATE src/app/expense-entry/expense-entry.component.spec.ts (671 bytes)\r\nCREATE src/app/expense-entry/expense-entry.component.ts (296 bytes)\r\nCREATE src/app/expense-entry/expense-entry.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (431 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>ExpenseEntryComponent is created under src/app/expense-entry folder.</li>\r\n<li>Component class, Template and stylesheet are created.</li>\r\n<li>AppModule is updated with new component.</li>\r\n</ul>\r\n<p>Add title property to ExpenseEntryComponent <b>(src/app/expense-entry/expense-entry.component.ts) </b>component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n   selector: 'app-expense-entry',\r\n   templateUrl: './expense-entry.component.html',\r\n   styleUrls: ['./expense-entry.component.css']\r\n})\r\nexport class ExpenseEntryComponent implements OnInit {\r\n   title: string;\r\n   constructor() { }\r\n\r\n   ngOnInit() {\r\n      this.title = \"Expense Entry\"\r\n   }\r\n}\r\n</pre>\r\n<p>Update template, <b>src/app/expense-entry/expense-entry.component.html</b> with below content.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;p&gt;{{ title }}&lt;/p&gt;\r\n</pre>\r\n<p>Open <p>src/app/app.component.html</p> and include newly created component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;app-expense-entry>&lt;/app-expense-entry&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>app-expense-entry is the selector value and it can be used as regular HTML Tag.</p>\r\n<p>The output of the application is as shown below &minus;</p>\r\n<!--<img src=\"images/html_tag.jpg\" alt=\"HTML Tag\" />-->\r\n<h2>Include bootstrap</h2>\r\n<p>Let us include bootstrap into our <b>ExpenseManager</b> application using <b>styles</b> option and change the default template to use bootstrap components.</p>\r\n<p>Open command prompt and go to ExpenseManager application.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Install <b>bootstrap</b> and <b>JQuery</b> library using below commands</p>\r\n<pre class=\"result notranslate\">\r\nnpm install --save bootstrap@4.5.0 jquery@3.5.1\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have installed JQuery, because, bootstrap uses jquery extensively for advanced components.</p>\r\n<p>Option <b>angular.json</b> and set bootstrap and jquery library path.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{ \r\n   \"projects\": { \r\n      \"expense-manager\": { \r\n         \"architect\": { \r\n            \"build\": {\r\n               \"builder\":\"@angular-devkit/build-angular:browser\", \"options\": { \r\n                  \"outputPath\": \"dist/expense-manager\", \r\n                  \"index\": \"src/index.html\", \r\n                  \"main\": \"src/main.ts\", \r\n                  \"polyfills\": \"src/polyfills.ts\", \r\n                  \"tsConfig\": \"tsconfig.app.json\", \r\n                  \"aot\": false, \r\n                  \"assets\": [ \r\n                     \"src/favicon.ico\", \r\n                     \"src/assets\" \r\n                  ], \r\n                  \"styles\": [ \r\n                     \"./node_modules/bootstrap/dist/css/bootstrap.css\", \"src/styles.css\" \r\n                  ], \r\n                  \"scripts\": [ \r\n                     \"./node_modules/jquery/dist/jquery.js\", \"./node_modules/bootstrap/dist/js/bootstrap.js\" \r\n                  ] \r\n               }, \r\n            }, \r\n         } \r\n   }}, \r\n   \"defaultProject\": \"expense-manager\" \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>scripts</b> option is used to include JavaScript library. <b>JavaScript</b> registered through <b>scripts</b> will be available to all Angular components in the application.</p>\r\n<p>Open <b>app.component.html</b> and change the content as specified below</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt; \r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt; \r\n   &lt;div class=\"container\"&gt; \r\n      &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; \r\n         &lt;span class=\"navbar-toggler-icon\"&gt;\r\n         &lt;/span&gt; \r\n      &lt;/button&gt; \r\n      &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt; \r\n         &lt;ul class=\"navbar-nav ml-auto\"&gt; \r\n            &lt;li class=\"nav-item active\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n               &lt;span class=\"sr-only\"&gt;(current)\r\n               &lt;/span&gt;\r\n            &lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Report&lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt; \r\n            &lt;/li&gt; \r\n         &lt;/ul&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/nav&gt; \r\n&lt;app-expense-entry&gt;&lt;/app-expense-entry&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Used bootstrap navigation and containers.</p>\r\n<p>Open <b>src/app/expense-entry/expense-entry.component.html</b> and place below content.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt; \r\n&lt;div class=\"container\"&gt; \r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt; \r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n            &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; {{ title }} \r\n            &lt;/div&gt; \r\n            &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n               &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n            &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;  \r\n            &lt;strong&gt;&lt;em&gt;Item:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Pizza \r\n         &lt;/div&gt;\r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n            &lt;strong&gt;&lt;em&gt;Amount:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            20 \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Category:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Food \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Location:&lt;/em&gt;&lt;/strong&gt;\r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Zomato \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Spend On:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            June 20, 2020 \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Restart the application.</p>\r\n<p>The output of the application is as follows &minus;</p>\r\n<!--<img src=\"images/restart_tag.jpg\" alt=\"Restart Tag\" />-->\r\n<p>We will improve the application to handle dynamic expense entry in next chapter.</p>\r\n<h2>Add an interface</h2>\r\n<p>Create ExpenseEntry interface <b>(src/app/expense-entry.ts)</b> and add id, amount, category, Location, spendOn and createdOn.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport interface ExpenseEntry {\r\n   id: number;\r\n   item: string;\r\n   amount: number;\r\n   category: string;\r\n   location: string;\r\n   spendOn: Date;\r\n   createdOn: Date;\r\n}\r\n</pre>\r\n<p>Import <b>ExpenseEntry</b> into <b>ExpenseEntryComponent</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { ExpenseEntry } from '../expense-entry';\r\n</pre>\r\n<p>Create a <b>ExpenseEntry</b> object, expenseEntry as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class ExpenseEntryComponent implements OnInit {\r\n   title: string;\r\n   expenseEntry: ExpenseEntry;\r\n   constructor() { }\r\n\r\n   ngOnInit() {\r\n      this.title = \"Expense Entry\";\r\n\r\n      this.expenseEntry = {\r\n\r\n         id: 1,\r\n         item: \"Pizza\",\r\n         amount: 21,\r\n         category: \"Food\",\r\n         location: \"Zomato\",\r\n         spendOn: new Date(2020, 6, 1, 10, 10, 10),\r\n         createdOn: new Date(2020, 6, 1, 10, 10, 10),\r\n      };\r\n   }\r\n}\r\n</pre>\r\n<p>Update the component template using <b>expenseEntry object, src/app/expense-entry/expense-entry.component.html</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt;\r\n                  {{ title }}\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt;\r\n                  &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt;\r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n         &lt;/div&gt;\r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Item:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.item }} \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Amount:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.amount }}   \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Category:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n\r\n                  {{ expenseEntry.category }} \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Location:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.location }} \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Spend On:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.spendOn }}  \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>The output of the application is as follows &minus;</p>\r\n<!--<img src=\"images/interface.jpg\" alt=\"Interface\" />-->\r\n<h2>Using directives</h2>\r\n<p>Let us add a new component in our <b>ExpenseManager</b> application to list the expense entries.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Create a new component, <b>ExpenseEntryListComponent</b> using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component ExpenseEntryList\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry-list/expense-entry-list.component.html (33 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.spec.ts (700 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.ts (315 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.css (0 bytes) \r\nUPDATE src/app/app.module.ts (548 bytes)\r\n</pre>\r\n<p>Here, the command creates the ExpenseEntryList Component and update the necessary code in <b>AppModule</b>.</p>\r\n<p>Import <b>ExpenseEntry</b> into <b>ExpenseEntryListComponent</b> component <b>(src/app/expense-entry-list/expense-entry-list.component)</b></p>\r\n<pre class=\"result notranslate\">\r\nimport { ExpenseEntry } from '../expense-entry';\r\n</pre>\r\n<p>Add a method, <b>getExpenseEntries()</b> to return list of expense entry (mock items) in <b>ExpenseEntryListComponent (src/app/expense-entry-list/expense-entry-list.component)</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\ngetExpenseEntries() : ExpenseEntry[] { \r\n   let mockExpenseEntries : ExpenseEntry[] = [ \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"Mcdonald\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1,\r\n         item: \"Pizza\",\r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"Mcdonald\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) \r\n      }, \r\n   ]; \r\n   return mockExpenseEntries; \r\n}\r\n</pre>\r\n<p>Declare a local variable, expenseEntries and load the mock list of expense entries as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\ntitle: string; \r\nexpenseEntries: ExpenseEntry[]; \r\nconstructor() { } \r\nngOnInit() { \r\n   this.title = \"Expense Entry List\"; \r\n   this.expenseEntries = this.getExpenseEntries(); \r\n}\r\n</pre>\r\n<p>Open the template file <b>(src/app/expense-entry-list/expense-entry-list.component.html)</b> and show the mock entries in a table.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt; \r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; \r\n                  {{ title }} \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n                  &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n            &lt;table class=\"table table-striped\"&gt; \r\n               &lt;thead&gt; \r\n                  &lt;tr&gt; \r\n                     &lt;th&gt;Item&lt;/th&gt; \r\n                     &lt;th&gt;Amount&lt;/th&gt; \r\n                     &lt;th&gt;Category&lt;/th&gt; \r\n                     &lt;th&gt;Location&lt;/th&gt; \r\n                     &lt;th&gt;Spent On&lt;/th&gt; \r\n                  &lt;/tr&gt; \r\n               &lt;/thead&gt; \r\n               &lt;tbody&gt; \r\n                  &lt;tr *ngFor=\"let entry of expenseEntries\"&gt; \r\n                     &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt; \r\n                     &lt;th&gt;{{ entry.amount }}&lt;/th&gt; \r\n                     &lt;td&gt;{{ entry.category }}&lt;/td&gt; \r\n                     &lt;td&gt;{{ entry.location }}&lt;/td&gt; \r\n                     &lt;td&gt;{{ entry.spendOn | date: 'short' }}&lt;/td&gt; \r\n                  &lt;/tr&gt; \r\n               &lt;/tbody&gt; \r\n            &lt;/table&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Used bootstrap table. <b>table</b> and <b>table-striped</b> will style the table according to Boostrap style standard.</p></li>\r\n<li><p>Used <b>ngFor</b> to loop over the <b>expenseEntries</b> and generate table rows.</p></li>\r\n</ul>\r\n<p>Open <b>AppComponent</b> template, <b>src/app/app.component.html</b> and include <b>ExpenseEntryListComponent</b> and remove <b>ExpenseEntryComponent</b> as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n... \r\n&lt;app-expense-entry-list&gt;&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Finally, the output of the application is as shown below.</p>\r\n<!--<img src=\"images/appcomponent.jpg\" alt=\"AppComponent\" />-->\r\n<h2>Use pipes</h2>\r\n<p>Let us use the pipe in the our <b>ExpenseManager</b> application</p>\r\n<p>Open <b>ExpenseEntryListComponent’s</b> template, <b>src/app/expense-entry-list/expense-entry-list.component.html</b> and include pipe in <b>entry.spendOn</b> as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;td&gt;{{ entry.spendOn | date: 'short' }}&lt;/td&gt;\r\n</pre>\r\n<p>Here, we have used the date pipe to show the spend on date in the short format.</p>\r\n<p>Finally, the output of the application is as shown below &minus;</p>\r\n<!--<img src=\"images/pipes.jpg\" alt=\"Pipes\" />-->\r\n<h2>Add debug service</h2>\r\n<p>Run the below command to generate an Angular service, <b>DebugService</b>.</p>\r\n<pre class=\"result notranslate\">\r\nng g service debug\r\n</pre>\r\n<p>This will create two Typescript files (debug service & its test) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/debug.service.spec.ts (328 bytes) \r\nCREATE src/app/debug.service.ts (134 bytes)\r\n</pre>\r\n<p>Let us analyse the content of the <b>DebugService</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; @Injectable({ \r\n   providedIn: 'root' \r\n}) \r\nexport class DebugService { \r\n   constructor() { } \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>@Injectable</b> decorator is attached to DebugService class, which enables the DebugService to be used in Angular component of the application.</p></li>\r\n<li><p><b>providerIn</b> option and its value, root enables the DebugService to be used in all component of the application.</p></li>\r\n</ul>\r\n<p>Let us add a method, Info, which will print the message into the browser console.</p>\r\n<pre class=\"result notranslate\">\r\ninfo(message : String) : void { \r\n   console.log(message); \r\n}\r\n</pre>\r\n<p>Let us initialise the service in the <b>ExpenseEntryListComponent</b> and use it to print message.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { ExpenseEntry } from '../expense-entry'; import { DebugService } from '../debug.service'; @Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', styleUrls: ['./expense-entry-list.component.css'] \r\n}) \r\nexport class ExpenseEntryListComponent implements OnInit { \r\n   title: string; \r\n   expenseEntries: ExpenseEntry[]; \r\n   constructor(private debugService: DebugService) { } \r\n   ngOnInit() { \r\n      this.debugService.info(\"Expense Entry List \r\n      component initialized\"); \r\n      this.title = \"Expense Entry List\"; \r\n      this.expenseEntries = this.getExpenseEntries(); \r\n   } \r\n   // other coding \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>DebugService is initialised using constructor parameters. Setting an argument (debugService) of type DebugService will trigger the dependency injection to create a new DebugService object and set it into the ExpenseEntryListComponent component.</p></li>\r\n<li><p>Calling the info method of DebugService in the ngOnInit method prints the message in the browser console.</p></li>\r\n</ul>\r\n<p>The result can be viewed using developer tools and it looks similar as shown below &minus;</p>\r\n<!--<img src=\"images/debug_service.jpg\" alt=\"Debug service\" />-->\r\n<p>Let us extend the application to understand the scope of the service.</p>\r\n<p>Let us a create a <b>DebugComponent</b> by using below mentioned command.</p>\r\n<pre class=\"result notranslate\">\r\nng generate component debug\r\nCREATE src/app/debug/debug.component.html (20 bytes) CREATE src/app/debug/debug.component.spec.ts (621 bytes) \r\nCREATE src/app/debug/debug.component.ts (265 bytes) CREATE src/app/debug/debug.component.css (0 bytes) UPDATE src/app/app.module.ts (392 bytes)\r\n</pre>\r\n<p>Let us remove the DebugService in the root module.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/debug.service.ts\r\nimport { Injectable } from '@angular/core'; @Injectable() \r\nexport class DebugService { \r\n   constructor() { \r\n   }\r\n   info(message : String) : void {     \r\n      console.log(message); \r\n   } \r\n}\r\n</pre>\r\n<p>Register the DebugService under ExpenseEntryListComponent component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/expense-entry-list/expense-entry-list.component.ts @Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', \r\n   styleUrls: ['./expense-entry-list.component.css'] \r\n   providers: [DebugService] \r\n})\r\n</pre>\r\n<p>Here, we have used providers meta data <b>(ElementInjector)</b> to register the service.</p>\r\n<p>Open <b>DebugComponent</b> (src/app/debug/debug.component.ts) and import <b>DebugService</b> and set an instance in the constructor of the component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { DebugService } from '../debug.service'; \r\n@Component({ \r\n   selector: 'app-debug', \r\n   templateUrl: './debug.component.html', \r\n   styleUrls: ['./debug.component.css'] \r\n}) \r\nexport class DebugComponent implements OnInit { \r\n   constructor(private debugService: DebugService) { } \r\n   ngOnInit() { \r\n      this.debugService.info(\"Debug component gets service from Parent\"); \r\n   } \r\n}\r\n</pre>\r\n<p>Here, we have not registered <b>DebugService</b>. So, DebugService will not be available if used as parent component. When used inside a parent component, the service may available from parent, if the parent has access to the service.</p>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and include a content section as shown below:</p>\r\n<pre class=\"result notranslate\">\r\n// existing content \r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p>Here, we have included a content section and DebugComponent section.</p>\r\n<p>Let us include the debug component as a content inside the <b>ExpenseEntryListComponent</b> component in the AppComponent template. Open <b>AppComponent</b> template and change <b>app-expense-entry-list</b> as below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n// navigation code\r\n&lt;app-expense-entry-list&gt;\r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Here, we have included the <b>DebugComponent</b> as content.</p>\r\n<p>Let us check the application and it will show <b>DebugService</b> template at the end of the page as shown below &minus;</p>\r\n<!--<img src=\"images/debug.jpg\" alt=\"Debug \" />-->\r\n<p>Also, we could able to see two debug information from debug component in the console. This indicate that the debug component gets the service from its parent component.</p>\r\n<p>Let us change how the service is injected in the <b>ExpenseEntryListComponent</b> and how it affects the scope of the service. Change providers injector to viewProviders injection. <b>viewProviders</b> does not inject the service into the content child and so, it should fail.</p>\r\n<pre class=\"result notranslate\">\r\nviewProviders: [DebugService]\r\n</pre>\r\n<p>Check the application and you will see that the one of the debug component (used as content child) throws error as shown below &minus;</p>\r\n<!--<img src=\"images/application.jpg\" alt=\"Application \" />-->\r\n<p>Let us remove the debug component in the templates and restore the application.</p>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and remove below content</p>\r\n<pre class=\"result notranslate\"> \r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p>Open <b>AppComponent</b> template and change <b>app-expense-entry-list</b> as below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n// navigation code\r\n&lt;app-expense-entry-list&gt;\r\n&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Change the <b>viewProviders</b> setting to <b>providers</b> in <b>ExpenseEntryListComponent</b>.</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [DebugService]\r\n</pre>\r\n<p>Rerun the application and check the result.</p>\r\n<h2>Create expense service</h2>\r\n<p>Let us create a new service <b>ExpenseEntryService</b> in our <b>ExpenseManager</b> application to interact with <b>Expense REST API</b>. ExpenseEntryService will get the latest expense entries, insert new expense entries, modify existing expense entries and delete the unwanted expense entries.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Run the below command to generate an Angular service, <b>ExpenseService</b>.</p>\r\n<pre class=\"result notranslate\">\r\nng generate service ExpenseEntry\r\n</pre>\r\n<p>This will create two Typescript files (expense entry service & its test) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry.service.spec.ts (364 bytes) \r\nCREATE src/app/expense-entry.service.ts (141 bytes)\r\n</pre>\r\n<p>Open <b>ExpenseEntryService</b> (src/app/expense-entry.service.ts) and import <b>ExpenseEntry, throwError</b> and <b>catchError</b> from rxjs library and import <b>HttpClient, HttpHeaders</b> and <b>HttpErrorResponse</b> from @angular/common/http package.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; \r\nimport { ExpenseEntry } from './expense-entry'; import { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators'; \r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from \r\n'@angular/common/http';\r\n</pre>\r\n<p>Inject the HttpClient service into our service.</p>\r\n<pre class=\"result notranslate\">\r\nconstructor(private httpClient : HttpClient) { }\r\n</pre>\r\n<p>Create a variable, <b>expenseRestUrl</b> to specify the <b>Expense Rest API</b> endpoints.</p>\r\n<pre class=\"result notranslate\">\r\nprivate expenseRestUrl = 'http://localhost:8000/api/expense';\r\n</pre>\r\n<p>Create a variable, <b>httpOptions</b> to set the Http Header option. This will be used during the Http Rest API call by Angular <b>HttpClient</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nprivate httpOptions = { \r\n   headers: new HttpHeaders( { 'Content-Type': 'application/json' }) \r\n};\r\n</pre>\r\n<p>The complete code is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { ExpenseEntry } from './expense-entry';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseEntryService {\r\n      private expenseRestUrl = 'api/expense';\r\n      private httpOptions = {\r\n         headers: new HttpHeaders( { 'Content-Type': 'application/json' })\r\n      };\r\n\r\n   constructor(\r\n      private httpClient : HttpClient) { }\r\n}\r\n</pre>\r\n<h2>Http programming using HttpClient service</h2>\r\n<p>Start the Expense REST API application as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/expense-rest-api \r\nnode .\\server.js\r\n</pre>\r\n<p>Add <b>getExpenseEntries()</b> and <b>httpErrorHandler()</b> method in <b>ExpenseEntryService</b> (src/app/expense-entry.service.ts) service.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngetExpenseEntries() : Observable&lt;ExpenseEntry[]&gt; {\r\n   return this.httpClient.get&lt;ExpenseEntry[]&gt;(this.expenseRestUrl, this.httpOptions)\r\n   .pipe(retry(3),catchError(this.httpErrorHandler));\r\n}\r\n\r\ngetExpenseEntry(id: number) : Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.get&lt;ExpenseEntry&gt;(this.expenseRestUrl + \"/\" + id, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n\r\nprivate httpErrorHandler (error: HttpErrorResponse) {\r\n      if (error.error instanceof ErrorEvent) {\r\n      console.error(\"A client side error occurs. The error message is \" + error.message);\r\n      } else {\r\n      console.error(\r\n            \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n      }\r\n\r\n      return throwError(\"Error occurred. Pleas try again\");\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>getExpenseEntries()</b> calls the <b>get()</b> method using expense end point and also configures the error handler. Also, it configures <b>httpClient</b> to try for maximum of 3 times in case of failure. Finally, it returns the response from server as typed <b>(ExpenseEntry[])</b> Observable object.</p></li>\r\n<li><p><b>getExpenseEntry</b> is similar to getExpenseEntries() except it passes the id of the ExpenseEntry object and gets ExpenseEntry Observable object.</p></li>\r\n</ul>\r\n<p>The complete coding of <b>ExpenseEntryService</b> is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { ExpenseEntry } from './expense-entry';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseEntryService {\r\n   private expenseRestUrl = 'http://localhost:8000/api/expense';\r\n   private httpOptions = {\r\n      headers: new HttpHeaders( { 'Content-Type': 'application/json' })\r\n   };\r\n\r\n   constructor(private httpClient : HttpClient) { } \r\n\r\n   getExpenseEntries() : Observable<ExpenseEntry[]> {\r\n      return this.httpClient.get<ExpenseEntry[]>(this.expenseRestUrl, this.httpOptions)\r\n      .pipe(\r\n         retry(3),\r\n         catchError(this.httpErrorHandler)\r\n      );\r\n   }\r\n\r\n   getExpenseEntry(id: number) : Observable<ExpenseEntry> {\r\n      return this.httpClient.get<ExpenseEntry>(this.expenseRestUrl + \"/\" + id, this.httpOptions)\r\n      .pipe(\r\n         retry(3),\r\n         catchError(this.httpErrorHandler)\r\n      );\r\n   }\r\n\r\n   private httpErrorHandler (error: HttpErrorResponse) {\r\n      if (error.error instanceof ErrorEvent) {\r\n         console.error(\"A client side error occurs. The error message is \" + error.message);\r\n      } else {\r\n         console.error(\r\n            \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n      }\r\n\r\n      return throwError(\"Error occurred. Pleas try again\");\r\n   }\r\n}\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent</b> (src-entry-list-entry-list.component.ts) and inject <b>ExpenseEntryService</b> through constructor as specified below:</p>\r\n<pre class=\"result notranslate\">\r\nconstructor(private debugService: DebugService, private restService : \r\nExpenseEntryService ) { }\r\n</pre>\r\n<p>Change the <b>getExpenseEntries()</b> function. Call getExpenseEntries() method from <b>ExpenseEntryService</b> instead of returning the mock items.</p>\r\n<pre class=\"result notranslate\">\r\ngetExpenseItems() {  \r\n   this.restService.getExpenseEntries() \r\n      .subscribe( data =&minus; this.expenseEntries = data ); \r\n}\r\n</pre>\r\n<p>The complete <b>ExpenseEntryListComponent</b> coding is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ExpenseEntry } from '../expense-entry';\r\nimport { DebugService } from '../debug.service';\r\nimport { ExpenseEntryService } from '../expense-entry.service';\r\n\r\n@Component({\r\n   selector: 'app-expense-entry-list',\r\n   templateUrl: './expense-entry-list.component.html',\r\n   styleUrls: ['./expense-entry-list.component.css'],\r\n   providers: [DebugService]\r\n})\r\nexport class ExpenseEntryListComponent implements OnInit {\r\n   title: string;\r\n   expenseEntries: ExpenseEntry[];\r\n   constructor(private debugService: DebugService, private restService : ExpenseEntryService ) { }\r\n\r\n   ngOnInit() {\r\n      this.debugService.info(\"Expense Entry List component initialized\");\r\n      this.title = \"Expense Entry List\";\r\n\r\n      this.getExpenseItems();\r\n   }\r\n\r\n   getExpenseItems() {\r\n      this.restService.getExpenseEntries()\r\n      .subscribe( data =&gt; this.expenseEntries = data );\r\n   }\r\n}\r\n</pre>\r\n<p>Finally, check the application and you will see the below response.</p>\r\n<!--<img src=\"images/failed_request.jpg\" alt=\"failed request \" />-->\r\n<h3>Add Expense functionality</h3>\r\n<p>Let us add a new method, <b>addExpenseEntry()</b> in our <b>ExpenseEntryService</b> to add new expense entry as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\naddExpenseEntry(expenseEntry: ExpenseEntry): Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.post&lt;ExpenseEntry&gt;(this.expenseRestUrl, expenseEntry, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h3>Update expense entry functionality</h3>\r\n<p>Let us add a new method, <b>updateExpenseEntry()</b> in our <b>ExpenseEntryService</b> to update existing expense entry as mentioned below:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nupdateExpenseEntry(expenseEntry: ExpenseEntry): Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.put&lt;ExpenseEntry&gt;(this.expenseRestUrl + \"/\" + expenseEntry.id, expenseEntry, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre> \r\n<h3>Delete expense entry functionality</h3>\r\n<p>Let us add a new method, <b>deleteExpenseEntry()</b> in our <b>ExpenseEntryService</b> to delete existing expense entry as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ndeleteExpenseEntry(expenseEntry: ExpenseEntry | number) : Observable&lt;ExpenseEntry&gt; {\r\n   const id = typeof expenseEntry == 'number' ? expenseEntry : expenseEntry.id\r\n   const url = `${this.expenseRestUrl}/${id}`;\r\n\r\n   return this.httpClient.delete&lt;ExpenseEntry&gt;(url, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h2>Add Routing</h2>\r\n<p>Generate routing module using below command, if not done before.</p>\r\n<pre class=\"result notranslate\">\r\nng generate module app-routing --module app --flat\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/app-routing.module.ts (196 bytes) \r\nUPDATE src/app/app.module.ts (785 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<p>CLI generate <b>AppRoutingModule</b> and then, configures it in <b>AppModule</b></p>\r\n<p>Update <b>AppRoutingModule (src/app/app.module.ts)</b> as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core'; \r\nimport { Routes, RouterModule } from '@angular/router'; import { ExpenseEntryComponent } from './expense-entry/expense-entry.component'; \r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component'; \r\nconst routes: Routes = [ \r\n   { path: 'expenses', component: ExpenseEntryListComponent }, \r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent }, \r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }]; \r\n@NgModule({ \r\n   imports: [RouterModule.forRoot(routes)], \r\n   exports: [RouterModule] }) \r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here, we have added route for our expense list and expense details component.</p>\r\n<p>Update <b>AppComponent</b> template <b>(src/app/app.component.html)</b> to include <b>router-outlet</b> and <b>routerLink.</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt; \r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt; \r\n&lt;div class=\"container\"&gt; \r\n   &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; \r\n      &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; \r\n   &lt;/button&gt; \r\n   &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt; \r\n      &lt;ul class=\"navbar-nav ml-auto\"&gt; \r\n         &lt;li class=\"nav-item active\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Home \r\n               &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt; \r\n            &lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" routerLink=\"/expenses\"&gt;Report&lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt; \r\n         &lt;/li&gt; \r\n      &lt;/ul&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt; \r\n&lt;/nav&gt; \r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and include view option for every expense entries.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;table class=\"table table-striped\"&gt; \r\n   &lt;thead&gt; \r\n      &lt;tr&gt; \r\n         &lt;th&gt;Item&lt;/th&gt;\r\n         &lt;th&gt;Amount&lt;/th&gt; \r\n         &lt;th&gt;Category&lt;/th&gt; \r\n         &lt;th&gt;Location&lt;/th&gt; \r\n         &lt;th&gt;Spent On&lt;/th&gt; \r\n         &lt;th&gt;View&lt;/th&gt; \r\n      &lt;/tr&gt; \r\n   &lt;/thead&gt; \r\n   &lt;tbody&gt; \r\n      &lt;tr *ngFor=\"let entry of expenseEntries\"&gt; \r\n         &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt; \r\n         &lt;th&gt;{{ entry.amount }}&lt;/th&gt; \r\n         &lt;td&gt;{{ entry.category }}&lt;/td&gt; \r\n         &lt;td&gt;{{ entry.location }}&lt;/td&gt; \r\n         &lt;td&gt;{{ entry.spendOn | date: 'medium' }}&lt;/td&gt; \r\n         &lt;td&gt;&lt;a routerLink=\"../expenses/detail/{{ entry.id }}\"&gt;View&lt;/a&gt;&lt;/td&gt; \r\n      &lt;/tr&gt; \r\n   &lt;/tbody&gt; \r\n&lt;/table&gt;\r\n</pre>\r\n<p>Here, we have updated the expense list table and added a new column to show the view option.</p>\r\n<p>Open <b>ExpenseEntryComponent (src/app/expense-entry/expense-entry.component.ts)</b> and add functionality to fetch the current selected expense entry. It can be done by first getting the id through the <b>paramMap</b> and then, using the <b>getExpenseEntry()</b> method from <b>ExpenseEntryService</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nthis.expenseEntry$ = this.route.paramMap.pipe(  \r\n   switchMap(params =&gt; { \r\n      this.selectedId = Number(params.get('id')); \r\n      return \r\nthis.restService.getExpenseEntry(this.selectedId); })); \r\n   this.expenseEntry$.subscribe( (data) =&gt; this.expenseEntry = data );\r\n</pre>\r\n<p>Update ExpenseEntryComponent and add option to go to expense list.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngoToList() { \r\n   this.router.navigate(['/expenses']); \r\n}\r\n</pre>\r\n<p>The complete code of ExpenseEntryComponent is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { ExpenseEntry } from '../expense-entry'; import { ExpenseEntryService } from '../expense-entry.service'; \r\nimport { Router, ActivatedRoute } from '@angular/router'; \r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators'; \r\n@Component({ \r\n   selector: 'app-expense-entry', \r\n   templateUrl: './expense-entry.component.html', \r\n   styleUrls: ['./expense-entry.component.css'] \r\n}) \r\nexport class ExpenseEntryComponent implements OnInit { \r\n   title: string; \r\n   expenseEntry$ : Observable&lt;ExpenseEntry&gt;; \r\n   expenseEntry: ExpenseEntry = {} as ExpenseEntry; \r\n   selectedId: number; \r\n   constructor(private restService : ExpenseEntryService, private router : Router, private route : \r\nActivatedRoute ) { } \r\n   ngOnInit() { \r\n      this.title = \"Expense Entry\"; \r\n   this.expenseEntry$ = this.route.paramMap.pipe( \r\n      switchMap(params =&gt; { \r\n         this.selectedId = Number(params.get('id')); \r\n         return \r\nthis.restService.getExpenseEntry(this.selectedId); })); \r\n   this.expenseEntry$.subscribe( (data) =&gt; this.expenseEntry = data ); \r\n   } \r\n   goToList() { \r\n      this.router.navigate(['/expenses']); \r\n   } \r\n}\r\n</pre>\r\n<p>Open <b>ExpenseEntryComponent (src/app/expense-entry/expense-entry.component.html)</b> template and add a new button to navigate back to expense list page.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n   &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"goToList()\"&gt;Go to List&lt;/button&gt; &nbsp;\r\n   &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here, we have added <b>Go to List</b> button before <b>Edit</b> button.</p>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>The final output of the application is as follows &minus;</p>\r\n<!--<img src=\"images/nested_routing.jpg\" alt=\"Nested routing\" />-->\r\n<p>Clicking the view option of the first entry will navigate to details page and show the selected expense entry as shown below &minus;</p>\r\n<!--<img src=\"images/nested_routings.jpg\" alt=\"Nested routing\" />-->\r\n<h2>Enable login and logout feature</h2>\r\n<p>Create a new service, AuthService to authenticate the user.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate service auth\r\nCREATE src/app/auth.service.spec.ts (323 bytes)\r\nCREATE src/app/auth.service.ts (133 bytes)\r\n</pre>\r\n<p>Open <b>AuthService</b> and include below code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, delay } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n   isUserLoggedIn: boolean = false;\r\n\r\n   login(userName: string, password: string): Observable<boolean> {\r\n      console.log(userName);\r\n      console.log(password);\r\n      this.isUserLoggedIn = userName == 'admin' && password == 'admin';\r\n      localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \r\n\r\n   return of(this.isUserLoggedIn).pipe(\r\n      delay(1000),\r\n      tap(val => { \r\n         console.log(\"Is User Authentication is successful: \" + val); \r\n      })\r\n   );\r\n   }\r\n\r\n   logout(): void {\r\n   this.isUserLoggedIn = false;\r\n      localStorage.removeItem('isUserLoggedIn'); \r\n   }\r\n\r\n   constructor() { }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>We have written two methods, <b>login</b> and <b>logout</b>.</p></li>\r\n<li><p>The purpose of the <b>login</b> method is to validate the user and if the user successfully validated, it stores the information in <b>localStorage</b> and then returns true.</p></li>\r\n<li><p>Authentication validation is that the user name and password should be <b>admin.</b></p></li>\r\n<li><p>We have not used any backend. Instead, we have simulated a delay of 1s using Observables.</p></li>\r\n<li><p>The purpose of the <b>logout</b> method is to invalidate the user and removes the information stored in <b>localStorage.</b></p></li>\r\n</ul>\r\n<p>Create a <b>login</b> component using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component login\r\nCREATE src/app/login/login.component.html (20 bytes)\r\nCREATE src/app/login/login.component.spec.ts (621 bytes)\r\nCREATE src/app/login/login.component.ts (265 bytes)\r\nCREATE src/app/login/login.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1207 bytes)\r\n</pre>\r\n<p>Open <b>LoginComponent</b> and include below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n   selector: 'app-login',\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n   userName: string;\r\n   password: string;\r\n   formData: FormGroup;\r\n\r\n   constructor(private authService : AuthService, private router : Router) { }\r\n\r\n   ngOnInit() {\r\n      this.formData = new FormGroup({\r\n         userName: new FormControl(\"admin\"),\r\n         password: new FormControl(\"admin\"),\r\n      });\r\n   }\r\n\r\n   onClickSubmit(data: any) {\r\n      this.userName = data.userName;\r\n      this.password = data.password;\r\n\r\n      console.log(\"Login page: \" + this.userName);\r\n      console.log(\"Login page: \" + this.password);\r\n\r\n      this.authService.login(this.userName, this.password)\r\n         .subscribe( data =&gt; { \r\n            console.log(\"Is Login Success: \" + data); \r\n      \r\n           if(data) this.router.navigate(['/expenses']); \r\n      });\r\n   }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Used reactive forms.</p></li>\r\n<li><p>Imported AuthService and Router and configured it in constructor.</p></li>\r\n<li><p>Created an instance of FormGroup and included two instance of FormControl, one for user name and another for password.</p></li>\r\n<li><p>Created a onClickSubmit to validate the user using authService and if successful, navigate to expense list.</p></li>\r\n</ul>\r\n<p>Open <b>LoginComponent</b> template and include below template code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container box\" style=\"margin-top: 10px; padding-left: 0px; padding-right: 0px;\"&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-12\" style=\"text-align: center;\"&gt;\r\n                                    &lt;form [formGroup]=\"formData\" (ngSubmit)=\"onClickSubmit(formData.value)\" \r\n                                          class=\"form-signin\"&gt;\r\n                                    &lt;h2 class=\"form-signin-heading\"&gt;Please sign in&lt;/h2&gt;\r\n                                    &lt;label for=\"inputEmail\" class=\"sr-only\"&gt;Email address&lt;/label&gt;\r\n                                    &lt;input type=\"text\" id=\"username\" class=\"form-control\" \r\n                                          formControlName=\"userName\" placeholder=\"Username\" required autofocus&gt;\r\n                                    &lt;label for=\"inputPassword\" class=\"sr-only\"&gt;Password&lt;/label&gt;\r\n                                    &lt;input type=\"password\" id=\"inputPassword\" class=\"form-control\" \r\n                                          formControlName=\"password\" placeholder=\"Password\" required&gt;\r\n                                    &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt;\r\n                                    &lt;/form&gt;\r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Created a reactive form and designed a login form.</p>\r\n<p>Attached the <b>onClickSubmit</b> method to the form submit action.</p>\r\n<p>Open <b>LoginComponent</b> style and include below CSS Code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n.form-signin {\r\n   max-width: 330px;\r\n\r\n   padding: 15px;\r\n   margin: 0 auto;\r\n}\r\n\r\ninput {\r\n   margin-bottom: 20px;\r\n}\r\n</pre>\r\n<p>Here, some styles are added to design the login form.</p>\r\n<p>Create a logout component using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component logout\r\nCREATE src/app/logout/logout.component.html (21 bytes)\r\nCREATE src/app/logout/logout.component.spec.ts (628 bytes)\r\nCREATE src/app/logout/logout.component.ts (269 bytes)\r\nCREATE src/app/logout/logout.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1368 bytes)\r\n</pre>\r\n<p>Open <b>LogoutComponent</b> and include below code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n   selector: 'app-logout',\r\n   templateUrl: './logout.component.html',\r\n   styleUrls: ['./logout.component.css']\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n\r\n   constructor(private authService : AuthService, private router: Router) { }\r\n\r\n   ngOnInit() {\r\n      this.authService.logout();\r\n      this.router.navigate(['/']);\r\n   }\r\n\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Used logout method of AuthService.</li>\r\n<li>Once the user is logged out, the page will redirect to home page (/).</li>\r\n</ul>\r\n<p>Create a guard using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate guard expense\r\nCREATE src/app/expense.guard.spec.ts (364 bytes)\r\nCREATE src/app/expense.guard.ts (459 bytes)\r\n</pre>\r\n<p>Open ExpenseGuard and include below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseGuard implements CanActivate {\r\n\r\n   constructor(private authService: AuthService, private router: Router) {}\r\n\r\n   canActivate(\r\n   next: ActivatedRouteSnapshot,\r\n   state: RouterStateSnapshot): boolean | UrlTree {\r\n      let url: string = state.url;\r\n\r\n          return this.checkLogin(url);\r\n      }\r\n\r\n      checkLogin(url: string): true | UrlTree {\r\n         console.log(\"Url: \" + url)\r\n         let val: string = localStorage.getItem('isUserLoggedIn');\r\n\r\n         if(val != null && val == \"true\"){\r\n            if(url == \"/login\")\r\n               this.router.parseUrl('/expenses');\r\n            else \r\n               return true;\r\n         } else {\r\n            return this.router.parseUrl('/login');\r\n         }\r\n      }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>checkLogin will check whether the localStorage has the user information and if it is available, then it returns true.</li>\r\n<li>If the user is logged in and goes to login page, it will redirect the user to expenses page</li>\r\n<li>If the user is not logged in, then the user will be redirected to login page.</li>\r\n</ul>\r\n<p>Open <b>AppRoutingModule (src/app/app-routing.module.ts)</b> and update below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ExpenseEntryComponent } from './expense-entry/expense-entry.component';\r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\n\r\nimport { ExpenseGuard } from './expense.guard';\r\n\r\nconst routes: Routes = [\r\n   { path: 'login', component: LoginComponent },\r\n   { path: 'logout', component: LogoutComponent },\r\n   { path: 'expenses', component: ExpenseEntryListComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Imported LoginComponent and LogoutComponent.</li>\r\n<li>Imported ExpenseGuard.</li>\r\n<li>Created two new routes, login and logout to access LoginComponent and LogoutComponent respectively.</li>\r\n<li>Add new option canActivate for ExpenseEntryComponent and ExpenseEntryListComponent.</li>\r\n</ul>\r\n<p>Open <b>AppComponent </b>template and add two login and logout link.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt;\r\n   &lt;ul class=\"navbar-nav ml-auto\"&gt;\r\n      &lt;li class=\"nav-item active\"&gt;\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n            &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt;\r\n\r\n         &lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n         &lt;a class=\"nav-link\" routerLink=\"/expenses\"&gt;Report&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n                  &lt;div *ngIf=\"isUserLoggedIn; else isLogOut\"&gt;\r\n                        &lt;a class=\"nav-link\" routerLink=\"/logout\"&gt;Logout&lt;/a&gt;\r\n                  &lt;/div&gt;\r\n\r\n                  &lt;ng-template #isLogOut&gt;\r\n                              &lt;a class=\"nav-link\" routerLink=\"/login\"&gt;Login&lt;/a&gt;\r\n                  &lt;/ng-template&gt;\r\n      &lt;/li&gt;\r\n   &lt;/ul&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Open <b>AppComponent</b> and update below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component } from '@angular/core';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n   title = 'Expense Manager';\r\n   isUserLoggedIn = false;\r\n\r\n   constructor(private authService: AuthService) {}\r\n\r\n   ngOnInit() {\r\n      let storeData = localStorage.getItem(\"isUserLoggedIn\");\r\n      console.log(\"StoreData: \" + storeData);\r\n\r\n      if( storeData != null && storeData == \"true\")\r\n         this.isUserLoggedIn = true;\r\n      else\r\n\r\n\r\n         this.isUserLoggedIn = false;\r\n   }\r\n}\r\n</pre>\r\n<p>Here, we have added the logic to identify the user status so that we can show login / logout functionality.</p>\r\n<p>Open <b>AppModule (src/app/app.module.ts)</b> and configure <b>ReactiveFormsModule</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { ReactiveFormsModule } from '@angular/forms'; \r\nimports: [ \r\n   ReactiveFormsModule \r\n]\r\n</pre>\r\n<p>Now, run the application and the application opens the login page.</p>\r\n<!--<img src=\"images/reactiveformsmodule.jpg\" alt=\"ReactiveFormsModule\" />-->\r\n<p>Enter admin and admin as username and password and then, click submit. The application process the login and redirects the user to expense list page as shown below &minus;</p>\r\n<!--<img src=\"images/formsmodule.jpg\" alt=\"FormsModule\" />-->\r\n<p>Finally, your can click logout and exit the application.</p>\r\n<h2>Add / Edit / Delete Expenses</h2>\r\n<p>Add new component, <b>EditEntryComponent</b> to add new expense entry and edit the existing expense entries using below command</p>\r\n<pre class=\"result notranslate\">\r\nng generate component EditEntry\r\nCREATE src/app/edit-entry/edit-entry.component.html (25 bytes)\r\nCREATE src/app/edit-entry/edit-entry.component.spec.ts (650 bytes)\r\nCREATE src/app/edit-entry/edit-entry.component.ts (284 bytes)\r\nCREATE src/app/edit-entry/edit-entry.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1146 bytes)\r\n</pre>\r\n<p>Update <b>EditEntryComponent</b> with below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\nimport { ExpenseEntry } from '../expense-entry';\r\nimport { ExpenseEntryService } from '../expense-entry.service';\r\n\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n   selector: 'app-edit-entry',\r\n   templateUrl: './edit-entry.component.html',\r\n   styleUrls: ['./edit-entry.component.css']\r\n})\r\nexport class EditEntryComponent implements OnInit {\r\n   id: number;\r\n   item: string;\r\n   amount: number;\r\n   category: string;\r\n   location: string;\r\n   spendOn: Date;\r\n\r\n   formData: FormGroup;\r\n   selectedId: number;\r\n   expenseEntry: ExpenseEntry;\r\n\r\n   constructor(private expenseEntryService : ExpenseEntryService, private router: Router, private route: ActivatedRoute) { }\r\n\r\n   ngOnInit() {\r\n      this.formData = new FormGroup({\r\n         id: new FormControl(),\r\n         item: new FormControl('', [Validators.required]),\r\n         amount: new FormControl('', [Validators.required]),\r\n         category: new FormControl(),\r\n         location: new FormControl(),\r\n         spendOn: new FormControl()\r\n      });\r\n\r\n      this.selectedId = Number(this.route.snapshot.paramMap.get('id'));\r\n\r\n      if(this.selectedId != null && this.selectedId != 0) {\r\n         this.expenseEntryService.getExpenseEntry(this.selectedId)\r\n            .subscribe( (data) => \r\n               {\r\n                  this.expenseEntry = data;\r\n                  this.formData.controls['id'].setValue(this.expenseEntry.id);\r\n                  this.formData.controls['item'].setValue(this.expenseEntry.item);\r\n                  this.formData.controls['amount'].setValue(this.expenseEntry.amount);\r\n                  this.formData.controls['category'].setValue(this.expenseEntry.category);\r\n                  this.formData.controls['location'].setValue(this.expenseEntry.location);\r\n\r\n\r\n                  this.formData.controls['spendOn'].setValue(this.expenseEntry.spendOn);\r\n               })\r\n      }\r\n\r\n\r\n   }\r\n\r\n   get itemValue() {\r\n   return this.formData.get('item');\r\n   }\r\n\r\n   get amountValue() {\r\n   return this.formData.get('amount');\r\n   }\r\n\r\n    onClickSubmit(data: any) {\r\n   console.log('onClickSubmit fired');\r\n   this.id = data.id;\r\n   this.item = data.item;\r\n   this.amount = data.amount;\r\n   this.category = data.category;\r\n   this.location = data.location;\r\n   this.spendOn = data.spendOn;\r\n\r\n   let expenseEntry : ExpenseEntry = {\r\n      id: this.id,\r\n       item: this.item,\r\n       amount: this.amount,\r\n       category: this.category,\r\n       location: this.location,\r\n       spendOn: this.spendOn,\r\n       createdOn: new Date(2020, 5, 20)\r\n   }\r\n   console.log(expenseEntry);\r\n\r\n      if(expenseEntry.id == null || expenseEntry.id == 0) {\r\n         console.log('add fn fired');\r\n      this.expenseEntryService.addExpenseEntry(expenseEntry)\r\n         .subscribe( data => { console.log(data); this.router.navigate(['/expenses']); });\r\n   } else {\r\n         console.log('edit fn fired');\r\n      this.expenseEntryService.updateExpenseEntry(expenseEntry)\r\n         .subscribe( data => { console.log(data); this.router.navigate(['/expenses']); });\r\n   }\r\n    }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Created a form, <b>formData</b> in the <b>ngOnInit</b> method using <b>FormControl</b> and <b>FormGroup</b> classes with proper validation rules.</p></li>\r\n<li><p>Loaded the expense entry to be edited in the <b>ngOnInit</b> method.</p></li>\r\n<li><p>Created two methods, <b>itemValue</b> and <b>amountValue</b> to get the item and amount values respectively entered by user for the validation purpose.</p></li>\r\n<li><p>Created method, <b>onClickSubmit</b> to save (add / update) the expense entry.</p></li>\r\n<li><p>Used Expense service to add and update expense entries.</p></li>\r\n</ul>\r\n<p>Update the <b>EditEntryComponent</b> template with expense form as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n   &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n       &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt;\r\n       &lt;/div&gt;\r\n       &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt;\r\n&lt;form [formGroup]=\"formData\" (ngSubmit)=\"onClickSubmit(formData.value)\" class=\"form\" novalidate&gt; \r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"item\"&gt;Item&lt;/label&gt;\r\n    &lt;input type=\"hidden\" class=\"form-control\" id=\"id\" formControlName=\"id\"&gt;\r\n    &lt;input type=\"text\" class=\"form-control\" id=\"item\" formControlName=\"item\"&gt;\r\n    &lt;div\r\n   *ngIf=\"!itemValue?.valid && (itemValue?.dirty ||itemValue?.touched)\"&gt;\r\n   &lt;div [hidden]=\"!itemValue.errors.required\"&gt;\r\n      Item is required\r\n   &lt;/div&gt;\r\n   &lt;/div&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"amount\"&gt;Amount&lt;/label&gt;\r\n    &lt;input type=\"text\" class=\"form-control\" id=\"amount\" formControlName=\"amount\"&gt;\r\n    &lt;div\r\n   *ngIf=\"!amountValue?.valid && (amountValue?.dirty ||amountValue?.touched)\"&gt;\r\n   &lt;div [hidden]=\"!amountValue.errors.required\"&gt;\r\n      Amount is required\r\n   &lt;/div&gt;\r\n   &lt;/div&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"category\"&gt;Category&lt;/label&gt;\r\n    &lt;select class=\"form-control\" id=\"category\" formControlName=\"category\"&gt;\r\n      &lt;option&gt;Food&lt;/option&gt;\r\n      &lt;option&gt;Vegetables&lt;/option&gt;\r\n      &lt;option&gt;Fruit&lt;/option&gt;\r\n      &lt;option&gt;Electronic Item&lt;/option&gt;\r\n\r\n      &lt;option&gt;Bill&lt;/option&gt;\r\n    &lt;/select&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"location\"&gt;location&lt;/label&gt;\r\n    &lt;input type=\"text\" class=\"form-control\" id=\"location\" formControlName=\"location\"&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"spendOn\"&gt;spendOn&lt;/label&gt;\r\n    &lt;input type=\"text\" class=\"form-control\" id=\"spendOn\" formControlName=\"spendOn\"&gt;\r\n  &lt;/div&gt;\r\n&lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" [disabled]=\"!formData.valid\"&gt;Submit&lt;/button&gt;\r\n&lt;/form&gt;\r\n       &lt;/div&gt;\r\n   &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Created a form and bind it to the form, <b>formData</b> created in the class.</p></li>\r\n<li><p>Validated <b>item</b> and <b>amount</b> as required values.</p></li>\r\n<li><p>Called <b>onClickSubmit</b> function once validation in successful.</p></li>\r\n</ul>\r\n<p>Open <b>EditEntryComponent</b> stylesheet and update below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n.form {\r\n   max-width: 330px;\r\n   padding: 15px;\r\n   margin: 0 auto;\r\n}\r\n\r\n.form label {\r\n   text-align: left;\r\n   width: 100%;\r\n}\r\n\r\ninput {\r\n   margin-bottom: 20px;\r\n}\r\n</pre>\r\n<p>Here, we have styled the expense entry form.</p>\r\n<p>Add <b>AboutComponent</b> using below command</p>\r\n<pre class=\"result notranslate\">\r\nng generate component About\r\nCREATE src/app/about/about.component.html (20 bytes)\r\n\r\nCREATE src/app/about/about.component.spec.ts (621 bytes)\r\nCREATE src/app/about/about.component.ts (265 bytes)\r\nCREATE src/app/about/about.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1120 bytes)\r\n</pre>\r\n<p>Open <b>AboutComponent</b> and add title as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n   selector: 'app-about',\r\n   templateUrl: './about.component.html',\r\n   styleUrls: ['./about.component.css']\r\n})\r\nexport class AboutComponent implements OnInit {\r\n   title = \"About\";\r\n   constructor() { }\r\n\r\n   ngOnInit() {\r\n   }\r\n\r\n}\r\n</pre>\r\n<p>Open <b>AboutComponent</b> template and updated content as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n   &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n       &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt;\r\n      &lt;div class=\"row\"&gt;\r\n          &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt;\r\n         &lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n          &lt;/div&gt;\r\n      &lt;/div&gt;\r\n       &lt;/div&gt;\r\n       &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt;\r\n      &lt;div class=\"row\"&gt;\r\n          &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n         &lt;p&gt;Expense management Application&lt;/p&gt;\r\n          &lt;/div&gt;\r\n      &lt;/div&gt;\r\n       &lt;/div&gt;\r\n   &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Add routing for add and edit expense entries as specified below</p>\r\n<pre class=\"result notranslate\">\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ExpenseEntryComponent } from './expense-entry/expense-entry.component';\r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\nimport { EditEntryComponent } from './edit-entry/edit-entry.component';\r\nimport { AboutComponent } from './about/about.component';\r\n\r\nimport { ExpenseGuard } from './expense.guard';\r\n\r\nconst routes: Routes = [\r\n   { path: 'about', component: AboutComponent },\r\n   { path: 'login', component: LoginComponent },\r\n   { path: 'logout', component: LogoutComponent },\r\n   { path: 'expenses', component: ExpenseEntryListComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/add', component: EditEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/edit/:id', component: EditEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n      imports: [RouterModule.forRoot(routes)],\r\n      exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here, we have added <b>about, add expense</b> and <b>edit expense</b> routes.</p>\r\n<p>Add <b>Edit</b> and <b>Delete</b> links in <b>ExpenseEntryListComponent</b> template.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;table class=\"table table-striped\"&gt;\r\n   &lt;thead&gt;\r\n         &lt;tr&gt;\r\n         &lt;th&gt;Item&lt;/th&gt;\r\n         &lt;th&gt;Amount&lt;/th&gt;\r\n         &lt;th&gt;Category&lt;/th&gt;\r\n         &lt;th&gt;Location&lt;/th&gt;\r\n         &lt;th&gt;Spent On&lt;/th&gt;\r\n         &lt;th&gt;View&lt;/th&gt;\r\n               &lt;th&gt;Edit&lt;/th&gt;\r\n               &lt;th&gt;Delete&lt;/th&gt;\r\n         &lt;/tr&gt;\r\n   &lt;/thead&gt;\r\n   &lt;tbody&gt;\r\n      &lt;tr *ngFor=\"let entry of expenseEntries\"&gt;\r\n\r\n      &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt;\r\n      &lt;th&gt;{{ entry.amount }}&lt;/th&gt;\r\n      &lt;td&gt;{{ entry.category }}&lt;/td&gt;\r\n      &lt;td&gt;{{ entry.location }}&lt;/td&gt;\r\n      &lt;td&gt;{{ entry.spendOn | date: 'medium' }}&lt;/td&gt;\r\n      &lt;td&gt;&lt;a routerLink=\"../expenses/detail/{{ entry.id }}\"&gt;View&lt;/a&gt;&lt;/td&gt;\r\n      &lt;td&gt;&lt;a routerLink=\"../expenses/edit/{{ entry.id }}\"&gt;Edit&lt;/a&gt;&lt;/td&gt;\r\n      &lt;td&gt;&lt;a href=\"#\" (click)=\"deleteExpenseEntry($event, entry.id)\"&gt;Delete&lt;/a&gt;&lt;/td&gt;\r\n      &lt;/tr&gt;\r\n   &lt;/tbody&gt;\r\n&lt;/table&gt;\r\n</pre>\r\n<p>Here, we have included two more columns. One column is used to show edit link and another to show delete link.</p>\r\n<p>Update <b>deleteExpenseEntry</b> method in <b>ExpenseEntryListComponent</b> as shown below</p>\r\n<pre class=\"prettyprint notranslate\">\r\ndeleteExpenseEntry(evt, id) {\r\n   evt.preventDefault();\r\n   if(confirm(\"Are you sure to delete the entry?\")) {\r\n      this.restService.deleteExpenseEntry(id)\r\n         .subscribe( data =&gt; console.log(data) );\r\n\r\n      this.getExpenseItems();\r\n   }\r\n}\r\n</pre>\r\n<p>Here, we have asked to confirm the deletion and it user confirmed, called the <b>deleteExpenseEntry </b>method from expense service to delete the selected expense item.</p>\r\n<p>Change <b>Edit</b> link in the <b>ExpenseEntryListComponent</b> template at the top to <b>Add</b> link as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt;\r\n   &lt;button class=\"btn btn-primary\" routerLink=\"/expenses/add\"&gt;ADD&lt;/button&gt; \r\n   &lt;!-- &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; --&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Add <b>Edit</b> link in<b>ExpenseEntryComponent</b> template.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt;\r\n   &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"goToList()\"&gt;Go to List&lt;/button&gt;\r\n   &nbsp;&lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"goToEdit()\"&gt;Edit&lt;/button&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Open <b>ExpenseEntryComponent</b> and add <b>goToEdit()</b> method as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngoToEdit() {      \r\n   this.router.navigate(['/expenses/edit', this.selectedId]); \r\n}\r\n</pre>\r\n<p>Update navigation links in <b>AppComponent</b>template.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt;\r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt;\r\n   &lt;div class=\"container\"&gt;\r\n      &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt;\r\n      &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\r\n         &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\r\n      &lt;/button&gt;\r\n      &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt;\r\n         &lt;ul class=\"navbar-nav ml-auto\"&gt;\r\n            &lt;li class=\"nav-item active\"&gt;\r\n               &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n                  &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt;\r\n               &lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n               &lt;a class=\"nav-link\" routerLink=\"/expenses/add\"&gt;Add Expense&lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n               &lt;a class=\"nav-link\" routerLink=\"/about\"&gt;About&lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n                        &lt;div *ngIf=\"isUserLoggedIn; else isLogOut\"&gt;\r\n                              &lt;a class=\"nav-link\" routerLink=\"/logout\"&gt;Logout&lt;/a&gt;\r\n                        &lt;/div&gt;\r\n\r\n                        &lt;ng-template #isLogOut&gt;\r\n                                    &lt;a class=\"nav-link\" routerLink=\"/login\"&gt;Login&lt;/a&gt;\r\n                        &lt;/ng-template&gt;\r\n            &lt;/li&gt;\r\n         &lt;/ul&gt;\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n&lt;/nav&gt;\r\n\r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>Here, we have updated the <b>add expense</b> link and <b>about</b> link.</p>\r\n<p>Run the application and the output will be similar as shown below &minus;</p>\r\n<!--<img src=\"images/expense.jpg\" alt=\"expense\" />-->\r\n<p>Try to add new expense using <b>Add</b> link in expense list page. The output will be similar as shown below</p>\r\n<!--<img src=\"images/add.jpg\" alt=\"Add\" />-->\r\n<p>Fill the form as shown below &minus;</p>\r\n<!--<img src=\"images/submit.jpg\" alt=\"Submit\" />-->\r\n<p>If the data is not filled properly, the validation code will alert as shown below &minus;</p>\r\n<!--<img src=\"images/alert.jpg\" alt=\"alert\" />-->\r\n<p>Click <b>Submit</b>. It will trigger the submit event and the data will be saved to the backend and redirected to list page as shown below &minus;</p>\r\n<!--<img src=\"images/backend.jpg\" alt=\"backend\" />-->\r\n<p>Try to edit existing expense using Edit link in expense list page. The output will be similar as shown below &minus;</p>\r\n<!--<img src=\"images/existing.jpg\" alt=\"existing\" />-->\r\n<p>Click <b>Submit.</b> It will trigger the submit event and the data will be saved to the backend and redirected to list page.</p>\r\n<p>To delete an item, click delete link. It will confirm the deletion as shown below &minus;</p>\r\n<!--<img src=\"images/trigger.jpg\" alt=\"trigger\" />-->\r\n<p>Finally, we have implemented all features necessary to manage expenses in our application.</p>\r\n<h1>Angular 8 - What's New?</h1>\r\n<p>Angular community has continuosly updating its version. This chapter explains about Angular 9 version updates. </p>\r\n<h2>Install Angular 9</h2>\r\n<p>If you want to work with Angular 9, first you need to setup Angular 9 CLI using the below command:</p>\r\n<pre class=\"result notranslate\">\r\nnpm install -g @angular/cli@^9.0.0 \r\n</pre>\r\n<p>After executing this command, you can check the version using the below command:</p>\r\n<pre class=\"result notranslate\">\r\nng version \r\n</pre>\r\n<h2>Angular 9 Updates</h2>\r\n<p>Let’s understand Angular 9 updates in brief.</p>\r\n<h3>Ivy compiler</h3>\r\n<p>Ivy compiler becomes the default compiler in Angular 9. This makes apps will be faster and very efficient. Whereas, Angular 8 Ivy is optional. We have to enable it inside tsconfig.json file.</p>\r\n<p>Ivy compiler supports the following features:</p>\r\n<ul class=\"list\">\r\n<li><p><b>Performs faster testing</b> &minus; TestBed implementation helps to test more efficient.</p></li>\r\n<li><p><b>Improved CSS class and styles</b> &minus; Ivy styles are easily merged and designed as predictable.</p></li>\r\n<li><p><b>Improved type checking</b> &minus; This feature helps to find the errors earlier in development process.</p></li>\r\n<li><p><b>Enhanced debugging</b> &minus; Ivy comes with more tools to enable better debugging features. This will be helpful to show useful stack trace so that we can easily jump to the instruction.</p></li>\r\n<li><p><b>Ahead-of-Time compiler</b> &minus; This is one of the important improvements in compiler’s performance. AOT builds are very faster.  Improved internationalization - i18n substitutions helps to build more than ten times faster than previous versions.</p></li>\r\n</ul>\r\n<h3>Reliable ng update</h3>\r\n<p>ng updates are very reliable. It contains clear progress updates and runs all of the migrations. This can be done using the below command:</p>\r\n<pre class=\"result notranslate\">\r\nng update --create-commits\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>–create-commits</b> flag is used to commit your code after each migration.</p>\r\n<h3>Improved Dependency Injection</h3>\r\n<p><b>@Injectable</b> service helps to add injector in your application. <b>providedIn</b> meta data provides new option, <b>platform</b> to ensure the object can be used and shared by all application. It is defined below:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n@Injectable({\r\n   providedIn: 'platform'\r\n}) \r\nclass MyService {...} \r\n</pre>\r\n<h3>TypeScript 3.8</h3>\r\n<p>Angular 9 is designed to support 3.8 version. TypeScript 3.8 brings support for the below features:</p>\r\n<ul class=\"list\">\r\n<li>Type-Only Imports and Exports.</li>\r\n<li>ECMAScript Private Fields.</li>\r\n<li>Top-Level await.</li>\r\n<li>JSDoc Property Modifiers.</li>\r\n<li>export * as ns Syntax.</li>\r\n</ul>\r\n<h3>Angular 9.0.0-next.5</h3>\r\n<p>Angular 9.0.0-next.5 build has small size of main.js file, which makes better performance compare to previous version of Angular 8.</p>\r\n<h3>IDE enhancement</h3>\r\n<p>Angular 9 provides imporves IDE supports. TextMate grammar enables for syntax highlighting in inline and external templates.</p>\r\n<h2>Conclusion</h2>\r\n<p>Angular is flexible, ever improving, continuously updated and dependable framework. Angular greatly simplify the process of SPA development. By providing new features in each release like <b>Angular Universal, Progressive Web App, Web workers, Bazel build, Ivy Compiler,</b> etc., Angular will have a long life and complete support of the front end developer.</p>\r\n\t\t</div>\r\n\r\n","reactive_programming":"<!-- Tutorial Content Starts Here -->\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Reactive Programming</h1>\n<hr/>\n<p>Reactive programming is a programming paradigm dealing with data streams and the propagation of changes. Data streams may be static or dynamic. An example of static data stream is an array or collection of data. It will have an initial quantity and it will not change. An example for dynamic data stream is event emitters. Event emitters emit the data whenever the event happens. Initially, there may be no events but as the time moves on, events happens and it will gets emitted.</p>\n<p>Reactive programming enables the data stream to be emitted from one source called <b>Observable</b> and the emitted data stream to be caught by other sources called <b>Observer</b> through a process called subscription. This Observable / Observer pattern or simple <b>Observer</b> pattern greatly simplifies complex change detection and necessary updating in the context of the programming.</p>\n<p>JavaScript does not have the built-in support for Reactive Programming. <b>RxJs</b> is a JavaScript Library which enables reactive programming in JavaScript. Angular uses <b>RxJs</b> library extensively to do below mentioned advanced concepts &minus;</p>\n<ul class=\"list\">\n<li>Data transfer between components.</li>\n<li>HTTP client.</li>\n<li>Router.</li>\n<li>Reactive forms.</li>\n</ul>\n<p>Let us learn reactive programming using <b>RxJs</b> library in this chapter.</p>\n<h2>Observable</h2>\n<p>As learn earlier, <b>Observable</b> are data sources and they may be static or dynamic. <b>Rxjs</b> provides lot of method to create <b>Observable</b> from common JavaScript Objects. Let us see some of the common methods.</p>\n<p>of &minus; Emit any number of values in a sequence and finally emit a complete notification.</p>\n<pre class=\"result notranslate\">\nconst numbers$ = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><p><b>numbers$</b> is an <b>Observable</b> object, which when subscribed will emit 1 to 10 in a sequence.</p></li>\n<li><p><b>Dollar sign ($)</b> at the end of the variable is to identify that the variable is Observable.</p></li>\n</ul>\n<p><b>range</b> &minus; Emit a range of number in sequence.</p>\n<pre class=\"result notranslate\">\nconst numbers$ = range(1,10)\n</pre>\n<p><b>from</b> &minus; Emit array, promise or iterable.</p>\n<pre class=\"result notranslate\">\nconst numbers$ = from([1,2,3,4,5,6,7,8,9,10]);\n</pre>\n<p><b>ajax</b> &minus; Fetch a url through AJAX and then emit the response.</p>\n<pre class=\"result notranslate\">\nconst api$ = ajax({ url: 'https://httpbin.org/delay/1', method: 'POST', headers: { 'Content-Type': 'application/text' }, body: \"Hello\" });\n</pre>\n<p>Here,</p>\n<p><a target=\"_blank\" rel=\"nofollow\" href=\"https://httpbin.org/\"><b>https://httpbin.org</b></a> is a free REST API service which will return the supplied body content in the JSON format as specified below &minus;</p>\n<pre class=\"result notranslate\">\n{ \n   \"args\": {}, \n   \"data\": \"Hello\", \n   \"files\": {}, \n   \"form\": {}, \n   \"headers\": { \n      \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", \n      \"Accept-Encoding\": \"gzip, deflate, br\", \n      \"Accept-Language\": \"en-US,en;q=0.9\", \n      \"Host\": \"httpbin.org\", \"Sec-Fetch-Dest\": \"document\", \n      \"Sec-Fetch-Mode\": \"navigate\", \n      \"Sec-Fetch-Site\": \"none\", \n      \"Upgrade-Insecure-Requests\": \"1\", \n      \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36\", \n      \"X-Amzn-Trace-Id\": \"Root=1-5eeef468-015d8f0c228367109234953c\" \n   }, \n   \"origin\": \"ip address\", \n   \"url\": \"https://httpbin.org/delay/1\" \n}\n</pre>\n<p><b>fromEvent</b> &minus; Listen to an HTML element’s event and then emit the event and its property whenever the listened event fires.</p>\n<pre class=\"result notranslate\">\nconst clickEvent$ = fromEvent(document.getElementById('counter'), 'click');\n</pre>\n<p>Angular internally uses the concept extensively to provide data transfer between components and for reactive forms.</p>\n<h2>Subscribing process</h2>\n<p>Subscribing to an Observable is quite easy. Every Observable object will have a method, subscribe for the subscription process. Observer need to implement three callback function to subscribe to the Observable object. They are as follows &minus;</p>\n<ul class=\"list\">\n<li><p><b>next</b> &minus; Receive and process the value emitted from the Observable</p></li>\n<li><p><b>error</b> &minus; Error handling callback</p></li>\n<li><p><b>complete</b> &minus; Callback function called when all data from Observable are emitted.</p></li>\n</ul>\n<p>Once the three callback functions are defined, Observable’s subscribe method has to be called as specified below &minus;</p>\n<pre class=\"result notranslate\">\nconst numbers$ = from([1,2,3,4,5,6,7,8,9,10]); \n// observer \nconst observer = { \n   next: (num: number) =&gt; {      this.numbers.push(num); this.val1 += num }, \n      error: (err: any) =&gt; console.log(err), \n      complete: () =&gt; console.log(\"Observation completed\") \n}; \nnumbers$.subscribe(observer);\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li><p><b>next</b> &minus; method get the emitted number and then push it into the local variable, <b>this.numbers</b>.</p></li>\n<li><p><b>next</b> &minus; method also adding the number to local variable, <b>this.val1</b>.</p></li>\n<li><p><b>error</b> &minus; method just writes the error message to console.</p></li>\n<li><p><b>complete</b> &minus; method also writes the completion message to console.</p></li>\n</ul>\n<p>We can skip <b>error</b> and <b>complete</b> method and write only the <b>next</b> method as shown below &minus;</p>\n<pre class=\"result notranslate\">\nnumber$.subscribe((num: number) =&gt; { this.numbers.push(num); this.val1 += num; });\n</pre>\n<h2>Operations</h2>\n<p><b>Rxjs</b> library provides some of the operators to process the data stream. Some of the important <b>operators</b> are as follows &minus;</p>\n<p><b>filter</b> &minus; Enable to filter the data stream using callback function.</p>\n<pre class=\"result notranslate\">\nconst filterFn = filter( (num : number) =&gt; num &gt; 5 ); \nconst filteredNumbers$ = filterFn(numbers$); \nfilteredNumbers$.subscribe( (num : number) =&gt; { \nthis.filteredNumbers.push(num); this.val2 += num } );\n</pre>\n<p><b>map</b> &minus; Enables to map the data stream using callback function and to change the data stream itself.</p>\n<pre class=\"result notranslate\">\nconst mapFn = map( (num : number) =&gt; num + num ); const mappedNumbers$ = mappedFn(numbers$);\n</pre>\n<p><b>pipe</b> &minus; Enable two or more operators to be combined.</p>\n<pre class=\"result notranslate\">\nconst filterFn = filter( (num : number) =&gt; num &gt; 5 ); \nconst mapFn = map( (num : number) =&gt; num + num ); const processedNumbers$ = numbers$.pipe(filterFn, mapFn); \nprocessedNumbers$.subscribe( (num : number) =&gt; { this.processedNumbers.push(num); this.val3 += num } );\n</pre>\n<p>Let us create a sample application to try out the reaction programming concept learned in this chapter.</p>\n<p>Create a new application, reactive using below command &minus;</p>\n<pre class=\"result notranslate\">\nng new reactive\n</pre>\n<p>Change the directory to our newly created application.</p>\n<pre class=\"result notranslate\">\ncd reactive\n</pre>\n<p>Run the application.</p>\n<pre class=\"result notranslate\">\nng serve\n</pre>\n<p>Change the AppComponent component code (src/app/app.component.ts) as specified below &minus;</p>\n<pre class=\"prettyprint notranslate\">\nimport { Component, OnInit } from '@angular/core'; import { Observable, of, range, from, fromEvent } from 'rxjs'; \nimport { ajax } from 'rxjs/ajax'; \nimport { filter, map, catchError } from 'rxjs/operators'; \n@Component({ \n   selector: 'app-root', \n   templateUrl: './app.component.html', \n   styleUrls: ['./app.component.css'] \n}) \nexport class AppComponent implements OnInit { \n   title = 'Reactive programming concept'; \n   numbers : number[] = []; \n   val1 : number = 0; \n   filteredNumbers : number[] = []; \n   val2 : number = 0; \n   processedNumbers : number[] = []; \n   val3 : number = 0; \n   apiMessage : string; \n   counter : number = 0; \n   ngOnInit() { \n      // Observable stream of data Observable&lt;number&gt;\n      // const numbers$ = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); \n      // const numbers$ = range(1,10); \n      const numbers$ = from([1,2,3,4,5,6,7,8,9,10]); \n      // observer \n      const observer = { \n         next: (num: number) =&gt; {this.numbers.push(num); this.val1 += num }, \n         error: (err: any) =&gt; console.log(err), \n         complete: () =&gt; console.log(\"Observation completed\") \n      }; \n      numbers$.subscribe(observer); \n      const filterFn = filter( (num : number) =&gt; num &gt; 5 ); \n      const filteredNumbers = filterFn(numbers$); \n      filteredNumbers.subscribe( (num : number) =&gt; {this.filteredNumbers.push(num); this.val2 += num } ); \n      const mapFn = map( (num : number) =&gt; num + num ); \n      const processedNumbers$ = numbers$.pipe(filterFn, mapFn); \n      processedNumbers$.subscribe( (num : number) =&gt; {this.processedNumbers.push(num); this.val3 += num } ); \n      const api$ = ajax({ \n         url: 'https://httpbin.org/delay/1', \n         method: 'POST', \n         headers: {'Content-Type': 'application/text' }, \n         body: \"Hello\" \n      }); \n      api$.subscribe(res =&gt; this.apiMessage = res.response.data ); \n      const clickEvent$ = fromEvent(document.getElementById('counter'), 'click'); \n      clickEvent$.subscribe( () =&gt; this.counter++ ); \n   } \n}\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li>Used of, range, from, ajax and fromEvent methods to created Observable.</li>\n<li>Used filter, map and pipe operator methods to process the data stream.</li>\n<li>Callback functions catch the emitted data, process it and then store it in component’s local variables.</li>\n</ul>\n<p>Change the <b>AppComponent</b> template <b>(src/app/app.component.html)</b> as specified below &minus;</p>\n<pre class=\"prettyprint notranslate\">\n&lt;h1&gt;{{ title }}&lt;/h1&gt; \n&lt;div&gt; \n   The summation of numbers ( &lt;span *ngFor=\"let num of numbers\"&gt; {{ num }} &lt;/span&gt; ) is {{ val1 }} \n&lt;/div&gt; \n&lt;div&gt; \n   The summation of filtered numbers ( &lt;span *ngFor=\"let num of filteredNumbers\"&gt; {{ num }} &lt;/span&gt; ) is {{ val2 }} \n&lt;/div&gt; \n&lt;div&gt; \n   The summation of processed numbers ( &lt;span *ngFor=\"let num of processedNumbers\"&gt; {{ num }} &lt;/span&gt; ) is {{ val3 }} \n&lt;/div&gt; \n&lt;div&gt; \n   The response from the API is &lt;em&gt;{{ apiMessage }}&lt;/em&gt; &lt;/div&gt; \n&lt;div&gt; \n   &lt;a id=\"counter\" href=\"#\"&gt;Click here&lt;/a&gt; to increment the counter value. The current counter value is {{ counter }} \n&lt;div&gt;\n</pre>\n<p>Here,</p>\n<p>Shown all the local variable processed by <b>Observer</b> callback functions.</p>\n<p>Open the browser, http://localhost:4200.</p>\n<p>Click the <b>Click here</b> link for five times. For each event, the event will be emitted and forward to the <b>Observer</b>. Observer callback function will be called. The callback function increment the counter for every click and the final result will be as shown below &minus;</p>\n</div>\n\t","routing_and_navigation":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Routing and Navigation</h1>\r\n<hr/>\r\n<p>Navigation is one of the important aspect in a web application. Even though a single page application (SPA) does not have multiple page concept, it does moves from one view (list of expenses) to another view (expense details). Providing clear and understandable navigation elements decides the success of an application.</p>\r\n<p>Angular provides extensive set of navigation feature to accommodate simple scenario to complex scenario. The process of defining navigation element and the corresponding view is called <b>Routing</b>. Angular provides a separate module, <b>RouterModule</b> to set up the navigation in the Angular application. Let us learn the how to do the routing in Angular application in this chapter.</p>\r\n<h2>Configure Routing</h2>\r\n<p>Angular CLI provides complete support to setup routing during the application creation process as well as during working an application. Let us create a new application with router enabled using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng new routing-app --routing\r\n</pre>\r\n<p>Angular CLI generate a new module, AppRoutingModuele for routing purpose. The generated code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>Imports RouterModule</b> and Routes from @angular/router package.</p></li>\r\n<li><p>RouterMoudle provides functionality to configure and execute routing in the application.</p></li>\r\n<li><p>Routes is the type used to setup the navigation rules.</p></li>\r\n<li><p>Routes is the local variable (of type Routes) used to configure the actual navigation rules of the application.</p></li>\r\n<li><p>RouterMoudle.forRoot() method will setup the navigation rules configured in the routes variable.</p></li>\r\n</ul>\r\n<p>Angular CLI include the generated AppRoutingModule in AppComponent as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>AppComponent</b> imports the <b>AppRoutingModule</b> module using imports meta data.</p>\r\n<p>Angular CLI provides option to set routing in the existing application as well. The general command to include routing in an existing application is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate module my-module --routing\r\n</pre>\r\n<p>This will generate new module with routing features enabled. To enable routing feature in the existing module (AppModule), we need to include extra option as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate module app-routing --module app --flat\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>–module app</b> configures the newly created routing module, <b>AppRoutingModule</b> in the AppModule module.</p>\r\n<p>Let us configure the routing module in <b>ExpenseManager</b> application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Generate routing module using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate module app-routing --module app --flat\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/app-routing.module.ts (196 bytes) \r\nUPDATE src/app/app.module.ts (785 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<p>CLI generate <b>AppRoutingModule</b> and then, configures it in <b>AppModule</b></p>\r\n<h2>Creating routes</h2>\r\n<p>Creating a route is simple and easy. The basic information to create a route is given below &minus;</p>\r\n<ul class=\"list\">\r\n<li>Target component to be called.</li>\r\n<li>The path to access the target component.</li>\r\n</ul>\r\n<p>The code to create a simple route is mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nconst routes: Routes = [\r\n  { path: 'about', component: AboutComponent },\r\n];\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>Routes</b> is the variable in the AppRoutingModule.</p></li>\r\n<li><p><b>about</b> is the path and AboutComponent is the target / destination component. When user requests http://localhost:4200/about url, the path matches with about rule and then AboutComponent will be called.</p></li>\r\n</ul>\r\n<h2>Accessing routes</h2>\r\n<p>Let us learn how to use the configured routes in the application.</p>\r\n<p>Accessing the route is a two step process.</p>\r\n<p>Include <b>router-outlet</b> tag in the root component template.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>Use <b>routerLink</b> and <b>routerLinkActive</b> property in the required place.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;a routerLink=\"/about\" routerLinkActive=\"active\"&gt;First Component&lt;/a&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>routerLink</b> set the route to be called using the path.</p></li>\r\n<li><p><b>routerLinkActive</b> set the CSS class to be used when the route is activated.</p></li>\r\n</ul>\r\n<p>Sometime, we need to access routing inside the component instead of template. Then, we need to follow below steps &minus;</p>\r\n<p>Inject instance of <b>Router</b> and <b>ActivatedRoute</b> in the corresponding component.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Router, ActivatedRoute } from '@angular/router'; \r\nconstructor(private router: Router, private route: ActivatedRoute)\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>Router</b> provides the function to do <b>routing operations</b>.</p></li>\r\n<li><p><b>Route</b> refers the current <b>activate route.</b></p></li>\r\n</ul>\r\n<p>Use router’s navigate function.</p>\r\n<pre class=\"result notranslate\">\r\nthis.router.navigate(['about']);\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>navigate</b> function expects an array with necessary path information.</p>\r\n<h3>Using relative path</h3>\r\n<p>Route path is similar to web page URL and it supports relative path as well. To access <b>AboutComponent</b> from another component, say <b>HomePageComponent</b>, simple use .. notation as in web url or folder path.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;a routerLink=\"../about\"&gt;Relative Route to about component&lt;/a&gt;\r\n</pre>\r\n<p>To access relative path in the component &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { NavigationExtras } from '@angular/router'; \r\nthis.router.navigate(['about'], { relativeTo: this.route });\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>relativeTo</b> is available under <b>NavigationExtras</b> class.</p>\r\n<h3>Route ordering</h3>\r\n<p><b>Route ordering</b> is very important in a route configuration. If same path is configured multiple times, then the first matched path will get called. If the first match fails due to some reason, then the second match will get called.</p>\r\n<h3>Redirect routes</h3>\r\n<p>Angular route allows a path to get redirected to another path. <b>redirectTo</b> is the option to set redirection path. The sample route is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nconst routes: Routes = [ \r\n   { path: '', redirectTo: '/about' }, \r\n];\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><b>redirectTo</b> sets about as the redirection path if the actual path matches empty string.</li>\r\n</ul>\r\n<h3>Wildcard routes</h3>\r\n<p>Wildcard route will match any path. It is created using ** and will be used to handle non existing path in the application. Placing the wildcard route at the end of the configuration make it called when other path is not matched.</p>\r\n<p>The sample code is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nconst routes: Routes = [\r\n  { path: 'about', component: AboutComponent },\r\n  { path: '',   redirectTo: '/about', pathMatch: 'full' },\r\n  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page\r\n];\r\n</pre>\r\n<p>Here,</p>\r\n<p>If a non existent page is called, then the first two route gets failed. But, the final wildcard route will succeed and the <b>PageNotFoundComponent</b> gets called.</p>\r\n<h2>Access Route parameters</h2>\r\n<p>In Angular, we can attach extra information in the path using parameter. The parameter can be accessed in the component by using paramMap interface. The syntax to create a new parameter in the route is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nconst routes: Routes = [\r\n  { path: 'about', component: AboutComponent },\r\n  { path: 'item/:id', component: ItemComponent },\r\n  { path: '',   redirectTo: '/about', pathMatch: 'full' },\r\n  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page\r\n];\r\n</pre>\r\n<p>Here, we have attached <b>id</b> in the path. <b>id</b> can be accessed in the <b>ItemComponent</b> using two techniques.</p>\r\n<ul class=\"list\">\r\n<li>Using Observable.</li>\r\n<li>Using snapshot (non-observable option).</li>\r\n</ul>\r\n<h3>Using Observable</h3>\r\n<p>Angular provides a special interface, paramMap to access the parameter of the path. parmaMap has following methods &minus;</p>\r\n<ul class=\"list\">\r\n<li><p><b>has(name)</b> &minus; Returns true if the specified name is available in the path (parameter list).</p></li>\r\n<li><p><b>get(name)</b> &minus; Returns the value of the specified name in the path (parameter list).</p></li>\r\n<li><p><b>getAll(name)</b> &minus; Returns the multiple value of the specified name in the path. get() method returns only the first value when multiple values are available.</p></li>\r\n<li><p><b>keys</b> &minus; Returns all parameter available in the path.</p></li>\r\n</ul>\r\n<p>Steps to access the parameter using <b>paramMap</b> are as follows &minus;</p>\r\n<ul class=\"list\">\r\n<li><p>Import <b>paramMap</b> available in <b>@angular/router</b> package.</p></li>\r\n<li><p>Use <b>paramMap</b> in the <b>ngOnInit()</b> to access the parameter and set it to a local variable.</p></li>\r\n</ul>\r\n<pre class=\"prettyprint notranslate\">\r\nngOnInit() {\r\n    this.route.paramMap.subscribe(params => {\r\n        this.id = params.get('id);\r\n    });\r\n}\r\n</pre>\r\n<p>We can use it directly in the rest service using <b>pipe</b> method.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nthis.item$ = this.route.paramMap.pipe(\r\n    switchMap(params =&gt; {\r\n      this.selectedId = Number(params.get('id'));\r\n      return this.service.getItem(this.selectedId);\r\n    })\r\n);\r\n</pre>\r\n<h3>Using snapshot</h3>\r\n<p><b>snapshot</b> is similar to <b>Observable</b> except, it does not support observable and get the parameter value immediately.</p>\r\n<pre class=\"result notranslate\">\r\nlet id = this.route.snapshot.paramMap.get('id');\r\n</pre>\r\n<h2>Nested routing</h2>\r\n<p>In general, <b>router-outlet</b> will be placed in root component <b>(AppComponent)</b> of the application. But, router-outlet can be used in any component. When router-outlet is used in a component other then root component, the routes for the particular component has to be configured as the children of the parent component. This is called <b>Nested routing</b>.</p>\r\n<p>Let us consider a component, say <b>ItemComponent</b> is configured with <b>router-outlet</b> and has two <b>routerLink</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h2&gt;Item Component&lt;/h2&gt; \r\n&lt;nav&gt; \r\n   &lt;ul&gt; \r\n      &lt;li&gt;&lt;a routerLink=\"view\"&gt;View&lt;/a&gt;&lt;/li&gt; \r\n      &lt;li&gt;&lt;a routerLink=\"edit\"&gt;Edit&lt;/a&gt;&lt;/li&gt; \r\n   &lt;/ul&gt;\r\n&lt;/nav&gt; \r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>The route for the ItemComponent has to be configured as <b>Nested routing</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nconst routes: Routes = [\r\n{ \r\n   path: 'item',\r\n\r\n   component: ItemComponent,\r\n   children: [\r\n   {\r\n      path: 'view',\r\n      component: ItemViewComponent\r\n   },\r\n   {\r\n   path: 'edit',\r\n   component: ItemEditComponent\r\n   }\r\n   ]\r\n}]\r\n</pre>\r\n<h3>Working example</h3>\r\n<p>Let us apply the routing concept learned in this chapter in our <b>ExpenseManager</b> application.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Generate routing module using below command, if not done before.</p>\r\n<pre class=\"result notranslate\">\r\nng generate module app-routing --module app --flat\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/app-routing.module.ts (196 bytes) UPDATE src/app/app.module.ts (785 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<p>CLI generate <b>AppRoutingModule</b> and then configures it in <b>AppModule</b>.</p>\r\n<p>Update <b>AppRoutingModule (src/app/app.module.ts)</b> as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core'; \r\nimport { Routes, RouterModule } from '@angular/router'; import { ExpenseEntryComponent } from './expense-entry/expense-entry.component'; \r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component'; \r\nconst routes: Routes = [ \r\n   { path: 'expenses', component: ExpenseEntryListComponent }, \r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent }, \r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }]; \r\n@NgModule({ \r\n   imports: [RouterModule.forRoot(routes)], \r\n   exports: [RouterModule] }) \r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here, we have added route for our expense list and expense details component.</p>\r\n<p>Update <b>AppComponent</b> template <b>(src/app/app.component.html)</b> to include <b>router-outlet</b> and <b>routerLink.</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt; \r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt; \r\n&lt;div class=\"container\"&gt; \r\n   &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; \r\n      &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; \r\n   &lt;/button&gt; \r\n   &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt; \r\n      &lt;ul class=\"navbar-nav ml-auto\"&gt; \r\n         &lt;li class=\"nav-item active\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Home \r\n               &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt; \r\n            &lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" routerLink=\"/expenses\"&gt;Report&lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt; \r\n         &lt;/li&gt; \r\n      &lt;/ul&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt; \r\n&lt;/nav&gt; \r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and include view option for every expense entries.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;table class=\"table table-striped\"&gt; \r\n   &lt;thead&gt; \r\n      &lt;tr&gt; \r\n         &lt;th&gt;Item&lt;/th&gt;\r\n         &lt;th&gt;Amount&lt;/th&gt; \r\n         &lt;th&gt;Category&lt;/th&gt; \r\n         &lt;th&gt;Location&lt;/th&gt; \r\n         &lt;th&gt;Spent On&lt;/th&gt; \r\n         &lt;th&gt;View&lt;/th&gt; \r\n      &lt;/tr&gt; \r\n   &lt;/thead&gt; \r\n   &lt;tbody&gt; \r\n      &lt;tr *ngFor=\"let entry of expenseEntries\"&gt; \r\n         &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt; \r\n         &lt;th&gt;{{ entry.amount }}&lt;/th&gt; \r\n         &lt;td&gt;{{ entry.category }}&lt;/td&gt; \r\n         &lt;td&gt;{{ entry.location }}&lt;/td&gt; \r\n         &lt;td&gt;{{ entry.spendOn | date: 'medium' }}&lt;/td&gt; \r\n         &lt;td&gt;&lt;a routerLink=\"../expenses/detail/{{ entry.id }}\"&gt;View&lt;/a&gt;&lt;/td&gt; \r\n      &lt;/tr&gt; \r\n   &lt;/tbody&gt; \r\n&lt;/table&gt;\r\n</pre>\r\n<p>Here, we have updated the expense list table and added a new column to show the view option.</p>\r\n<p>Open <b>ExpenseEntryComponent (src/app/expense-entry/expense-entry.component.ts)</b> and add functionality to fetch the current selected expense entry. It can be done by first getting the id through the <b>paramMap</b> and then, using the <b>getExpenseEntry()</b> method from <b>ExpenseEntryService</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nthis.expenseEntry$ = this.route.paramMap.pipe(  \r\n   switchMap(params =&gt; { \r\n      this.selectedId = Number(params.get('id')); \r\n      return \r\nthis.restService.getExpenseEntry(this.selectedId); })); \r\n   this.expenseEntry$.subscribe( (data) =&gt; this.expenseEntry = data );\r\n</pre>\r\n<p>Update ExpenseEntryComponent and add option to go to expense list.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngoToList() { \r\n   this.router.navigate(['/expenses']); \r\n}\r\n</pre>\r\n<p>The complete code of ExpenseEntryComponent is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { ExpenseEntry } from '../expense-entry'; import { ExpenseEntryService } from '../expense-entry.service'; \r\nimport { Router, ActivatedRoute } from '@angular/router'; \r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators'; \r\n@Component({ \r\n   selector: 'app-expense-entry', \r\n   templateUrl: './expense-entry.component.html', \r\n   styleUrls: ['./expense-entry.component.css'] \r\n}) \r\nexport class ExpenseEntryComponent implements OnInit { \r\n   title: string; \r\n   expenseEntry$ : Observable&lt;ExpenseEntry&gt;; \r\n   expenseEntry: ExpenseEntry = {} as ExpenseEntry; \r\n   selectedId: number; \r\n   constructor(private restService : ExpenseEntryService, private router : Router, private route : \r\nActivatedRoute ) { } \r\n   ngOnInit() { \r\n      this.title = \"Expense Entry\"; \r\n   this.expenseEntry$ = this.route.paramMap.pipe( \r\n      switchMap(params =&gt; { \r\n         this.selectedId = Number(params.get('id')); \r\n         return \r\nthis.restService.getExpenseEntry(this.selectedId); })); \r\n   this.expenseEntry$.subscribe( (data) =&gt; this.expenseEntry = data ); \r\n   } \r\n   goToList() { \r\n      this.router.navigate(['/expenses']); \r\n   } \r\n}\r\n</pre>\r\n<p>Open <b>ExpenseEntryComponent (src/app/expense-entry/expense-entry.component.html)</b> template and add a new button to navigate back to expense list page.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n   &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"goToList()\"&gt;Go to List&lt;/button&gt; &nbsp;\r\n   &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here, we have added <b>Go to List</b> button before <b>Edit</b> button.</p>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>The final output of the application is as follows &minus;</p>\r\n<p>Clicking the view option of the first entry will navigate to details page and show the selected expense entry as shown below &minus;</p>\r\n\t\t</div>\r\n\t\r\n","server_side_rendering":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Server Side Rendering</h1>\n<hr/>\n<p>Server side Rendering (SSR) is a modern technique to convert a Single Page Application (SPA) running in the browser into a server based application. Usually, in SPA, the server returns a simple index.html file with the reference to the JavaScript based SPA app. The SPA app take over from there, configure the entire application, process the request and then send the final response.</p>\n<p>But in SSR supported application, the server as well do all the necessary configuration and then send the final response to the browser. The browser renders the response and start the SPA app. SPA app takeover from there and further request are diverted to SPA app. The flow of SPA and SSR is as shown in below diagram.</p>\n<p>Converting a SPA application to SSR provides certain advantages and they are as follows &minus;</p>\n<ul class=\"list\">\n<li><p><b>Speed</b> &minus; First request is relatively fast. One of the main drawback of SPA is slow initial rendering. Once the application is rendered, SPA app is quite fast. SSR fixes the initial rendering issue.</p></li>\n<li><p><b>SEO Friendly</b> &minus; Enables the site to be SEO friendly. Another main disadvantage of SPA is not able to crawled by web crawler for the purpose of SEO. SSR fixes the issue.</p></li>\n</ul>\n<h2>Angular Universal</h2>\n<p>To enable SSR in Angular, Angular should be able to rendered in the server. To make it happen, Angular provides a special technology called Angular Universal. It is quite new technology and it is continuously evolving. Angular Universal knows how to render Angular application in the server. We can upgrade our application to Angular Universal to support SSR.</p>\n\t\t</div>\n\t","service_workers_and_pwa":"<!-- Tutorial Content Starts Here -->\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n\t<h1>Angular 8 - Service Workers and PWA</h1>\n\t<hr />\n\t<p>Progressive web apps (PWA) are normal web application with few enhancements and behaves like a native\n\t\tapplication. PWA apps does not depends on network to work. PWA caches the application and renders it from local\n\t\tcache. It regularly checks the live version of the application and then caches the latest version in the\n\t\tbackground.</p>\n\t<p>PWA can be installed in the system like native application and shortcut can be shown in the desktop. Clicking the\n\t\tshortcut will open the application in browser with local cache even without any network available in the system.\n\t</p>\n\t<p>Angular application can be converted into PWA application. To convert an Angular application, we need to use\n\t\tservice worker API. Service worker is actually a proxy server, which sits in between the browser, application\n\t\tand the network.</p>\n\t<p>Service workers is separate from web pages. It does not able to access DOM objects. Instead, Service Workers\n\t\tinteract with web pages through <b>PostMessage</b> interface.</p>\n\t<p>PWA application has two prerequisites. They are as follows,</p>\n\t<ul class=\"list\">\n\t\t<li>\n\t\t\t<p><b>Browser support</b> &minus; Even though lot of browser supports the PWA app, IE, Opera mini and few\n\t\t\t\tother does not provides the PWA support.</p>\n\t\t</li>\n\t\t<li>\n\t\t\t<p><b>HTTPS delivery</b> &minus; The application needs to be delivered through HTTPS protocol. One exception\n\t\t\t\tof the https support is <b>localhost</b> for development purpose.</p>\n\t\t</li>\n\t</ul>\n\t<p>Let us create a new application and convert it into PWA application.</p>\n\t<p>Create a new Angular application using below command &minus;</p>\n\t<pre class=\"prettyprint notranslate\">\ncd /go/to/workspace \nng new pwa-sample\n</pre>\n\t<p>Add PWA support using below command &minus;</p>\n\t<pre class=\"prettyprint notranslate\">\ncd pwa-sample\nng add @angular/pwa --project pwa-sample\n</pre>\n\t<p>Build the production version of the application,</p>\n\t<pre class=\"prettyprint notranslate\">\nng build --prod\n</pre>\n\t<p>PWA application does not run under Angular development server. Install, a simple web server using below command\n\t\t&minus;</p>\n\t<pre class=\"prettyprint notranslate\">\nnpm install -g http-server\n</pre>\n\t<p>Run the web server and set our production build of the application as root folder.</p>\n\t<pre class=\"prettyprint notranslate\">\nf the application as root folder.\nhttp-server -p 8080 -c-1 dist/pwa-sample\n</pre>\n\t<p>Open browser and enter <b>http://localhost:8080.</b></p>\n\t<p>Now, go to <b>Developer tools -&gt; Network</b> and select <b>Offline</b> option.</p>\n\t<b>Normal application stops working if network is set to Offline but, PWA application works fine as shown below\n\t\t&minus;</b>\n</div>\n<!-- Tutorial Content Ends Here -->","testing":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n\t<h1>Angular 8 - Testing</h1>\n\t<hr />\n\t<p>Testing is a very important phase in the development life cycle of an application. It ensures an application\n\t\tquality. It needs careful planning and execution.</p>\n\t<h2>Unit Test</h2>\n\t<p>Unit testing is the easiest method to test an application. It is based on ensuring the correctness of a piece of\n\t\tcode or a method of a class. But, it does not reflect the real environment and subsequently. It is the least\n\t\toption to find the bugs.</p>\n\t<p>Generally, Angular 8 uses Jasmine and Karma configurations. To perform this, first you need to configure in your\n\t\tproject, using the below command &minus;</p>\n\t<pre class=\"prettyprint notranslate\">\nng test\n</pre>\n\t<p>Now, you could see the following response &minus;</p>\n\t<!-- <img src=\"images/unit_test.jpg\" alt=\"Unit Test\" /> -->\n\t<p>Now, Chrome browser also opens and shows the test output in the “Jasmine HTML Reporter”. It looks similar to\n\t\tthis,</p>\n\t<!-- <img src=\"images/html_reporter.jpg\" alt=\"HTML Reporter\" /> -->\n\t<h2>End to End (E2E) Testing</h2>\n\t<p>Unit tests are small, simple and fast process whereas, E2E testing phase multiple components are involved and\n\t\tworks together which cover flows in the application. To perform e2e test, type the below command &minus;</p>\n\t<pre class=\"prettyprint notranslate\">\nng e2e\n</pre>\n\t<p>You could see the below response &minus;</p>\n</div>","services_and_dependency_injection":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Services and Dependency Injection</h1>\r\n<hr/>-->\r\n<p>As learned earlier, <b>Services</b> provides specific functionality in an Angular application. In a given Angular application, there may be one or more services can be used. Similarly, an Angular component may depend on one or more services.</p>\r\n<p>Also, Angular services may depend on another services to work properly. Dependency resolution is one of the complex and time consuming activity in developing any application. To reduce the complexity, Angular provides <b>Dependency Injection</b> pattern as one of the core concept.</p>\r\n<p>Let us learn, how to use Dependency Injection in Angular application in this chapter.</p>\r\n<h2>Create Angular service</h2>\r\n<p>An Angular service is plain Typescript class having one or more methods (functionality) along with <b>@Injectable</b> decorator. It enables the normal Typescript class to be used as service in Angular application.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; @Injectable() \r\nexport class DebugService { \r\n   constructor() { } \r\n}\r\n</pre>\r\n<p>Here, <b>@Injectable</b> decorator converts a plain Typescript class into Angular service.</p>\r\n<h2>Register Angular service</h2>\r\n<p>To use <b>Dependency Injection</b>, every service needs to be registered into the system. Angular provides multiple option to register a service. They are as follows &minus;</p>\r\n<ul class=\"list\">\r\n<li>ModuleInjector @ root level</li>\r\n<li>ModuleInjector @ platform level</li>\r\n<li>ElementInjector using providers meta data</li>\r\n<li>ElementInjector using viewProviders meta data</li>\r\n<li>NullInjector</li>\r\n</ul>\r\n<h3>ModuleInjector @ root</h3>\r\n<p><b>ModuleInjector</b> enforces the service to used only inside a specific module. <b>ProvidedIn</b>meta data available in <b>@Injectable</b> has to be used to specify the module in which the service can be used.</p>\r\n<p>The value should refer to the one of the registered Angular Module (decorated with <b>@NgModule). root</b> is a special option which refers the root module of the application. The sample code is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; @Injectable({ \r\n   providedIn: 'root', \r\n})\r\nexport class DebugService { \r\n   constructor() { } \r\n}\r\n</pre>\r\n<h3>ModuleInjector @ platform</h3>\r\n<p><b>Platform Injector</b> is one level higher than <b>ModuleInject</b> and it is only in advanced and rare situation. Every Angular application starts by executing <b>PreformBrowserDynamic().bootstrap</b> method (see <b>main.js</b>), which is responsible for bootstrapping root module of Angular application.</p>\r\n<p><b>PreformBrowserDynamic()</b> method creates an injector configured by <b>PlatformModule</b>. We can configure platform level services using <b>platformBrowser()</b> method provided by <b>PlatformModule</b>.</p>\r\n<h3>NullInjector</h3>\r\n<p><b>NullInjector</b> is one level higher than platform level <b>ModuleInjector</b> and is in the top level of the hierarchy. We could not able to register any service in the <b>NullInjector</b>. It resolves when the required service is not found anywhere in the hierarchy and simply throws an error.</p>\r\n<h3>ElementInjector using providers</h3>\r\n<p><b>ElementInjector</b> enforces the service to be used only inside some particular components. providers and <b>ViewProviders</b> meta data available in <b>@Component</b> decorator is used to specify the list of services to be visible for the particular component. The sample code to use providers is as follows &minus;</p>\r\n<p><b>ExpenseEntryListComponent</b></p>\r\n<pre class=\"result notranslate\">\r\n// import statement \r\nimport { DebugService } from '../debug.service'; \r\n// component decorator \r\n@Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', \r\n   styleUrls: ['./expense-entry-list.component.css'], \r\n   providers: [DebugService] })\r\n</pre>\r\n<p>Here, <b>DebugService</b> will be available only inside the <b>ExpenseEntryListComponent</b> and its view. To make DebugService in other component, simply use <b>providers</b> decorator in necessary component.</p>\r\n<h3>ElementInjector using viewProviders</h3>\r\n<p><b>viewProviders</b> is similar to <b>provider</b> except it does not allow the service to be used inside the componentâ€™s content created using <b>ng-content</b> directive.</p>\r\n<p><b>ExpenseEntryListComponent</b></p>\r\n<pre class=\"result notranslate\">\r\n// import statement \r\nimport { DebugService } from '../debug.service'; \r\n// component decorator \r\n@Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', \r\n   styleUrls: ['./expense-entry-list.component.css'], viewProviders: [DebugService] \r\n})\r\n</pre>\r\n<p>Parent component can use a child component either through its view or content. Example of a parent component with child and content view is mentioned below &minus;</p>\r\n<p><b>Parent component view / template</b></p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   child template in view \r\n   &lt;child&gt;&lt;/child&gt; \r\n&lt;/div&gt; \r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p><b>child component view / template</b></p>\r\n<pre class=\"result notranslate\">\r\n&lt;div&gt; \r\n   child template in view \r\n&lt;/div&gt; \r\n</pre>\r\n<p>Parent component usage in a template (another component)</p>\r\n<pre class=\"result notranslate\">\r\n&lt;parent&gt; \r\n   &lt;!-- child template in content --&gt;\r\n   &lt;child&gt;&lt;/child&gt;\r\n&lt;/parent&gt; \r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><b>child</b> component is used in two place. One inside the parent’s view. Another inside parent content.</li>\r\n<li>Services will be available in child component, which is placed inside parent’s view.</li>\r\n<li>Services will not be available in child component, which is placed inside parent’s content.</li>\r\n</ul>\r\n<h2>Resolve Angular service</h2>\r\n<p>Let us see how a component can resolve a service using the below flow diagram.</p>\r\n<!-- src=\"images/resolve_angular.jpg\" alt=\"Resolve Angular\" />-->\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>First, component tries to find the service registered using <b>viewProviders</b> meta data.</li>\r\n<li>If not found, component tries to find the service registered using <b>providers</b> meta data.</li>\r\n<li>If not found, Component tries to find the service registered using <b>ModuleInjector</b></li>\r\n<li>If not found, component tries to find the service registered using <b>PlatformInjector</b></li>\r\n<li>If not found, component tries to find the service registered using <b>NullInjector</b>, which always throws error.</li>\r\n</ul>\r\n<p>The hierarchy of the Injector along with work flow of the resolving the service is as follows &minus;</p>\r\n<!-- src=\"images/angular_service.jpg\" alt=\"Angular service\" />-->\r\n<h3>Resolution Modifier</h3>\r\n<p>As we learn in the previous chapter, the resolution of the service starts from component and stops either when a service is found or <b>NUllInjector</b> is reached. This is the default resolution and it can be changed using <b>Resolution Modifier</b>. They are as follows &minus;</p>\r\n<p><b>Self()</b></p>\r\n<p><b>Self()</b> start and stops the search for the service in its current <b>ElementInjector</b> itself.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Self } from '@angular/core'; \r\nconstructor(@Self() public debugService: DebugService) {}\r\n</pre>\r\n<p><b>SkipSelf()</b></p>\r\n<p><b>SkipSelf()</b> is just opposite to Self(). It skips the current ElementInjector and starts the search for service from its parent <b>ElementInjector</b>.</p>\r\n<pre class=\"result notranslate\">\r\nimport { SkipSelf } from '@angular/core'; \r\nconstructor(@SkipSelf() public debugService: DebugService) {}\r\n</pre>\r\n<p><b>Host()</b></p>\r\n<p><b>Host()</b> stop the search for the service in its host <b>ElementInjector</b>. Even if service available up in the higher level, it stops at host.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Host } from '@angular/core'; \r\nconstructor(@Host() public debugService: DebugService) {}\r\n</pre>\r\n<p><b>Optional()</b></p>\r\n<p><b>Optional()</b> does not throws the error when the search for the service fails.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Optional } from '@angular/core'; \r\nconstructor(@Optional() private debugService?: DebugService) { \r\n   if (this.debugService) { \r\n      this.debugService.info(\"Debugger initialized\"); \r\n   } \r\n}\r\n</pre>\r\n<h2>Dependency Injector Providers</h2>\r\n<p>Dependency Injector providers serves two purpose. First, it helps in setting a token for the service to be registered. The token will be used to refer and call the service. Second, it helps in creating the service from the given configuration.</p>\r\n<p>As learned earlier, the simplest provider is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [ DebugService ]\r\n</pre>\r\n<p>Here, <b>DebugService</b> is both token as well as the class, with which the service object has to be created. The actual form of the provider is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [ { provides: DebugService, useClass: DebugService }]\r\n</pre>\r\n<p>Here, <b>provides</b> is the token and <b>useClass</b> is the class reference to create the service object.</p>\r\n<p>Angular provides some more providers and they are as follows &minus;</p>\r\n<p>Aliased class providers</p>\r\n<p>The purpose of the providers is to reuse the existing service.</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [ DebugService, \r\n   { provides: AnotherDebugService, userClass: DebugService }]\r\n</pre>\r\n<p>Here, only one instance of <b>DebugService</b> service will be created.</p>\r\n<p>Value providers</p>\r\n<p>The purpose of the Value providers is to supply the value itself instead of asking the DI to create an instance of the service object. It may use existing object as well. The only restriction is that the object should be in the shape of referenced service.</p>\r\n<pre class=\"result notranslate\">\r\nexport class MyCustomService { \r\n   name = \"My Custom Service\" \r\n} \r\n[{ provide: MyService, useValue: { name: 'instance of MyCustomService' }]\r\n</pre>\r\n<p>Here, DI provider just return the instance set in <b>useValue</b> option instead of creating a new service object.</p>\r\n<p>Non-class dependency providers</p>\r\n<p>It enables string, function or object to be used in Angular DI.</p>\r\n<p>Let us see a simple example.</p>\r\n<pre class=\"result notranslate\">\r\n// Create the injectable token \r\nimport { InjectionToken } from '@angular/core'; \r\nexport const APP_CONFIG = new InjectionToken&lt;AppConfig&gt;('app.config'); \r\n// Create value \r\nexport const MY_CONFIG: AppConfig = { \r\n   title: 'Dependency Injection' \r\n}; \r\n// congfigure providers \r\nproviders: [{ provide: APP_CONFIG, useValue: HERO_DI_CONFIG }] \r\n// inject the service \r\nconstructor(@Inject(APP_CONFIG) config: AppConfig) {\r\n</pre>\r\n<p>Factory providers</p>\r\n<p>Factory Providers enables complex service creation. It delegates the creation of the object to an external function. Factory providers has option to set the dependency for factory object as well.</p>\r\n<pre class=\"result notranslate\">\r\n{ provide: MyService, useFactory: myServiceFactory, deps: [DebugService] };\r\n</pre>\r\n<p>Here, <b>myServiceFactory</b> returns the instance of <b>MyService</b>.</p>\r\n<h2>Angular Service usage</h2>\r\n<p>Now, we know how to create and register Angular Service. Let us see how to use the Angular Service inside a component. Using an Angular service is as simple as setting the type of parameters of the constructor as the token of the service providers.</p>\r\n<pre class=\"result notranslate\">\r\nexport class ExpenseEntryListComponent implements OnInit {\r\n   title = 'Expense List'; \r\n   constructor(private debugService : DebugService) {} \r\n   ngOnInit() { \r\n      this.debugService.info(\"Angular Application starts\"); \r\n   } \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>ExpenseEntryListComponent</b> constructor set a parameter of type DebugService.</p></li>\r\n<li><p><b>Angular Dependency Injector</b> (DI) will try to find any service registered in the application with type DebugService. If found, it will set an instance of DebugService to ExpenseEntryListComponent component. If not found, it will throw an error.</p></li>\r\n</ul>\r\n<h2>Add a debug service</h2>\r\n<p>Let us add a simple <b>Debug</b> service, which will help us to print the debugging information during application development.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Run the below command to generate an Angular service, <b>DebugService</b>.</p>\r\n<pre class=\"result notranslate\">\r\nng g service debug\r\n</pre>\r\n<p>This will create two Typescript files (debug service & its test) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/debug.service.spec.ts (328 bytes) \r\nCREATE src/app/debug.service.ts (134 bytes)\r\n</pre>\r\n<p>Let us analyse the content of the <b>DebugService</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; @Injectable({ \r\n   providedIn: 'root' \r\n}) \r\nexport class DebugService { \r\n   constructor() { } \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>@Injectable</b> decorator is attached to DebugService class, which enables the DebugService to be used in Angular component of the application.</p></li>\r\n<li><p><b>providerIn</b> option and its value, root enables the DebugService to be used in all component of the application.</p></li>\r\n</ul>\r\n<p>Let us add a method, Info, which will print the message into the browser console.</p>\r\n<pre class=\"result notranslate\">\r\ninfo(message : String) : void { \r\n   console.log(message); \r\n}\r\n</pre>\r\n<p>Let us initialise the service in the <b>ExpenseEntryListComponent</b> and use it to print message.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { ExpenseEntry } from '../expense-entry'; import { DebugService } from '../debug.service'; @Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', styleUrls: ['./expense-entry-list.component.css'] \r\n}) \r\nexport class ExpenseEntryListComponent implements OnInit { \r\n   title: string; \r\n   expenseEntries: ExpenseEntry[]; \r\n   constructor(private debugService: DebugService) { } \r\n   ngOnInit() { \r\n      this.debugService.info(\"Expense Entry List \r\n      component initialized\"); \r\n      this.title = \"Expense Entry List\"; \r\n      this.expenseEntries = this.getExpenseEntries(); \r\n   } \r\n   // other coding \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>DebugService is initialised using constructor parameters. Setting an argument (debugService) of type DebugService will trigger the dependency injection to create a new DebugService object and set it into the ExpenseEntryListComponent component.</p></li>\r\n<li><p>Calling the info method of DebugService in the ngOnInit method prints the message in the browser console.</p></li>\r\n</ul>\r\n<p>The result can be viewed using developer tools and it looks similar as shown below &minus;</p>\r\n<!-- src=\"images/debug_service.jpg\" alt=\"Debug service\" />-->\r\n<p>Let us extend the application to understand the scope of the service.</p>\r\n<p>Let us a create a <b>DebugComponent</b> by using below mentioned command.</p>\r\n<pre class=\"result notranslate\">\r\nng generate component debug\r\nCREATE src/app/debug/debug.component.html (20 bytes) CREATE src/app/debug/debug.component.spec.ts (621 bytes) \r\nCREATE src/app/debug/debug.component.ts (265 bytes) CREATE src/app/debug/debug.component.css (0 bytes) UPDATE src/app/app.module.ts (392 bytes)\r\n</pre>\r\n<p>Let us remove the DebugService in the root module.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/debug.service.ts\r\nimport { Injectable } from '@angular/core'; @Injectable() \r\nexport class DebugService { \r\n   constructor() { \r\n   }\r\n   info(message : String) : void {     \r\n      console.log(message); \r\n   } \r\n}\r\n</pre>\r\n<p>Register the DebugService under ExpenseEntryListComponent component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/expense-entry-list/expense-entry-list.component.ts @Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', \r\n   styleUrls: ['./expense-entry-list.component.css'] \r\n   providers: [DebugService] \r\n})\r\n</pre>\r\n<p>Here, we have used providers meta data <b>(ElementInjector)</b> to register the service.</p>\r\n<p>Open <b>DebugComponent</b> (src/app/debug/debug.component.ts) and import <b>DebugService</b> and set an instance in the constructor of the component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { DebugService } from '../debug.service'; \r\n@Component({ \r\n   selector: 'app-debug', \r\n   templateUrl: './debug.component.html', \r\n   styleUrls: ['./debug.component.css'] \r\n}) \r\nexport class DebugComponent implements OnInit { \r\n   constructor(private debugService: DebugService) { } \r\n   ngOnInit() { \r\n      this.debugService.info(\"Debug component gets service from Parent\"); \r\n   } \r\n}\r\n</pre>\r\n<p>Here, we have not registered <b>DebugService</b>. So, DebugService will not be available if used as parent component. When used inside a parent component, the service may available from parent, if the parent has access to the service.</p>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and include a content section as shown below:</p>\r\n<pre class=\"result notranslate\">\r\n// existing content \r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p>Here, we have included a content section and DebugComponent section.</p>\r\n<p>Let us include the debug component as a content inside the <b>ExpenseEntryListComponent</b> component in the AppComponent template. Open <b>AppComponent</b> template and change <b>app-expense-entry-list</b> as below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n// navigation code\r\n&lt;app-expense-entry-list&gt;\r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Here, we have included the <b>DebugComponent</b> as content.</p>\r\n<p>Let us check the application and it will show <b>DebugService</b> template at the end of the page as shown below &minus;</p>\r\n<!-- src=\"images/debug.jpg\" alt=\"Debug \" />-->\r\n<p>Also, we could able to see two debug information from debug component in the console. This indicate that the debug component gets the service from its parent component.</p>\r\n<p>Let us change how the service is injected in the <b>ExpenseEntryListComponent</b> and how it affects the scope of the service. Change providers injector to viewProviders injection. <b>viewProviders</b> does not inject the service into the content child and so, it should fail.</p>\r\n<pre class=\"result notranslate\">\r\nviewProviders: [DebugService]\r\n</pre>\r\n<p>Check the application and you will see that the one of the debug component (used as content child) throws error as shown below &minus;</p>\r\n<!-- src=\"images/application.jpg\" alt=\"Application \" />-->\r\n<p>Let us remove the debug component in the templates and restore the application.</p>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and remove below content</p>\r\n<pre class=\"result notranslate\"> \r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p>Open <b>AppComponent</b> template and change <b>app-expense-entry-list</b> as below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n// navigation code\r\n&lt;app-expense-entry-list&gt;\r\n&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Change the <b>viewProviders</b> setting to <b>providers</b> in <b>ExpenseEntryListComponent</b>.</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [DebugService]\r\n</pre>\r\n<p>Rerun the application and check the result.</p>\r\n\t\t</div>\r\n\r\n","useful_resources":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n\t<h1>Angular 8 - Useful Resources</h1>\n\t<hr />\n\t<br>\n\t<div class=\"mui-container-fluid button-borders\">\n\t\t<div class=\"pre-btn\">\n\t\t\t<a href=\"angular8_quick_guide.html\"><i class=\"fal fa-chevron-circle-left\"></i> Previous Page</a>\n\t\t</div>\n\t\t<div class=\"nxt-btn\">\n\t\t\t<a href=\"angular8_discussion.html\">Next Page <i class=\"fal fa-chevron-circle-right\"></i>&nbsp;</a>\n\t\t</div>\n\t</div>\n\t<div class=\"clear\"></div>\n\t<p>The following resources contain additional information on Angular 8. Please use them to get more in-depth\n\t\tknowledge on this.</p>\n\t<h2>Useful Links on Angular 8</h2>\n\t<ul class=\"list\">\n\t\t<li>\n\t\t\t<p><a target=\"_blank\" rel=\"nofollow\" href=\"https://en.wikipedia.org/wiki/Natural_Language_Toolkit\">Angular 8\n\t\t\t\t\t@ Wikipedia</a> &minus; Angular 8, its history and various other terms has been explained in simple\n\t\t\t\tlanguage.</p>\n\t\t</li>\n\t</ul>\n</div>","web_workers":"<!-- Tutorial Content Starts Here -->\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n<h1>Angular 8 - Web Workers</h1>\n<p>Web workers enables JavaScript application to run the CPU-intensive in the background so that the application main thread concentrate on the smooth operation of UI. Angular provides support for including Web workers in the application. Let us write a simple Angular application and try to use web workers.</p>\n<p>Create a new Angular application using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\ncd /go/to/workspace\nng new web-worker-sample\n</pre>\n<p>Run the application using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\ncd web-worker-sample\nnpm run start\n</pre>\n<p>Add new web worker using below command &minus;</p>\n<pre class=\"prettyprint notranslate\">\nng generate web-worker app\n</pre>\n<p>The output of the above command is as follows &minus;</p>\n<pre class=\"prettyprint notranslate\">\nCREATE tsconfig.worker.json (212 bytes)\nCREATE src/app/app.worker.ts (157 bytes)\nUPDATE tsconfig.app.json (296 bytes)\nUPDATE angular.json (3776 bytes)\nUPDATE src/app/app.component.ts (605 bytes)\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li>app refers the location of the web worker to be created.</li>\n<li>Angular CLI will generate two new files, tsconfig.worker.json and src/app/app.worker.ts and update three files, tsconfig.app.json, angular.json and src/app/app.component.ts file.</li>\n</ul>\n<p>Let us check the changes &minus;</p>\n<pre class=\"prettyprint notranslate\">\n// tsconfig.worker.json\n{\n   \"extends\": \"./tsconfig.json\",\n   \"compilerOptions\": {\n      \"outDir\": \"./out-tsc/worker\",\n      \"lib\": [\n         \"es2018\",\n         \"webworker\"\n      ],\n\n\n      \"types\": []\n   },\n   \"include\": [\n      \"src/**/*.worker.ts\"\n   ]\n}\n</pre>\n<p>Here,</p>\n<p>tsconfig.worker.json extends tsconfig.json and includes options to compile web workers.</p>\n<pre class=\"prettyprint notranslate\">\n// tsconfig.app.json [only a snippet]\n\"exclude\": [\n   \"src/test.ts\",\n   \"src/**/*.spec.ts\",\n   \"src/**/*.worker.ts\"\n]\n</pre>\n<p>Here,</p>\n<p>Basically, it excludes all the worker from compiling as it has separate configuration.</p>\n<pre class=\"prettyprint notranslate\">\n// angular.json (only a snippet) \"webWorkerTsConfig\": \"tsconfig.worker.json\"\n</pre>\n<p>Here,</p>\n<p>angular.json includes the web worker configuration file, tsconfig.worker.json.</p>\n<pre class=\"prettyprint notranslate\">\n// src/app/app.worker.ts\naddEventListener('message', ({ data }) => {\n   const response = `worker response to ${data}`;\n   postMessage(response);\n});\n</pre>\n<p>Here,</p>\n<p>A web worker is created. Web worker is basically a function, which will be called when a message event is fired. The web worker will receive the data send by the caller, process it and then send the response back to the caller.</p>\n<pre class=\"prettyprint notranslate\">\n// src/app/app.component.ts [only a snippet]\nif (typeof Worker !== 'undefined') {\n   // Create a new\n   const worker = new Worker('./app.worker', { type: 'module' });\n   worker.onmessage = ({ data }) =&gt; {\n      console.log(`page got message: ${data}`);\n   };\n   worker.postMessage('hello');\n} else {\n\n   // Web Workers are not supported in this environment.\n   // You should add a fallback so that your program still executes correctly.\n}\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li>AppComponent create a new worker instance, create a callback function to receive the response and then post the message to the worker.</li>\n</ul>\n<p>Restart the application. Since the angular.json file is changed, which is not watched by Angular runner, it is necessary to restart the application. Otherwise, Angular does not identify the new web worker and does not compile it.</p>\n<p>Let us create Typescript class, src/app/app.prime.ts to find nth prime numbers.</p>\n<pre class=\"prettyprint notranslate\">\nexport class PrimeCalculator\n{\n   static isPrimeNumber(num : number) : boolean {\n      if(num == 1) return true;\n\n      let idx : number = 2;\n      for(idx = 2; idx &lt; num / 2; idx++)\n      {\n         if(num % idx == 0)\n            return false;\n      }\n\n      return true;\n   }\n\n   static findNthPrimeNumber(num : number) : number {\n      let idx : number = 1;\n      let count = 0;\n\n      while(count &lt; num) {\n         if(this.isPrimeNumber(idx))\n            count++;\n\n         idx++;\n         console.log(idx);\n      }\n\n      return idx - 1;\n   }\n}\n</pre>\n<p>Here,</p>\n<ul class=\"list\">\n<li>isPrimeNumber check whether the given number is prime or not.</li>\n<li>findNthPrimeNumber finds the nth prime number.</li>\n</ul>\n<p>Import the new created prime number class into src/app/app.worker.ts and change the logic of the web worker to find nth prime number.</p>\n<pre class=\"prettyprint notranslate\">\n/// &lt;reference lib=\"webworker\" /&gt;\n\nimport { PrimeCalculator } from './app.prime';\n\naddEventListener('message', ({ data }) =&gt; {\n   // const response = `worker response to ${data}`;\n   const response = PrimeCalculator.findNthPrimeNumber(parseInt(data));\n   postMessage(response);\n});\n</pre>\n<p>Change <b>AppComponent</b> and include two function, <b>find10thPrimeNumber</b> and <b>find10000thPrimeNumber</b>.</p>\n<pre class=\"prettyprint notranslate\">\nimport { Component } from '@angular/core';\nimport { PrimeCalculator } from './app.prime';\n\n@Component({\n   selector: 'app-root',\n   templateUrl: './app.component.html',\n   styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n   title = 'Web worker sample';\n   prime10 : number = 0;\n   prime10000 : number = 0;\n\n   find10thPrimeNumber() {\n      this.prime10 = PrimeCalculator.findNthPrimeNumber(10);\n   }\n\n   find10000thPrimeNumber() {\n      if (typeof Worker !== 'undefined') {\n         // Create a new\n         const worker = new Worker('./app.worker', { type: 'module' });\n         worker.onmessage = ({ data }) =&gt; {\n         this.prime10000 = data;\n         };\n         worker.postMessage(10000);\n      } else {\n         // Web Workers are not supported in this environment.\n         // You should add a fallback so that your program still executes correctly.\n      }\n   }\n}\n</pre>\n<p>Here,</p>\n<p>find10thPrimeNumber is directly using the PrimeCalculator. But, find10000thPrimeNumber is delegating the calculation to web worker, which in turn uses PrimeCalculator.</p>\n<p>Change the AppComponent template, src/app/app.commands.html and include two option, one to find 10th prime number and another to find the 10000th prime number.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\n\n&lt;div&gt;\n   &lt;a href=\"#\" (click)=\"find10thPrimeNumber()\"&gt;Click here&lt;/a&gt; to find 10th prime number\n   &lt;div&gt;The 10&lt;sup&gt;th&lt;/sup&gt; prime number is {{ prime10 }}&lt;/div&gt; &lt;br/&gt;\n   &lt;a href=\"#\" (click)=\"find10000thPrimeNumber()\"&gt;Click here&lt;/a&gt; to find 10000th prime number\n   &lt;div&gt;The 10000&lt;sup&gt;th&lt;/sup&gt; prime number is {{ prime10000 }}&lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>Here,</p>\n<p>Finding 10000th prime number will take few seconds, but it will not affect other process as it is uses web workers. Just try to find the 10000th prime number first and then, the 10th prime number.</p>\n<p>Since, the web worker is calculating 10000th prime number, the UI does not freeze. We can check 10th prime number in the meantime. If we have not used web worker, we could not do anything in the browser as it is actively processing the 10000th prime number.</p>\n<p>The result of the application is as follows &minus;</p>\n<p>Initial state of the application.</p>\n<!-- <img src=\"images/workers.jpg\" alt=\"Workers\" /> -->\n<p>Click and try to find the 10000th prime number and then try to find the 10th prime number. The application finds the 10th prime number quite fast and shows it. The application is still processing in the background to find the 10000th prime number.</p>\n<!-- <img src=\"images/web_worker.jpg\" alt=\"Web worker\" /> -->\n<p>Both processes are completed.</p>\n<!-- <img src=\"images/web_workers.jpg\" alt=\"Web workers\" /> -->\n<p>Web worker enhances the user experience of web application by doing the complex operation in the background and it is quite easy to do it in Angular Application as well.</p>\n</div>\n\t","whats_new":"<!-- Tutorial Content Starts Here -->\n<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\n\t<h1>Angular 8 - What's New?</h1>\n\t<p>Angular community has continuosly updating its version. This chapter explains about Angular 9 version updates.\n\t</p>\n\t<h2>Install Angular 9</h2>\n\t<p>If you want to work with Angular 9, first you need to setup Angular 9 CLI using the below command:</p>\n\t<pre class=\"result notranslate\">\nnpm install -g @angular/cli@^9.0.0 \n</pre>\n\t<p>After executing this command, you can check the version using the below command:</p>\n\t<pre class=\"result notranslate\">\nng version \n</pre>\n\t<h2>Angular 9 Updates</h2>\n\t<p>Let’s understand Angular 9 updates in brief.</p>\n\t<h3>Ivy compiler</h3>\n\t<p>Ivy compiler becomes the default compiler in Angular 9. This makes apps will be faster and very efficient.\n\t\tWhereas, Angular 8 Ivy is optional. We have to enable it inside tsconfig.json file.</p>\n\t<p>Ivy compiler supports the following features:</p>\n\t<ul class=\"list\">\n\t\t<li>\n\t\t\t<p><b>Performs faster testing</b> &minus; TestBed implementation helps to test more efficient.</p>\n\t\t</li>\n\t\t<li>\n\t\t\t<p><b>Improved CSS class and styles</b> &minus; Ivy styles are easily merged and designed as predictable.\n\t\t\t</p>\n\t\t</li>\n\t\t<li>\n\t\t\t<p><b>Improved type checking</b> &minus; This feature helps to find the errors earlier in development\n\t\t\t\tprocess.</p>\n\t\t</li>\n\t\t<li>\n\t\t\t<p><b>Enhanced debugging</b> &minus; Ivy comes with more tools to enable better debugging features. This\n\t\t\t\twill be helpful to show useful stack trace so that we can easily jump to the instruction.</p>\n\t\t</li>\n\t\t<li>\n\t\t\t<p><b>Ahead-of-Time compiler</b> &minus; This is one of the important improvements in compiler’s\n\t\t\t\tperformance. AOT builds are very faster.  Improved internationalization - i18n substitutions helps to\n\t\t\t\tbuild more than ten times faster than previous versions.</p>\n\t\t</li>\n\t</ul>\n\t<h3>Reliable ng update</h3>\n\t<p>ng updates are very reliable. It contains clear progress updates and runs all of the migrations. This can be done\n\t\tusing the below command:</p>\n\t<pre class=\"result notranslate\">\nng update --create-commits\n</pre>\n\t<p>Here,</p>\n\t<p><b>–create-commits</b> flag is used to commit your code after each migration.</p>\n\t<h3>Improved Dependency Injection</h3>\n\t<p><b>@Injectable</b> service helps to add injector in your application. <b>providedIn</b> meta data provides new\n\t\toption, <b>platform</b> to ensure the object can be used and shared by all application. It is defined below:</p>\n\t<pre class=\"prettyprint notranslate\">\n@Injectable({\n   providedIn: 'platform'\n}) \nclass MyService {...} \n</pre>\n\t<h3>TypeScript 3.8</h3>\n\t<p>Angular 9 is designed to support 3.8 version. TypeScript 3.8 brings support for the below features:</p>\n\t<ul class=\"list\">\n\t\t<li>Type-Only Imports and Exports.</li>\n\t\t<li>ECMAScript Private Fields.</li>\n\t\t<li>Top-Level await.</li>\n\t\t<li>JSDoc Property Modifiers.</li>\n\t\t<li>export * as ns Syntax.</li>\n\t</ul>\n\t<h3>Angular 9.0.0-next.5</h3>\n\t<p>Angular 9.0.0-next.5 build has small size of main.js file, which makes better performance compare to previous\n\t\tversion of Angular 8.</p>\n\t<h3>IDE enhancement</h3>\n\t<p>Angular 9 provides imporves IDE supports. TextMate grammar enables for syntax highlighting in inline and external\n\t\ttemplates.</p>\n\t<h2>Conclusion</h2>\n\t<p>Angular is flexible, ever improving, continuously updated and dependable framework. Angular greatly simplify the\n\t\tprocess of SPA development. By providing new features in each release like <b>Angular Universal, Progressive Web\n\t\t\tApp, Web workers, Bazel build, Ivy Compiler,</b> etc., Angular will have a long life and complete support of\n\t\tthe front end developer.</p>\n\t<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n\t\t<a href=\"angular8_working_example.html\" class=\"pre-btn\"><i class=\"fal fa-chevron-circle-left\"></i> Previous\n\t\t\tPage</a>\n\t\t<a id=\"print-page\" href=\"#\" class=\"pre-btn d-none d-sm-block\"><i class=\"fal fa-print\"></i> Print Page</a>\n\t\t<a href=\"angular8_quick_guide.html\" class=\"nxt-btn\">Next Page <i\n\t\t\t\tclass=\"fal fa-chevron-circle-right\"></i>&nbsp;</a>\n\t</div>\n\t<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n\t\t<div>Advertisements</div>\n\t\t<div>\n\t\t\t<div id=\"adp_bottom_ads\"></div>\n\t\t\t<script>\n\t\t\t\tvar adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\tadpushup.que.push(function () {\n\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t});\n\t\t\t</script>\n\t\t</div>\n\t</div>\n</div>","working_example":"<div class=\"col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content\" id=\"mainContent\">\r\n<h1>Angular 8 - Working Example</h1>\r\n<hr/>\r\n<div class=\"clear\"></div>\r\n<p>Here, we will study about the complete step by step working example with regards to Angular 8.</p>\r\n<p>Let us create an Angular application to check our day to day expenses. Let us give <b>ExpenseManager</b> as our choice for our new application.</p>\r\n<h2>Create an application</h2>\r\n<p>Use below command to create the new application.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /path/to/workspace\r\nng new expense-manager\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>new</b> is one of the command of the ng CLI application. It will be used to create new application. It will ask some basic question in order to create new application. It is enough to let the application choose the default choices. Regarding routing question as mentioned below, specify <b>No</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nWould you like to add Angular routing? No\r\n</pre>\r\n<p>Once the basic questions are answered, the ng CLI application create a new Angular application under expense-manager folder.</p>\r\n<p>Let us move into the our newly created application folder.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd expense-manager\r\n</pre>\r\n<p>Let us start the application using below comman.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>Let us fire up a browser and opens http://localhost:4200. The browser will show the application as shown below &minus;</p>\r\n<!-- src=\"images/applications.jpg\" alt=\"applications\" />-->\r\n<p>Let us change the title of the application to better reflect our application. Open <b>src/app/app.component.ts</b> and change the code as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class AppComponent { \r\n   title = 'Expense Manager';\r\n}\r\n</pre>\r\n<p>Our final application will be rendered in the browser as shown below &minus;</p>\r\n<!-- src=\"images/applications.jpg\" alt=\"applications\" />-->\r\n<h2>Add a component</h2>\r\n<p>Create a new component using ng generate component command as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component expense-entry\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE src/app/expense-entry/expense-entry.component.html (28 bytes)\r\nCREATE src/app/expense-entry/expense-entry.component.spec.ts (671 bytes)\r\nCREATE src/app/expense-entry/expense-entry.component.ts (296 bytes)\r\nCREATE src/app/expense-entry/expense-entry.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (431 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>ExpenseEntryComponent is created under src/app/expense-entry folder.</li>\r\n<li>Component class, Template and stylesheet are created.</li>\r\n<li>AppModule is updated with new component.</li>\r\n</ul>\r\n<p>Add title property to ExpenseEntryComponent <b>(src/app/expense-entry/expense-entry.component.ts) </b>component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n   selector: 'app-expense-entry',\r\n   templateUrl: './expense-entry.component.html',\r\n   styleUrls: ['./expense-entry.component.css']\r\n})\r\nexport class ExpenseEntryComponent implements OnInit {\r\n   title: string;\r\n   constructor() { }\r\n\r\n   ngOnInit() {\r\n      this.title = \"Expense Entry\"\r\n   }\r\n}\r\n</pre>\r\n<p>Update template, <b>src/app/expense-entry/expense-entry.component.html</b> with below content.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;p&gt;{{ title }}&lt;/p&gt;\r\n</pre>\r\n<p>Open <p>src/app/app.component.html</p> and include newly created component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;app-expense-entry>&lt;/app-expense-entry&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>app-expense-entry is the selector value and it can be used as regular HTML Tag.</p>\r\n<p>The output of the application is as shown below &minus;</p>\r\n<!-- src=\"images/html_tag.jpg\" alt=\"HTML Tag\" />-->\r\n<h2>Include bootstrap</h2>\r\n<p>Let us include bootstrap into our <b>ExpenseManager</b> application using <b>styles</b> option and change the default template to use bootstrap components.</p>\r\n<p>Open command prompt and go to ExpenseManager application.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Install <b>bootstrap</b> and <b>JQuery</b> library using below commands</p>\r\n<pre class=\"result notranslate\">\r\nnpm install --save bootstrap@4.5.0 jquery@3.5.1\r\n</pre>\r\n<p>Here,</p>\r\n<p>We have installed JQuery, because, bootstrap uses jquery extensively for advanced components.</p>\r\n<p>Option <b>angular.json</b> and set bootstrap and jquery library path.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{ \r\n   \"projects\": { \r\n      \"expense-manager\": { \r\n         \"architect\": { \r\n            \"build\": {\r\n               \"builder\":\"@angular-devkit/build-angular:browser\", \"options\": { \r\n                  \"outputPath\": \"dist/expense-manager\", \r\n                  \"index\": \"src/index.html\", \r\n                  \"main\": \"src/main.ts\", \r\n                  \"polyfills\": \"src/polyfills.ts\", \r\n                  \"tsConfig\": \"tsconfig.app.json\", \r\n                  \"aot\": false, \r\n                  \"assets\": [ \r\n                     \"src/favicon.ico\", \r\n                     \"src/assets\" \r\n                  ], \r\n                  \"styles\": [ \r\n                     \"./node_modules/bootstrap/dist/css/bootstrap.css\", \"src/styles.css\" \r\n                  ], \r\n                  \"scripts\": [ \r\n                     \"./node_modules/jquery/dist/jquery.js\", \"./node_modules/bootstrap/dist/js/bootstrap.js\" \r\n                  ] \r\n               }, \r\n            }, \r\n         } \r\n   }}, \r\n   \"defaultProject\": \"expense-manager\" \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<p><b>scripts</b> option is used to include JavaScript library. <b>JavaScript</b> registered through <b>scripts</b> will be available to all Angular components in the application.</p>\r\n<p>Open <b>app.component.html</b> and change the content as specified below</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt; \r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt; \r\n   &lt;div class=\"container\"&gt; \r\n      &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; \r\n         &lt;span class=\"navbar-toggler-icon\"&gt;\r\n         &lt;/span&gt; \r\n      &lt;/button&gt; \r\n      &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt; \r\n         &lt;ul class=\"navbar-nav ml-auto\"&gt; \r\n            &lt;li class=\"nav-item active\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n               &lt;span class=\"sr-only\"&gt;(current)\r\n               &lt;/span&gt;\r\n            &lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Report&lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt; \r\n            &lt;/li&gt; \r\n            &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt; \r\n            &lt;/li&gt; \r\n         &lt;/ul&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/nav&gt; \r\n&lt;app-expense-entry&gt;&lt;/app-expense-entry&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Used bootstrap navigation and containers.</p>\r\n<p>Open <b>src/app/expense-entry/expense-entry.component.html</b> and place below content.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt; \r\n&lt;div class=\"container\"&gt; \r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt; \r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n            &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; {{ title }} \r\n            &lt;/div&gt; \r\n            &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n               &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n            &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;  \r\n            &lt;strong&gt;&lt;em&gt;Item:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Pizza \r\n         &lt;/div&gt;\r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n            &lt;strong&gt;&lt;em&gt;Amount:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            20 \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Category:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Food \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Location:&lt;/em&gt;&lt;/strong&gt;\r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            Zomato \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"row\"&gt; \r\n         &lt;div class=\"col-2\" style=\"text-align: right;\"&gt; \r\n            &lt;strong&gt;&lt;em&gt;Spend On:&lt;/em&gt;&lt;/strong&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"col\" style=\"text-align: left;\"&gt; \r\n            June 20, 2020 \r\n         &lt;/div&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Restart the application.</p>\r\n<p>The output of the application is as follows &minus;</p>\r\n<!-- src=\"images/restart_tag.jpg\" alt=\"Restart Tag\" />-->\r\n<p>We will improve the application to handle dynamic expense entry in next chapter.</p>\r\n<h2>Add an interface</h2>\r\n<p>Create ExpenseEntry interface <b>(src/app/expense-entry.ts)</b> and add id, amount, category, Location, spendOn and createdOn.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport interface ExpenseEntry {\r\n   id: number;\r\n   item: string;\r\n   amount: number;\r\n   category: string;\r\n   location: string;\r\n   spendOn: Date;\r\n   createdOn: Date;\r\n}\r\n</pre>\r\n<p>Import <b>ExpenseEntry</b> into <b>ExpenseEntryComponent</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { ExpenseEntry } from '../expense-entry';\r\n</pre>\r\n<p>Create a <b>ExpenseEntry</b> object, expenseEntry as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nexport class ExpenseEntryComponent implements OnInit {\r\n   title: string;\r\n   expenseEntry: ExpenseEntry;\r\n   constructor() { }\r\n\r\n   ngOnInit() {\r\n      this.title = \"Expense Entry\";\r\n\r\n      this.expenseEntry = {\r\n\r\n         id: 1,\r\n         item: \"Pizza\",\r\n         amount: 21,\r\n         category: \"Food\",\r\n         location: \"Zomato\",\r\n         spendOn: new Date(2020, 6, 1, 10, 10, 10),\r\n         createdOn: new Date(2020, 6, 1, 10, 10, 10),\r\n      };\r\n   }\r\n}\r\n</pre>\r\n<p>Update the component template using <b>expenseEntry object, src/app/expense-entry/expense-entry.component.html</b> as specified below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt;\r\n                  {{ title }}\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt;\r\n                  &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt;\r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n         &lt;/div&gt;\r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Item:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.item }} \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Amount:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.amount }}   \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Category:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n\r\n                  {{ expenseEntry.category }} \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Location:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.location }} \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-2\" style=\"text-align: right;\"&gt;\r\n                  &lt;strong&gt;&lt;em&gt;Spend On:&lt;/em&gt;&lt;/strong&gt;\r\n               &lt;/div&gt;\r\n               &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n                  {{ expenseEntry.spendOn }}  \r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>The output of the application is as follows &minus;</p>\r\n<!-- src=\"images/interface.jpg\" alt=\"Interface\" />-->\r\n<h2>Using directives</h2>\r\n<p>Let us add a new component in our <b>ExpenseManager</b> application to list the expense entries.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Create a new component, <b>ExpenseEntryListComponent</b> using below command &minus;</p>\r\n<pre class=\"result notranslate\">\r\nng generate component ExpenseEntryList\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry-list/expense-entry-list.component.html (33 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.spec.ts (700 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.ts (315 bytes) \r\nCREATE src/app/expense-entry-list/expense-entry-list.component.css (0 bytes) \r\nUPDATE src/app/app.module.ts (548 bytes)\r\n</pre>\r\n<p>Here, the command creates the ExpenseEntryList Component and update the necessary code in <b>AppModule</b>.</p>\r\n<p>Import <b>ExpenseEntry</b> into <b>ExpenseEntryListComponent</b> component <b>(src/app/expense-entry-list/expense-entry-list.component)</b></p>\r\n<pre class=\"result notranslate\">\r\nimport { ExpenseEntry } from '../expense-entry';\r\n</pre>\r\n<p>Add a method, <b>getExpenseEntries()</b> to return list of expense entry (mock items) in <b>ExpenseEntryListComponent (src/app/expense-entry-list/expense-entry-list.component)</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\ngetExpenseEntries() : ExpenseEntry[] { \r\n   let mockExpenseEntries : ExpenseEntry[] = [ \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"Mcdonald\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1,\r\n         item: \"Pizza\",\r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"Mcdonald\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) }, \r\n      { id: 1, \r\n         item: \"Pizza\", \r\n         amount: Math.floor((Math.random() * 10) + 1), \r\n         category: \"Food\", \r\n         location: \"KFC\", \r\n         spendOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10), \r\n         createdOn: new Date(2020, 4, Math.floor((Math.random() * 30) + 1), 10, 10, 10) \r\n      }, \r\n   ]; \r\n   return mockExpenseEntries; \r\n}\r\n</pre>\r\n<p>Declare a local variable, expenseEntries and load the mock list of expense entries as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\ntitle: string; \r\nexpenseEntries: ExpenseEntry[]; \r\nconstructor() { } \r\nngOnInit() { \r\n   this.title = \"Expense Entry List\"; \r\n   this.expenseEntries = this.getExpenseEntries(); \r\n}\r\n</pre>\r\n<p>Open the template file <b>(src/app/expense-entry-list/expense-entry-list.component.html)</b> and show the mock entries in a table.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt; \r\n   &lt;div class=\"row\"&gt; \r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt; \r\n            &lt;div class=\"row\"&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt; \r\n                  {{ title }} \r\n               &lt;/div&gt; \r\n               &lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n                  &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n               &lt;/div&gt; \r\n            &lt;/div&gt; \r\n         &lt;/div&gt; \r\n         &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt; \r\n            &lt;table class=\"table table-striped\"&gt; \r\n               &lt;thead&gt; \r\n                  &lt;tr&gt; \r\n                     &lt;th&gt;Item&lt;/th&gt; \r\n                     &lt;th&gt;Amount&lt;/th&gt; \r\n                     &lt;th&gt;Category&lt;/th&gt; \r\n                     &lt;th&gt;Location&lt;/th&gt; \r\n                     &lt;th&gt;Spent On&lt;/th&gt; \r\n                  &lt;/tr&gt; \r\n               &lt;/thead&gt; \r\n               &lt;tbody&gt; \r\n                  &lt;tr *ngFor=\"let entry of expenseEntries\"&gt; \r\n                     &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt; \r\n                     &lt;th&gt;{{ entry.amount }}&lt;/th&gt; \r\n                     &lt;td&gt;{{ entry.category }}&lt;/td&gt; \r\n                     &lt;td&gt;{{ entry.location }}&lt;/td&gt; \r\n                     &lt;td&gt;{{ entry.spendOn | date: 'short' }}&lt;/td&gt; \r\n                  &lt;/tr&gt; \r\n               &lt;/tbody&gt; \r\n            &lt;/table&gt; \r\n         &lt;/div&gt; \r\n      &lt;/div&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Used bootstrap table. <b>table</b> and <b>table-striped</b> will style the table according to Boostrap style standard.</p></li>\r\n<li><p>Used <b>ngFor</b> to loop over the <b>expenseEntries</b> and generate table rows.</p></li>\r\n</ul>\r\n<p>Open <b>AppComponent</b> template, <b>src/app/app.component.html</b> and include <b>ExpenseEntryListComponent</b> and remove <b>ExpenseEntryComponent</b> as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n... \r\n&lt;app-expense-entry-list&gt;&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Finally, the output of the application is as shown below.</p>\r\n<!-- src=\"images/appcomponent.jpg\" alt=\"AppComponent\" />-->\r\n<h2>Use pipes</h2>\r\n<p>Let us use the pipe in the our <b>ExpenseManager</b> application</p>\r\n<p>Open <b>ExpenseEntryListComponent’s</b> template, <b>src/app/expense-entry-list/expense-entry-list.component.html</b> and include pipe in <b>entry.spendOn</b> as mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;td&gt;{{ entry.spendOn | date: 'short' }}&lt;/td&gt;\r\n</pre>\r\n<p>Here, we have used the date pipe to show the spend on date in the short format.</p>\r\n<p>Finally, the output of the application is as shown below &minus;</p>\r\n<!-- src=\"images/pipes.jpg\" alt=\"Pipes\" />-->\r\n<h2>Add debug service</h2>\r\n<p>Run the below command to generate an Angular service, <b>DebugService</b>.</p>\r\n<pre class=\"result notranslate\">\r\nng g service debug\r\n</pre>\r\n<p>This will create two Typescript files (debug service & its test) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/debug.service.spec.ts (328 bytes) \r\nCREATE src/app/debug.service.ts (134 bytes)\r\n</pre>\r\n<p>Let us analyse the content of the <b>DebugService</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; @Injectable({ \r\n   providedIn: 'root' \r\n}) \r\nexport class DebugService { \r\n   constructor() { } \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>@Injectable</b> decorator is attached to DebugService class, which enables the DebugService to be used in Angular component of the application.</p></li>\r\n<li><p><b>providerIn</b> option and its value, root enables the DebugService to be used in all component of the application.</p></li>\r\n</ul>\r\n<p>Let us add a method, Info, which will print the message into the browser console.</p>\r\n<pre class=\"result notranslate\">\r\ninfo(message : String) : void { \r\n   console.log(message); \r\n}\r\n</pre>\r\n<p>Let us initialise the service in the <b>ExpenseEntryListComponent</b> and use it to print message.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { ExpenseEntry } from '../expense-entry'; import { DebugService } from '../debug.service'; @Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', styleUrls: ['./expense-entry-list.component.css'] \r\n}) \r\nexport class ExpenseEntryListComponent implements OnInit { \r\n   title: string; \r\n   expenseEntries: ExpenseEntry[]; \r\n   constructor(private debugService: DebugService) { } \r\n   ngOnInit() { \r\n      this.debugService.info(\"Expense Entry List \r\n      component initialized\"); \r\n      this.title = \"Expense Entry List\"; \r\n      this.expenseEntries = this.getExpenseEntries(); \r\n   } \r\n   // other coding \r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>DebugService is initialised using constructor parameters. Setting an argument (debugService) of type DebugService will trigger the dependency injection to create a new DebugService object and set it into the ExpenseEntryListComponent component.</p></li>\r\n<li><p>Calling the info method of DebugService in the ngOnInit method prints the message in the browser console.</p></li>\r\n</ul>\r\n<p>The result can be viewed using developer tools and it looks similar as shown below &minus;</p>\r\n<!-- src=\"images/debug_service.jpg\" alt=\"Debug service\" />-->\r\n<p>Let us extend the application to understand the scope of the service.</p>\r\n<p>Let us a create a <b>DebugComponent</b> by using below mentioned command.</p>\r\n<pre class=\"result notranslate\">\r\nng generate component debug\r\nCREATE src/app/debug/debug.component.html (20 bytes) CREATE src/app/debug/debug.component.spec.ts (621 bytes) \r\nCREATE src/app/debug/debug.component.ts (265 bytes) CREATE src/app/debug/debug.component.css (0 bytes) UPDATE src/app/app.module.ts (392 bytes)\r\n</pre>\r\n<p>Let us remove the DebugService in the root module.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/debug.service.ts\r\nimport { Injectable } from '@angular/core'; @Injectable() \r\nexport class DebugService { \r\n   constructor() { \r\n   }\r\n   info(message : String) : void {     \r\n      console.log(message); \r\n   } \r\n}\r\n</pre>\r\n<p>Register the DebugService under ExpenseEntryListComponent component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// src/app/expense-entry-list/expense-entry-list.component.ts @Component({ \r\n   selector: 'app-expense-entry-list', \r\n   templateUrl: './expense-entry-list.component.html', \r\n   styleUrls: ['./expense-entry-list.component.css'] \r\n   providers: [DebugService] \r\n})\r\n</pre>\r\n<p>Here, we have used providers meta data <b>(ElementInjector)</b> to register the service.</p>\r\n<p>Open <b>DebugComponent</b> (src/app/debug/debug.component.ts) and import <b>DebugService</b> and set an instance in the constructor of the component.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { DebugService } from '../debug.service'; \r\n@Component({ \r\n   selector: 'app-debug', \r\n   templateUrl: './debug.component.html', \r\n   styleUrls: ['./debug.component.css'] \r\n}) \r\nexport class DebugComponent implements OnInit { \r\n   constructor(private debugService: DebugService) { } \r\n   ngOnInit() { \r\n      this.debugService.info(\"Debug component gets service from Parent\"); \r\n   } \r\n}\r\n</pre>\r\n<p>Here, we have not registered <b>DebugService</b>. So, DebugService will not be available if used as parent component. When used inside a parent component, the service may available from parent, if the parent has access to the service.</p>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and include a content section as shown below:</p>\r\n<pre class=\"result notranslate\">\r\n// existing content \r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p>Here, we have included a content section and DebugComponent section.</p>\r\n<p>Let us include the debug component as a content inside the <b>ExpenseEntryListComponent</b> component in the AppComponent template. Open <b>AppComponent</b> template and change <b>app-expense-entry-list</b> as below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n// navigation code\r\n&lt;app-expense-entry-list&gt;\r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Here, we have included the <b>DebugComponent</b> as content.</p>\r\n<p>Let us check the application and it will show <b>DebugService</b> template at the end of the page as shown below &minus;</p>\r\n<!-- src=\"images/debug.jpg\" alt=\"Debug \" />-->\r\n<p>Also, we could able to see two debug information from debug component in the console. This indicate that the debug component gets the service from its parent component.</p>\r\n<p>Let us change how the service is injected in the <b>ExpenseEntryListComponent</b> and how it affects the scope of the service. Change providers injector to viewProviders injection. <b>viewProviders</b> does not inject the service into the content child and so, it should fail.</p>\r\n<pre class=\"result notranslate\">\r\nviewProviders: [DebugService]\r\n</pre>\r\n<p>Check the application and you will see that the one of the debug component (used as content child) throws error as shown below &minus;</p>\r\n<!-- src=\"images/application.jpg\" alt=\"Application \" />-->\r\n<p>Let us remove the debug component in the templates and restore the application.</p>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and remove below content</p>\r\n<pre class=\"result notranslate\"> \r\n&lt;app-debug&gt;&lt;/app-debug&gt;\r\n&lt;ng-content&gt;&lt;/ng-content&gt;\r\n</pre>\r\n<p>Open <b>AppComponent</b> template and change <b>app-expense-entry-list</b> as below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n// navigation code\r\n&lt;app-expense-entry-list&gt;\r\n&lt;/app-expense-entry-list&gt;\r\n</pre>\r\n<p>Change the <b>viewProviders</b> setting to <b>providers</b> in <b>ExpenseEntryListComponent</b>.</p>\r\n<pre class=\"result notranslate\">\r\nproviders: [DebugService]\r\n</pre>\r\n<p>Rerun the application and check the result.</p>\r\n<h2>Create expense service</h2>\r\n<p>Let us create a new service <b>ExpenseEntryService</b> in our <b>ExpenseManager</b> application to interact with <b>Expense REST API</b>. ExpenseEntryService will get the latest expense entries, insert new expense entries, modify existing expense entries and delete the unwanted expense entries.</p>\r\n<p>Open command prompt and go to project root folder.</p>\r\n<pre class=\"result notranslate\">\r\ncd /go/to/expense-manager\r\n</pre>\r\n<p>Start the application.</p>\r\n<pre class=\"result notranslate\">\r\nng serve\r\n</pre>\r\n<p>Run the below command to generate an Angular service, <b>ExpenseService</b>.</p>\r\n<pre class=\"result notranslate\">\r\nng generate service ExpenseEntry\r\n</pre>\r\n<p>This will create two Typescript files (expense entry service & its test) as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/expense-entry.service.spec.ts (364 bytes) \r\nCREATE src/app/expense-entry.service.ts (141 bytes)\r\n</pre>\r\n<p>Open <b>ExpenseEntryService</b> (src/app/expense-entry.service.ts) and import <b>ExpenseEntry, throwError</b> and <b>catchError</b> from rxjs library and import <b>HttpClient, HttpHeaders</b> and <b>HttpErrorResponse</b> from @angular/common/http package.</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core'; \r\nimport { ExpenseEntry } from './expense-entry'; import { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators'; \r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from \r\n'@angular/common/http';\r\n</pre>\r\n<p>Inject the HttpClient service into our service.</p>\r\n<pre class=\"result notranslate\">\r\nconstructor(private httpClient : HttpClient) { }\r\n</pre>\r\n<p>Create a variable, <b>expenseRestUrl</b> to specify the <b>Expense Rest API</b> endpoints.</p>\r\n<pre class=\"result notranslate\">\r\nprivate expenseRestUrl = 'http://localhost:8000/api/expense';\r\n</pre>\r\n<p>Create a variable, <b>httpOptions</b> to set the Http Header option. This will be used during the Http Rest API call by Angular <b>HttpClient</b> service.</p>\r\n<pre class=\"result notranslate\">\r\nprivate httpOptions = { \r\n   headers: new HttpHeaders( { 'Content-Type': 'application/json' }) \r\n};\r\n</pre>\r\n<p>The complete code is as follows &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { ExpenseEntry } from './expense-entry';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseEntryService {\r\n      private expenseRestUrl = 'api/expense';\r\n      private httpOptions = {\r\n         headers: new HttpHeaders( { 'Content-Type': 'application/json' })\r\n      };\r\n\r\n   constructor(\r\n      private httpClient : HttpClient) { }\r\n}\r\n</pre>\r\n<h2>Http programming using HttpClient service</h2>\r\n<p>Start the Expense REST API application as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ncd /go/to/expense-rest-api \r\nnode .\\server.js\r\n</pre>\r\n<p>Add <b>getExpenseEntries()</b> and <b>httpErrorHandler()</b> method in <b>ExpenseEntryService</b> (src/app/expense-entry.service.ts) service.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngetExpenseEntries() : Observable&lt;ExpenseEntry[]&gt; {\r\n   return this.httpClient.get&lt;ExpenseEntry[]&gt;(this.expenseRestUrl, this.httpOptions)\r\n   .pipe(retry(3),catchError(this.httpErrorHandler));\r\n}\r\n\r\ngetExpenseEntry(id: number) : Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.get&lt;ExpenseEntry&gt;(this.expenseRestUrl + \"/\" + id, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n\r\nprivate httpErrorHandler (error: HttpErrorResponse) {\r\n      if (error.error instanceof ErrorEvent) {\r\n      console.error(\"A client side error occurs. The error message is \" + error.message);\r\n      } else {\r\n      console.error(\r\n            \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n      }\r\n\r\n      return throwError(\"Error occurred. Pleas try again\");\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p><b>getExpenseEntries()</b> calls the <b>get()</b> method using expense end point and also configures the error handler. Also, it configures <b>httpClient</b> to try for maximum of 3 times in case of failure. Finally, it returns the response from server as typed <b>(ExpenseEntry[])</b> Observable object.</p></li>\r\n<li><p><b>getExpenseEntry</b> is similar to getExpenseEntries() except it passes the id of the ExpenseEntry object and gets ExpenseEntry Observable object.</p></li>\r\n</ul>\r\n<p>The complete coding of <b>ExpenseEntryService</b> is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { ExpenseEntry } from './expense-entry';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseEntryService {\r\n   private expenseRestUrl = 'http://localhost:8000/api/expense';\r\n   private httpOptions = {\r\n      headers: new HttpHeaders( { 'Content-Type': 'application/json' })\r\n   };\r\n\r\n   constructor(private httpClient : HttpClient) { } \r\n\r\n   getExpenseEntries() : Observable<ExpenseEntry[]> {\r\n      return this.httpClient.get<ExpenseEntry[]>(this.expenseRestUrl, this.httpOptions)\r\n      .pipe(\r\n         retry(3),\r\n         catchError(this.httpErrorHandler)\r\n      );\r\n   }\r\n\r\n   getExpenseEntry(id: number) : Observable<ExpenseEntry> {\r\n      return this.httpClient.get<ExpenseEntry>(this.expenseRestUrl + \"/\" + id, this.httpOptions)\r\n      .pipe(\r\n         retry(3),\r\n         catchError(this.httpErrorHandler)\r\n      );\r\n   }\r\n\r\n   private httpErrorHandler (error: HttpErrorResponse) {\r\n      if (error.error instanceof ErrorEvent) {\r\n         console.error(\"A client side error occurs. The error message is \" + error.message);\r\n      } else {\r\n         console.error(\r\n            \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\r\n      }\r\n\r\n      return throwError(\"Error occurred. Pleas try again\");\r\n   }\r\n}\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent</b> (src-entry-list-entry-list.component.ts) and inject <b>ExpenseEntryService</b> through constructor as specified below:</p>\r\n<pre class=\"result notranslate\">\r\nconstructor(private debugService: DebugService, private restService : \r\nExpenseEntryService ) { }\r\n</pre>\r\n<p>Change the <b>getExpenseEntries()</b> function. Call getExpenseEntries() method from <b>ExpenseEntryService</b> instead of returning the mock items.</p>\r\n<pre class=\"result notranslate\">\r\ngetExpenseItems() {  \r\n   this.restService.getExpenseEntries() \r\n      .subscribe( data =&minus; this.expenseEntries = data ); \r\n}\r\n</pre>\r\n<p>The complete <b>ExpenseEntryListComponent</b> coding is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ExpenseEntry } from '../expense-entry';\r\nimport { DebugService } from '../debug.service';\r\nimport { ExpenseEntryService } from '../expense-entry.service';\r\n\r\n@Component({\r\n   selector: 'app-expense-entry-list',\r\n   templateUrl: './expense-entry-list.component.html',\r\n   styleUrls: ['./expense-entry-list.component.css'],\r\n   providers: [DebugService]\r\n})\r\nexport class ExpenseEntryListComponent implements OnInit {\r\n   title: string;\r\n   expenseEntries: ExpenseEntry[];\r\n   constructor(private debugService: DebugService, private restService : ExpenseEntryService ) { }\r\n\r\n   ngOnInit() {\r\n      this.debugService.info(\"Expense Entry List component initialized\");\r\n      this.title = \"Expense Entry List\";\r\n\r\n      this.getExpenseItems();\r\n   }\r\n\r\n   getExpenseItems() {\r\n      this.restService.getExpenseEntries()\r\n      .subscribe( data =&gt; this.expenseEntries = data );\r\n   }\r\n}\r\n</pre>\r\n<p>Finally, check the application and you will see the below response.</p>\r\n<!-- src=\"images/failed_request.jpg\" alt=\"failed request \" />-->\r\n<h3>Add Expense functionality</h3>\r\n<p>Let us add a new method, <b>addExpenseEntry()</b> in our <b>ExpenseEntryService</b> to add new expense entry as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\naddExpenseEntry(expenseEntry: ExpenseEntry): Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.post&lt;ExpenseEntry&gt;(this.expenseRestUrl, expenseEntry, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h3>Update expense entry functionality</h3>\r\n<p>Let us add a new method, <b>updateExpenseEntry()</b> in our <b>ExpenseEntryService</b> to update existing expense entry as mentioned below:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nupdateExpenseEntry(expenseEntry: ExpenseEntry): Observable&lt;ExpenseEntry&gt; {\r\n   return this.httpClient.put&lt;ExpenseEntry&gt;(this.expenseRestUrl + \"/\" + expenseEntry.id, expenseEntry, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre> \r\n<h3>Delete expense entry functionality</h3>\r\n<p>Let us add a new method, <b>deleteExpenseEntry()</b> in our <b>ExpenseEntryService</b> to delete existing expense entry as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ndeleteExpenseEntry(expenseEntry: ExpenseEntry | number) : Observable&lt;ExpenseEntry&gt; {\r\n   const id = typeof expenseEntry == 'number' ? expenseEntry : expenseEntry.id\r\n   const url = `${this.expenseRestUrl}/${id}`;\r\n\r\n   return this.httpClient.delete&lt;ExpenseEntry&gt;(url, this.httpOptions)\r\n   .pipe(\r\n      retry(3),\r\n      catchError(this.httpErrorHandler)\r\n   );\r\n}\r\n</pre>\r\n<h2>Add Routing</h2>\r\n<p>Generate routing module using below command, if not done before.</p>\r\n<pre class=\"result notranslate\">\r\nng generate module app-routing --module app --flat\r\n</pre>\r\n<h3>Output</h3>\r\n<p>The output is mentioned below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nCREATE src/app/app-routing.module.ts (196 bytes) \r\nUPDATE src/app/app.module.ts (785 bytes)\r\n</pre>\r\n<p>Here,</p>\r\n<p>CLI generate <b>AppRoutingModule</b> and then, configures it in <b>AppModule</b></p>\r\n<p>Update <b>AppRoutingModule (src/app/app.module.ts)</b> as mentioned below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core'; \r\nimport { Routes, RouterModule } from '@angular/router'; import { ExpenseEntryComponent } from './expense-entry/expense-entry.component'; \r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component'; \r\nconst routes: Routes = [ \r\n   { path: 'expenses', component: ExpenseEntryListComponent }, \r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent }, \r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }]; \r\n@NgModule({ \r\n   imports: [RouterModule.forRoot(routes)], \r\n   exports: [RouterModule] }) \r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here, we have added route for our expense list and expense details component.</p>\r\n<p>Update <b>AppComponent</b> template <b>(src/app/app.component.html)</b> to include <b>router-outlet</b> and <b>routerLink.</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt; \r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt; \r\n&lt;div class=\"container\"&gt; \r\n   &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; \r\n      &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; \r\n   &lt;/button&gt; \r\n   &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt; \r\n      &lt;ul class=\"navbar-nav ml-auto\"&gt; \r\n         &lt;li class=\"nav-item active\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Home \r\n               &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt; \r\n            &lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" routerLink=\"/expenses\"&gt;Report&lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt; \r\n         &lt;/li&gt; \r\n         &lt;li class=\"nav-item\"&gt; \r\n            &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt; \r\n         &lt;/li&gt; \r\n      &lt;/ul&gt; \r\n   &lt;/div&gt; \r\n&lt;/div&gt; \r\n&lt;/nav&gt; \r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>Open <b>ExpenseEntryListComponent</b> template (src/app/expense-entry-list/expense-entry-list.component.html) and include view option for every expense entries.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;table class=\"table table-striped\"&gt; \r\n   &lt;thead&gt; \r\n      &lt;tr&gt; \r\n         &lt;th&gt;Item&lt;/th&gt;\r\n         &lt;th&gt;Amount&lt;/th&gt; \r\n         &lt;th&gt;Category&lt;/th&gt; \r\n         &lt;th&gt;Location&lt;/th&gt; \r\n         &lt;th&gt;Spent On&lt;/th&gt; \r\n         &lt;th&gt;View&lt;/th&gt; \r\n      &lt;/tr&gt; \r\n   &lt;/thead&gt; \r\n   &lt;tbody&gt; \r\n      &lt;tr *ngFor=\"let entry of expenseEntries\"&gt; \r\n         &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt; \r\n         &lt;th&gt;{{ entry.amount }}&lt;/th&gt; \r\n         &lt;td&gt;{{ entry.category }}&lt;/td&gt; \r\n         &lt;td&gt;{{ entry.location }}&lt;/td&gt; \r\n         &lt;td&gt;{{ entry.spendOn | date: 'medium' }}&lt;/td&gt; \r\n         &lt;td&gt;&lt;a routerLink=\"../expenses/detail/{{ entry.id }}\"&gt;View&lt;/a&gt;&lt;/td&gt; \r\n      &lt;/tr&gt; \r\n   &lt;/tbody&gt; \r\n&lt;/table&gt;\r\n</pre>\r\n<p>Here, we have updated the expense list table and added a new column to show the view option.</p>\r\n<p>Open <b>ExpenseEntryComponent (src/app/expense-entry/expense-entry.component.ts)</b> and add functionality to fetch the current selected expense entry. It can be done by first getting the id through the <b>paramMap</b> and then, using the <b>getExpenseEntry()</b> method from <b>ExpenseEntryService</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nthis.expenseEntry$ = this.route.paramMap.pipe(  \r\n   switchMap(params =&gt; { \r\n      this.selectedId = Number(params.get('id')); \r\n      return \r\nthis.restService.getExpenseEntry(this.selectedId); })); \r\n   this.expenseEntry$.subscribe( (data) =&gt; this.expenseEntry = data );\r\n</pre>\r\n<p>Update ExpenseEntryComponent and add option to go to expense list.</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngoToList() { \r\n   this.router.navigate(['/expenses']); \r\n}\r\n</pre>\r\n<p>The complete code of ExpenseEntryComponent is as follows &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core'; import { ExpenseEntry } from '../expense-entry'; import { ExpenseEntryService } from '../expense-entry.service'; \r\nimport { Router, ActivatedRoute } from '@angular/router'; \r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators'; \r\n@Component({ \r\n   selector: 'app-expense-entry', \r\n   templateUrl: './expense-entry.component.html', \r\n   styleUrls: ['./expense-entry.component.css'] \r\n}) \r\nexport class ExpenseEntryComponent implements OnInit { \r\n   title: string; \r\n   expenseEntry$ : Observable&lt;ExpenseEntry&gt;; \r\n   expenseEntry: ExpenseEntry = {} as ExpenseEntry; \r\n   selectedId: number; \r\n   constructor(private restService : ExpenseEntryService, private router : Router, private route : \r\nActivatedRoute ) { } \r\n   ngOnInit() { \r\n      this.title = \"Expense Entry\"; \r\n   this.expenseEntry$ = this.route.paramMap.pipe( \r\n      switchMap(params =&gt; { \r\n         this.selectedId = Number(params.get('id')); \r\n         return \r\nthis.restService.getExpenseEntry(this.selectedId); })); \r\n   this.expenseEntry$.subscribe( (data) =&gt; this.expenseEntry = data ); \r\n   } \r\n   goToList() { \r\n      this.router.navigate(['/expenses']); \r\n   } \r\n}\r\n</pre>\r\n<p>Open <b>ExpenseEntryComponent (src/app/expense-entry/expense-entry.component.html)</b> template and add a new button to navigate back to expense list page.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt; \r\n   &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"goToList()\"&gt;Go to List&lt;/button&gt; &nbsp;\r\n   &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; \r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here, we have added <b>Go to List</b> button before <b>Edit</b> button.</p>\r\n<p>Run the application using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng serve\r\n</pre>\r\n<p>The final output of the application is as follows &minus;</p>\r\n<!-- src=\"images/nested_routing.jpg\" alt=\"Nested routing\" />-->\r\n<p>Clicking the view option of the first entry will navigate to details page and show the selected expense entry as shown below &minus;</p>\r\n<!-- src=\"images/nested_routings.jpg\" alt=\"Nested routing\" />-->\r\n<h2>Enable login and logout feature</h2>\r\n<p>Create a new service, AuthService to authenticate the user.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate service auth\r\nCREATE src/app/auth.service.spec.ts (323 bytes)\r\nCREATE src/app/auth.service.ts (133 bytes)\r\n</pre>\r\n<p>Open <b>AuthService</b> and include below code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, delay } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n   isUserLoggedIn: boolean = false;\r\n\r\n   login(userName: string, password: string): Observable<boolean> {\r\n      console.log(userName);\r\n      console.log(password);\r\n      this.isUserLoggedIn = userName == 'admin' && password == 'admin';\r\n      localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \r\n\r\n   return of(this.isUserLoggedIn).pipe(\r\n      delay(1000),\r\n      tap(val => { \r\n         console.log(\"Is User Authentication is successful: \" + val); \r\n      })\r\n   );\r\n   }\r\n\r\n   logout(): void {\r\n   this.isUserLoggedIn = false;\r\n      localStorage.removeItem('isUserLoggedIn'); \r\n   }\r\n\r\n   constructor() { }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>We have written two methods, <b>login</b> and <b>logout</b>.</p></li>\r\n<li><p>The purpose of the <b>login</b> method is to validate the user and if the user successfully validated, it stores the information in <b>localStorage</b> and then returns true.</p></li>\r\n<li><p>Authentication validation is that the user name and password should be <b>admin.</b></p></li>\r\n<li><p>We have not used any backend. Instead, we have simulated a delay of 1s using Observables.</p></li>\r\n<li><p>The purpose of the <b>logout</b> method is to invalidate the user and removes the information stored in <b>localStorage.</b></p></li>\r\n</ul>\r\n<p>Create a <b>login</b> component using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component login\r\nCREATE src/app/login/login.component.html (20 bytes)\r\nCREATE src/app/login/login.component.spec.ts (621 bytes)\r\nCREATE src/app/login/login.component.ts (265 bytes)\r\nCREATE src/app/login/login.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1207 bytes)\r\n</pre>\r\n<p>Open <b>LoginComponent</b> and include below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n   selector: 'app-login',\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n   userName: string;\r\n   password: string;\r\n   formData: FormGroup;\r\n\r\n   constructor(private authService : AuthService, private router : Router) { }\r\n\r\n   ngOnInit() {\r\n      this.formData = new FormGroup({\r\n         userName: new FormControl(\"admin\"),\r\n         password: new FormControl(\"admin\"),\r\n      });\r\n   }\r\n\r\n   onClickSubmit(data: any) {\r\n      this.userName = data.userName;\r\n      this.password = data.password;\r\n\r\n      console.log(\"Login page: \" + this.userName);\r\n      console.log(\"Login page: \" + this.password);\r\n\r\n      this.authService.login(this.userName, this.password)\r\n         .subscribe( data =&gt; { \r\n            console.log(\"Is Login Success: \" + data); \r\n      \r\n           if(data) this.router.navigate(['/expenses']); \r\n      });\r\n   }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Used reactive forms.</p></li>\r\n<li><p>Imported AuthService and Router and configured it in constructor.</p></li>\r\n<li><p>Created an instance of FormGroup and included two instance of FormControl, one for user name and another for password.</p></li>\r\n<li><p>Created a onClickSubmit to validate the user using authService and if successful, navigate to expense list.</p></li>\r\n</ul>\r\n<p>Open <b>LoginComponent</b> template and include below template code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n      &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n         &lt;div class=\"container box\" style=\"margin-top: 10px; padding-left: 0px; padding-right: 0px;\"&gt;\r\n            &lt;div class=\"row\"&gt;\r\n               &lt;div class=\"col-12\" style=\"text-align: center;\"&gt;\r\n                                    &lt;form [formGroup]=\"formData\" (ngSubmit)=\"onClickSubmit(formData.value)\" \r\n                                          class=\"form-signin\"&gt;\r\n                                    &lt;h2 class=\"form-signin-heading\"&gt;Please sign in&lt;/h2&gt;\r\n                                    &lt;label for=\"inputEmail\" class=\"sr-only\"&gt;Email address&lt;/label&gt;\r\n                                    &lt;input type=\"text\" id=\"username\" class=\"form-control\" \r\n                                          formControlName=\"userName\" placeholder=\"Username\" required autofocus&gt;\r\n                                    &lt;label for=\"inputPassword\" class=\"sr-only\"&gt;Password&lt;/label&gt;\r\n                                    &lt;input type=\"password\" id=\"inputPassword\" class=\"form-control\" \r\n                                          formControlName=\"password\" placeholder=\"Password\" required&gt;\r\n                                    &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt;\r\n                                    &lt;/form&gt;\r\n               &lt;/div&gt;\r\n            &lt;/div&gt;\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<p>Created a reactive form and designed a login form.</p>\r\n<p>Attached the <b>onClickSubmit</b> method to the form submit action.</p>\r\n<p>Open <b>LoginComponent</b> style and include below CSS Code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n.form-signin {\r\n   max-width: 330px;\r\n\r\n   padding: 15px;\r\n   margin: 0 auto;\r\n}\r\n\r\ninput {\r\n   margin-bottom: 20px;\r\n}\r\n</pre>\r\n<p>Here, some styles are added to design the login form.</p>\r\n<p>Create a logout component using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate component logout\r\nCREATE src/app/logout/logout.component.html (21 bytes)\r\nCREATE src/app/logout/logout.component.spec.ts (628 bytes)\r\nCREATE src/app/logout/logout.component.ts (269 bytes)\r\nCREATE src/app/logout/logout.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1368 bytes)\r\n</pre>\r\n<p>Open <b>LogoutComponent</b> and include below code.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { AuthService } from '../auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n   selector: 'app-logout',\r\n   templateUrl: './logout.component.html',\r\n   styleUrls: ['./logout.component.css']\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n\r\n   constructor(private authService : AuthService, private router: Router) { }\r\n\r\n   ngOnInit() {\r\n      this.authService.logout();\r\n      this.router.navigate(['/']);\r\n   }\r\n\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Used logout method of AuthService.</li>\r\n<li>Once the user is logged out, the page will redirect to home page (/).</li>\r\n</ul>\r\n<p>Create a guard using below command &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nng generate guard expense\r\nCREATE src/app/expense.guard.spec.ts (364 bytes)\r\nCREATE src/app/expense.guard.ts (459 bytes)\r\n</pre>\r\n<p>Open ExpenseGuard and include below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class ExpenseGuard implements CanActivate {\r\n\r\n   constructor(private authService: AuthService, private router: Router) {}\r\n\r\n   canActivate(\r\n   next: ActivatedRouteSnapshot,\r\n   state: RouterStateSnapshot): boolean | UrlTree {\r\n      let url: string = state.url;\r\n\r\n          return this.checkLogin(url);\r\n      }\r\n\r\n      checkLogin(url: string): true | UrlTree {\r\n         console.log(\"Url: \" + url)\r\n         let val: string = localStorage.getItem('isUserLoggedIn');\r\n\r\n         if(val != null && val == \"true\"){\r\n            if(url == \"/login\")\r\n               this.router.parseUrl('/expenses');\r\n            else \r\n               return true;\r\n         } else {\r\n            return this.router.parseUrl('/login');\r\n         }\r\n      }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>checkLogin will check whether the localStorage has the user information and if it is available, then it returns true.</li>\r\n<li>If the user is logged in and goes to login page, it will redirect the user to expenses page</li>\r\n<li>If the user is not logged in, then the user will be redirected to login page.</li>\r\n</ul>\r\n<p>Open <b>AppRoutingModule (src/app/app-routing.module.ts)</b> and update below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ExpenseEntryComponent } from './expense-entry/expense-entry.component';\r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\n\r\nimport { ExpenseGuard } from './expense.guard';\r\n\r\nconst routes: Routes = [\r\n   { path: 'login', component: LoginComponent },\r\n   { path: 'logout', component: LogoutComponent },\r\n   { path: 'expenses', component: ExpenseEntryListComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li>Imported LoginComponent and LogoutComponent.</li>\r\n<li>Imported ExpenseGuard.</li>\r\n<li>Created two new routes, login and logout to access LoginComponent and LogoutComponent respectively.</li>\r\n<li>Add new option canActivate for ExpenseEntryComponent and ExpenseEntryListComponent.</li>\r\n</ul>\r\n<p>Open <b>AppComponent </b>template and add two login and logout link.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt;\r\n   &lt;ul class=\"navbar-nav ml-auto\"&gt;\r\n      &lt;li class=\"nav-item active\"&gt;\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n            &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt;\r\n\r\n         &lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n         &lt;a class=\"nav-link\" routerLink=\"/expenses\"&gt;Report&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;Add Expense&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n\r\n         &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li class=\"nav-item\"&gt;\r\n                  &lt;div *ngIf=\"isUserLoggedIn; else isLogOut\"&gt;\r\n                        &lt;a class=\"nav-link\" routerLink=\"/logout\"&gt;Logout&lt;/a&gt;\r\n                  &lt;/div&gt;\r\n\r\n                  &lt;ng-template #isLogOut&gt;\r\n                              &lt;a class=\"nav-link\" routerLink=\"/login\"&gt;Login&lt;/a&gt;\r\n                  &lt;/ng-template&gt;\r\n      &lt;/li&gt;\r\n   &lt;/ul&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Open <b>AppComponent</b> and update below code &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { Component } from '@angular/core';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n   templateUrl: './app.component.html',\r\n   styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n   title = 'Expense Manager';\r\n   isUserLoggedIn = false;\r\n\r\n   constructor(private authService: AuthService) {}\r\n\r\n   ngOnInit() {\r\n      let storeData = localStorage.getItem(\"isUserLoggedIn\");\r\n      console.log(\"StoreData: \" + storeData);\r\n\r\n      if( storeData != null && storeData == \"true\")\r\n         this.isUserLoggedIn = true;\r\n      else\r\n\r\n\r\n         this.isUserLoggedIn = false;\r\n   }\r\n}\r\n</pre>\r\n<p>Here, we have added the logic to identify the user status so that we can show login / logout functionality.</p>\r\n<p>Open <b>AppModule (src/app/app.module.ts)</b> and configure <b>ReactiveFormsModule</b></p>\r\n<pre class=\"prettyprint notranslate\">\r\nimport { ReactiveFormsModule } from '@angular/forms'; \r\nimports: [ \r\n   ReactiveFormsModule \r\n]\r\n</pre>\r\n<p>Now, run the application and the application opens the login page.</p>\r\n<!-- src=\"images/reactiveformsmodule.jpg\" alt=\"ReactiveFormsModule\" />-->\r\n<p>Enter admin and admin as username and password and then, click submit. The application process the login and redirects the user to expense list page as shown below &minus;</p>\r\n<!-- src=\"images/formsmodule.jpg\" alt=\"FormsModule\" />-->\r\n<p>Finally, your can click logout and exit the application.</p>\r\n<h2>Add / Edit / Delete Expenses</h2>\r\n<p>Add new component, <b>EditEntryComponent</b> to add new expense entry and edit the existing expense entries using below command</p>\r\n<pre class=\"result notranslate\">\r\nng generate component EditEntry\r\nCREATE src/app/edit-entry/edit-entry.component.html (25 bytes)\r\nCREATE src/app/edit-entry/edit-entry.component.spec.ts (650 bytes)\r\nCREATE src/app/edit-entry/edit-entry.component.ts (284 bytes)\r\nCREATE src/app/edit-entry/edit-entry.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1146 bytes)\r\n</pre>\r\n<p>Update <b>EditEntryComponent</b> with below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\nimport { ExpenseEntry } from '../expense-entry';\r\nimport { ExpenseEntryService } from '../expense-entry.service';\r\n\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n   selector: 'app-edit-entry',\r\n   templateUrl: './edit-entry.component.html',\r\n   styleUrls: ['./edit-entry.component.css']\r\n})\r\nexport class EditEntryComponent implements OnInit {\r\n   id: number;\r\n   item: string;\r\n   amount: number;\r\n   category: string;\r\n   location: string;\r\n   spendOn: Date;\r\n\r\n   formData: FormGroup;\r\n   selectedId: number;\r\n   expenseEntry: ExpenseEntry;\r\n\r\n   constructor(private expenseEntryService : ExpenseEntryService, private router: Router, private route: ActivatedRoute) { }\r\n\r\n   ngOnInit() {\r\n      this.formData = new FormGroup({\r\n         id: new FormControl(),\r\n         item: new FormControl('', [Validators.required]),\r\n         amount: new FormControl('', [Validators.required]),\r\n         category: new FormControl(),\r\n         location: new FormControl(),\r\n         spendOn: new FormControl()\r\n      });\r\n\r\n      this.selectedId = Number(this.route.snapshot.paramMap.get('id'));\r\n\r\n      if(this.selectedId != null && this.selectedId != 0) {\r\n         this.expenseEntryService.getExpenseEntry(this.selectedId)\r\n            .subscribe( (data) => \r\n               {\r\n                  this.expenseEntry = data;\r\n                  this.formData.controls['id'].setValue(this.expenseEntry.id);\r\n                  this.formData.controls['item'].setValue(this.expenseEntry.item);\r\n                  this.formData.controls['amount'].setValue(this.expenseEntry.amount);\r\n                  this.formData.controls['category'].setValue(this.expenseEntry.category);\r\n                  this.formData.controls['location'].setValue(this.expenseEntry.location);\r\n\r\n\r\n                  this.formData.controls['spendOn'].setValue(this.expenseEntry.spendOn);\r\n               })\r\n      }\r\n\r\n\r\n   }\r\n\r\n   get itemValue() {\r\n   return this.formData.get('item');\r\n   }\r\n\r\n   get amountValue() {\r\n   return this.formData.get('amount');\r\n   }\r\n\r\n    onClickSubmit(data: any) {\r\n   console.log('onClickSubmit fired');\r\n   this.id = data.id;\r\n   this.item = data.item;\r\n   this.amount = data.amount;\r\n   this.category = data.category;\r\n   this.location = data.location;\r\n   this.spendOn = data.spendOn;\r\n\r\n   let expenseEntry : ExpenseEntry = {\r\n      id: this.id,\r\n       item: this.item,\r\n       amount: this.amount,\r\n       category: this.category,\r\n       location: this.location,\r\n       spendOn: this.spendOn,\r\n       createdOn: new Date(2020, 5, 20)\r\n   }\r\n   console.log(expenseEntry);\r\n\r\n      if(expenseEntry.id == null || expenseEntry.id == 0) {\r\n         console.log('add fn fired');\r\n      this.expenseEntryService.addExpenseEntry(expenseEntry)\r\n         .subscribe( data => { console.log(data); this.router.navigate(['/expenses']); });\r\n   } else {\r\n         console.log('edit fn fired');\r\n      this.expenseEntryService.updateExpenseEntry(expenseEntry)\r\n         .subscribe( data => { console.log(data); this.router.navigate(['/expenses']); });\r\n   }\r\n    }\r\n}\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Created a form, <b>formData</b> in the <b>ngOnInit</b> method using <b>FormControl</b> and <b>FormGroup</b> classes with proper validation rules.</p></li>\r\n<li><p>Loaded the expense entry to be edited in the <b>ngOnInit</b> method.</p></li>\r\n<li><p>Created two methods, <b>itemValue</b> and <b>amountValue</b> to get the item and amount values respectively entered by user for the validation purpose.</p></li>\r\n<li><p>Created method, <b>onClickSubmit</b> to save (add / update) the expense entry.</p></li>\r\n<li><p>Used Expense service to add and update expense entries.</p></li>\r\n</ul>\r\n<p>Update the <b>EditEntryComponent</b> template with expense form as shown below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n   &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n       &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt;\r\n       &lt;/div&gt;\r\n       &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt;\r\n&lt;form [formGroup]=\"formData\" (ngSubmit)=\"onClickSubmit(formData.value)\" class=\"form\" novalidate&gt; \r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"item\"&gt;Item&lt;/label&gt;\r\n    &lt;input type=\"hidden\" class=\"form-control\" id=\"id\" formControlName=\"id\"&gt;\r\n    &lt;input type=\"text\" class=\"form-control\" id=\"item\" formControlName=\"item\"&gt;\r\n    &lt;div\r\n   *ngIf=\"!itemValue?.valid && (itemValue?.dirty ||itemValue?.touched)\"&gt;\r\n   &lt;div [hidden]=\"!itemValue.errors.required\"&gt;\r\n      Item is required\r\n   &lt;/div&gt;\r\n   &lt;/div&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"amount\"&gt;Amount&lt;/label&gt;\r\n    &lt;input type=\"text\" class=\"form-control\" id=\"amount\" formControlName=\"amount\"&gt;\r\n    &lt;div\r\n   *ngIf=\"!amountValue?.valid && (amountValue?.dirty ||amountValue?.touched)\"&gt;\r\n   &lt;div [hidden]=\"!amountValue.errors.required\"&gt;\r\n      Amount is required\r\n   &lt;/div&gt;\r\n   &lt;/div&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"category\"&gt;Category&lt;/label&gt;\r\n    &lt;select class=\"form-control\" id=\"category\" formControlName=\"category\"&gt;\r\n      &lt;option&gt;Food&lt;/option&gt;\r\n      &lt;option&gt;Vegetables&lt;/option&gt;\r\n      &lt;option&gt;Fruit&lt;/option&gt;\r\n      &lt;option&gt;Electronic Item&lt;/option&gt;\r\n\r\n      &lt;option&gt;Bill&lt;/option&gt;\r\n    &lt;/select&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"location\"&gt;location&lt;/label&gt;\r\n    &lt;input type=\"text\" class=\"form-control\" id=\"location\" formControlName=\"location\"&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"form-group\"&gt;\r\n    &lt;label for=\"spendOn\"&gt;spendOn&lt;/label&gt;\r\n    &lt;input type=\"text\" class=\"form-control\" id=\"spendOn\" formControlName=\"spendOn\"&gt;\r\n  &lt;/div&gt;\r\n&lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" [disabled]=\"!formData.valid\"&gt;Submit&lt;/button&gt;\r\n&lt;/form&gt;\r\n       &lt;/div&gt;\r\n   &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Here,</p>\r\n<ul class=\"list\">\r\n<li><p>Created a form and bind it to the form, <b>formData</b> created in the class.</p></li>\r\n<li><p>Validated <b>item</b> and <b>amount</b> as required values.</p></li>\r\n<li><p>Called <b>onClickSubmit</b> function once validation in successful.</p></li>\r\n</ul>\r\n<p>Open <b>EditEntryComponent</b> stylesheet and update below code &minus;</p>\r\n<pre class=\"result notranslate\">\r\n.form {\r\n   max-width: 330px;\r\n   padding: 15px;\r\n   margin: 0 auto;\r\n}\r\n\r\n.form label {\r\n   text-align: left;\r\n   width: 100%;\r\n}\r\n\r\ninput {\r\n   margin-bottom: 20px;\r\n}\r\n</pre>\r\n<p>Here, we have styled the expense entry form.</p>\r\n<p>Add <b>AboutComponent</b> using below command</p>\r\n<pre class=\"result notranslate\">\r\nng generate component About\r\nCREATE src/app/about/about.component.html (20 bytes)\r\n\r\nCREATE src/app/about/about.component.spec.ts (621 bytes)\r\nCREATE src/app/about/about.component.ts (265 bytes)\r\nCREATE src/app/about/about.component.css (0 bytes)\r\nUPDATE src/app/app.module.ts (1120 bytes)\r\n</pre>\r\n<p>Open <b>AboutComponent</b> and add title as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n   selector: 'app-about',\r\n   templateUrl: './about.component.html',\r\n   styleUrls: ['./about.component.css']\r\n})\r\nexport class AboutComponent implements OnInit {\r\n   title = \"About\";\r\n   constructor() { }\r\n\r\n   ngOnInit() {\r\n   }\r\n\r\n}\r\n</pre>\r\n<p>Open <b>AboutComponent</b> template and updated content as specified below &minus;</p>\r\n<pre class=\"result notranslate\">\r\n&lt;!-- Page Content --&gt;\r\n&lt;div class=\"container\"&gt;\r\n   &lt;div class=\"row\"&gt;\r\n   &lt;div class=\"col-lg-12 text-center\" style=\"padding-top: 20px;\"&gt;\r\n       &lt;div class=\"container\" style=\"padding-left: 0px; padding-right: 0px;\"&gt;\r\n      &lt;div class=\"row\"&gt;\r\n          &lt;div class=\"col-sm\" style=\"text-align: left;\"&gt;\r\n         &lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n          &lt;/div&gt;\r\n      &lt;/div&gt;\r\n       &lt;/div&gt;\r\n       &lt;div class=\"container box\" style=\"margin-top: 10px;\"&gt;\r\n      &lt;div class=\"row\"&gt;\r\n          &lt;div class=\"col\" style=\"text-align: left;\"&gt;\r\n         &lt;p&gt;Expense management Application&lt;/p&gt;\r\n          &lt;/div&gt;\r\n      &lt;/div&gt;\r\n       &lt;/div&gt;\r\n   &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Add routing for add and edit expense entries as specified below</p>\r\n<pre class=\"result notranslate\">\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ExpenseEntryComponent } from './expense-entry/expense-entry.component';\r\nimport { ExpenseEntryListComponent } from './expense-entry-list/expense-entry-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\nimport { EditEntryComponent } from './edit-entry/edit-entry.component';\r\nimport { AboutComponent } from './about/about.component';\r\n\r\nimport { ExpenseGuard } from './expense.guard';\r\n\r\nconst routes: Routes = [\r\n   { path: 'about', component: AboutComponent },\r\n   { path: 'login', component: LoginComponent },\r\n   { path: 'logout', component: LogoutComponent },\r\n   { path: 'expenses', component: ExpenseEntryListComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/detail/:id', component: ExpenseEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/add', component: EditEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: 'expenses/edit/:id', component: EditEntryComponent, canActivate: [ExpenseGuard]},\r\n   { path: '', redirectTo: 'expenses', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n      imports: [RouterModule.forRoot(routes)],\r\n      exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n</pre>\r\n<p>Here, we have added <b>about, add expense</b> and <b>edit expense</b> routes.</p>\r\n<p>Add <b>Edit</b> and <b>Delete</b> links in <b>ExpenseEntryListComponent</b> template.</p>\r\n<pre class=\"result notranslate\">\r\n&lt;table class=\"table table-striped\"&gt;\r\n   &lt;thead&gt;\r\n         &lt;tr&gt;\r\n         &lt;th&gt;Item&lt;/th&gt;\r\n         &lt;th&gt;Amount&lt;/th&gt;\r\n         &lt;th&gt;Category&lt;/th&gt;\r\n         &lt;th&gt;Location&lt;/th&gt;\r\n         &lt;th&gt;Spent On&lt;/th&gt;\r\n         &lt;th&gt;View&lt;/th&gt;\r\n               &lt;th&gt;Edit&lt;/th&gt;\r\n               &lt;th&gt;Delete&lt;/th&gt;\r\n         &lt;/tr&gt;\r\n   &lt;/thead&gt;\r\n   &lt;tbody&gt;\r\n      &lt;tr *ngFor=\"let entry of expenseEntries\"&gt;\r\n\r\n      &lt;th scope=\"row\"&gt;{{ entry.item }}&lt;/th&gt;\r\n      &lt;th&gt;{{ entry.amount }}&lt;/th&gt;\r\n      &lt;td&gt;{{ entry.category }}&lt;/td&gt;\r\n      &lt;td&gt;{{ entry.location }}&lt;/td&gt;\r\n      &lt;td&gt;{{ entry.spendOn | date: 'medium' }}&lt;/td&gt;\r\n      &lt;td&gt;&lt;a routerLink=\"../expenses/detail/{{ entry.id }}\"&gt;View&lt;/a&gt;&lt;/td&gt;\r\n      &lt;td&gt;&lt;a routerLink=\"../expenses/edit/{{ entry.id }}\"&gt;Edit&lt;/a&gt;&lt;/td&gt;\r\n      &lt;td&gt;&lt;a href=\"#\" (click)=\"deleteExpenseEntry($event, entry.id)\"&gt;Delete&lt;/a&gt;&lt;/td&gt;\r\n      &lt;/tr&gt;\r\n   &lt;/tbody&gt;\r\n&lt;/table&gt;\r\n</pre>\r\n<p>Here, we have included two more columns. One column is used to show edit link and another to show delete link.</p>\r\n<p>Update <b>deleteExpenseEntry</b> method in <b>ExpenseEntryListComponent</b> as shown below</p>\r\n<pre class=\"prettyprint notranslate\">\r\ndeleteExpenseEntry(evt, id) {\r\n   evt.preventDefault();\r\n   if(confirm(\"Are you sure to delete the entry?\")) {\r\n      this.restService.deleteExpenseEntry(id)\r\n         .subscribe( data =&gt; console.log(data) );\r\n\r\n      this.getExpenseItems();\r\n   }\r\n}\r\n</pre>\r\n<p>Here, we have asked to confirm the deletion and it user confirmed, called the <b>deleteExpenseEntry </b>method from expense service to delete the selected expense item.</p>\r\n<p>Change <b>Edit</b> link in the <b>ExpenseEntryListComponent</b> template at the top to <b>Add</b> link as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt;\r\n   &lt;button class=\"btn btn-primary\" routerLink=\"/expenses/add\"&gt;ADD&lt;/button&gt; \r\n   &lt;!-- &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Edit&lt;/button&gt; --&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Add <b>Edit</b> link in<b>ExpenseEntryComponent</b> template.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;div class=\"col-sm\" style=\"text-align: right;\"&gt;\r\n   &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"goToList()\"&gt;Go to List&lt;/button&gt;\r\n   &nbsp;&lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"goToEdit()\"&gt;Edit&lt;/button&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<p>Open <b>ExpenseEntryComponent</b> and add <b>goToEdit()</b> method as shown below &minus;</p>\r\n<pre class=\"prettyprint notranslate\">\r\ngoToEdit() {      \r\n   this.router.navigate(['/expenses/edit', this.selectedId]); \r\n}\r\n</pre>\r\n<p>Update navigation links in <b>AppComponent</b>template.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;!-- Navigation --&gt;\r\n&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\"&gt;\r\n   &lt;div class=\"container\"&gt;\r\n      &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{ title }}&lt;/a&gt;\r\n      &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\r\n         &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\r\n      &lt;/button&gt;\r\n      &lt;div class=\"collapse navbar-collapse\" id=\"navbarResponsive\"&gt;\r\n         &lt;ul class=\"navbar-nav ml-auto\"&gt;\r\n            &lt;li class=\"nav-item active\"&gt;\r\n               &lt;a class=\"nav-link\" href=\"#\"&gt;Home\r\n                  &lt;span class=\"sr-only\" routerLink=\"/\"&gt;(current)&lt;/span&gt;\r\n               &lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n               &lt;a class=\"nav-link\" routerLink=\"/expenses/add\"&gt;Add Expense&lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n               &lt;a class=\"nav-link\" routerLink=\"/about\"&gt;About&lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n                        &lt;div *ngIf=\"isUserLoggedIn; else isLogOut\"&gt;\r\n                              &lt;a class=\"nav-link\" routerLink=\"/logout\"&gt;Logout&lt;/a&gt;\r\n                        &lt;/div&gt;\r\n\r\n                        &lt;ng-template #isLogOut&gt;\r\n                                    &lt;a class=\"nav-link\" routerLink=\"/login\"&gt;Login&lt;/a&gt;\r\n                        &lt;/ng-template&gt;\r\n            &lt;/li&gt;\r\n         &lt;/ul&gt;\r\n      &lt;/div&gt;\r\n   &lt;/div&gt;\r\n&lt;/nav&gt;\r\n\r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</pre>\r\n<p>Here, we have updated the <b>add expense</b> link and <b>about</b> link.</p>\r\n<p>Run the application and the output will be similar as shown below &minus;</p>\r\n<!-- src=\"images/expense.jpg\" alt=\"expense\" />-->\r\n<p>Try to add new expense using <b>Add</b> link in expense list page. The output will be similar as shown below</p>\r\n<!-- src=\"images/add.jpg\" alt=\"Add\" />-->\r\n<p>Fill the form as shown below &minus;</p>\r\n<!-- src=\"images/submit.jpg\" alt=\"Submit\" />-->\r\n<p>If the data is not filled properly, the validation code will alert as shown below &minus;</p>\r\n<!-- src=\"images/alert.jpg\" alt=\"alert\" />-->\r\n<p>Click <b>Submit</b>. It will trigger the submit event and the data will be saved to the backend and redirected to list page as shown below &minus;</p>\r\n<!-- src=\"images/backend.jpg\" alt=\"backend\" />-->\r\n<p>Try to edit existing expense using Edit link in expense list page. The output will be similar as shown below &minus;</p>\r\n<!-- src=\"images/existing.jpg\" alt=\"existing\" />-->\r\n<p>Click <b>Submit.</b> It will trigger the submit event and the data will be saved to the backend and redirected to list page.</p>\r\n<p>To delete an item, click delete link. It will confirm the deletion as shown below &minus;</p>\r\n<!-- src=\"images/trigger.jpg\" alt=\"trigger\" />-->\r\n<p>Finally, we have implemented all features necessary to manage expenses in our application.</p>\r\n\t\t</div>\r\n\t","KEYS":["accessibility","angular_components_and_templates","angular_material","animations","architecture","authentication_and_authorization","backward_compatibility","building_with_bazel","cli_commands","creating_first_application","data_binding","directives","discussion","form_validation","forms","http_client_programming","installation","internationalization","introduction","ivy_compiler","pdf_version","pipes","quick_guide","reactive_programming","routing_and_navigation","server_side_rendering","service_workers_and_pwa","testing","services_and_dependency_injection","useful_resources","web_workers","whats_new","working_example"]}